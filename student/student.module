<?php

/*
 * This file is licensed under GPLv2+.
*/

function _student_genRandomString($len) 
{ 
	$chars = array( 
		"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k",  
		"l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v",  
		"w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G",  
		"H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R",  
		"S", "T", "U", "V", "W", "X", "Y", "Z", "0", "1", "2",  
		"3", "4", "5", "6", "7", "8", "9" 
	); 
	$charsLen = count($chars) - 1; 

	shuffle($chars);

	$output = ""; 
	for ($i=0; $i<$len; $i++) 
	{ 
		$output .= $chars[mt_rand(0, $charsLen)]; 
	} 

	return $output; 

}

function _student_get_random_mail_address(){
	return _student_genRandomString(10).'@'._student_genRandomString(5).'.'._student_genRandomString(5).".com";
}

/**
* Function that determine whether YYYYMMDD is a valid date
*/
function _student_is_date_validate($datestr) {
	switch (strlen($datestr)) {
		case 8:
			$year = substr($datestr,0,4);
			$month = substr($datestr,4,2);
			$day = substr($datestr,6,2);
			return checkdate($month, $day, $year);
		default: return false;
	}
}

/**
* Function that computes the capthca char of IDCard number.
*/
function _student_idc_get_captcha($idcardn) {
	$idcardn = substr($idcardn, 0, 17);
	$sum = 0;
	$weight = array (7,9,10,5,8,4,2,1,6,3,7,9,10,5,8,4,2);
	for ($i=0; $i<17; $i++) {
		$sum += substr($idcardn, $i, 1)* $weight[$i];
	}
	$captcha = 12 - ($sum % 11);
	switch ($captcha) {
		case 10: $captcha = 'X'; break;
		case 11: $captcha = '0'; break;
		case 12: $captcha = '1'; break;
		default: $captcha = sprintf('%d',$captcha);
	}
	return $captcha;
}

function _student_is_idcardn_validate($idcardn) {
	switch (strlen($idcardn)) {
		case 18:
			if (preg_match('/\d{17}[\dX]/', $idcardn) == 0)
				return false;
			if (!_student_is_date_validate(substr($idcardn,6,8)))
				return false;
			if (_student_idc_get_captcha($idcardn) != substr($idcardn, 17, 1))
				return false;
			return true;
		default: return false;
	}
}


/**
 * @file
 * Defines the the progress of signup.
 */
 
/**
 * Implementation of hook_help().
 */
function student_help($path, $arg) {
}


/**
 * Implementation of hook_menu().
 */
function student_menu() {
	$items=array();
	$items['user/%user/%/picture.jpg'] = array(
		'title' => 'Fetch picture of student',
		'page callback' => 'student_picture',
		'page arguments' => array(1),
		'type' => MENU_CALLBACK,
		'access callback' => 'student_picture_perm',
		'access arguments'=> array(1,2),
	);
	return $items;
}

function student_picture_perm($user,$md5=NULL) {
	if(!user_view_access($user)) return FALSE;
	$query=db_select('students','s')->fields('s',array('picture'))->condition('uid', $user->uid);
	$img_tmp=$query->execute()->fetchField();
	if(substr(md5($img_tmp), 0,4)!=$md5) return FALSE;
	if($img_tmp)
		$test=imagecreatefromstring(base64_decode($img_tmp));
	else $test=false;
	if($test)
		imagedestroy($test);
	return $test != FALSE;
}

function student_form_user_register_form_alter(&$form, &$form_state) {
	// we don't need email address for this site
	$form['account']['mail']['#type']='hidden';
	$form['account']['mail']['#value']=_student_get_random_mail_address();

	if(!user_access('administer users')) {
		$form['account']['name']['#description']=t('You may select any nick name you like for this.');
		$form['actions']['submit']['#value']=t('Register and Proceed');
		drupal_set_title('Register New Account');
		$form['#submit'][] = 'student_form_user_register_form_submit';
	}
}

function student_form_user_register_form_submit($form, &$form_state) {
	$form_state['redirect'] = 'user/'.$form_state['uid'].'/edit';
	drupal_get_messages('error');
}

function student_form_user_profile_form_alter(&$form, $form_state) {
	if(!user_access('administer users'))
		$form['account']['current_pass']['#description']=t('Enter your current password to change the password.').t('If you forgot current password, <a href="@url">please click here</a> to reset password.', array('@url'=>'/user/password'));
	if($form['#user']->uid <> 1) {
		$form['account']['name']['#disabled'] = TRUE;
		$form['account']['status']['#disabled'] = TRUE;
		$form['account']['status']['#type'] = 'hidden';
		unset($form['actions']['cancel']);
	}
	if(isset($form['account']['mail']) && $form['#user']->uid <> 1)
		$form['account']['mail']['#type']='hidden';
	if(!user_access('administer users', $form['#user']))
		student_user_account_form($form, $form_state);
}

function student_user_account_form(&$form, $form_state) {
	$user=$form['#user'];
	$form['account']['#type']='fieldset';
	$form['account']['#collapsible']=TRUE;
	$form['account']['#collapsed']=TRUE;
	$form['account']['#title'] = t('Change Password');

	$defaults=student_load($user);

	$form['personal'] = array(
		'#type' => 'fieldset',
		'#title' => t('Personal information'),
		'#description' => t('You\'ll need to provide these information when reseting password.'),
		'#collapsible' => TRUE,
	);
	$form['personal']['notice']=array(
		'#markup' => '<span class="error"><strong>'.t('Please provide the information of the student here, rather than the parent.').'</strong></span>',
	);
	$form['personal']['idcard_type'] = array('#type' => 'select',
		'#title' => t('Your ID Card Type'),
		'#options' => array(
			'0' => t('Mainland ID Card'),
			'1' => t('Oversea Passport'),
		),
		'#default_value' => $defaults ? $defaults->idcard_type:'0',
		'#required' => TRUE,
	);
	$form['personal']['idnumber'] = array('#type' => 'textfield',
		'#title' => t('Your ID Card Number'),
		'#description' => t('We\'re calculating gender and date of birth based on your ID card number.') ,
		'#default_value' => $defaults ? $defaults->idcard_number:'',
		'#maxlength' => 18,
		'#required' => TRUE,
		'#attributes' => array('style'=>'text-transform: uppercase; ime-mode: disabled; -webkit-ime-mode: disabled;'),
	);
	$form['personal']['dateofbirth'] = array('#type' => 'date',
		'#title' => t('Your Date of Birth'),
		'#default_value' => $defaults ? array(
			'year' => substr($defaults->date_of_birth,0,4),
			'month' => 1*substr($defaults->date_of_birth,4,2),
			'day' => 1*substr($defaults->date_of_birth,6,2),
		):array(),
		'#required' => TRUE,
		'#element_validate' => array(),
		'#states' => array(
			'invisible' => array(
				':input[name="idcard_type"]' => array('value' =>'0'),
			),
			'optional' => array(
				':input[name="idcard_type"]' => array('value' =>'0'),
			)
		),
	);
	$form['personal']['gender'] = array('#type' => 'radios',
		'#title' => t('Your Gender'),
		'#default_value' => $defaults ? $defaults->gender: '1',
		'#options' => array('1'=>t('Male'), '2'=>t('Female')),
		'#required' => TRUE,
		'#states' => array(
			'invisible' => array(
				':input[name="idcard_type"]' => array('value' =>'0'),
			),
			'optional' => array(
				':input[name="idcard_type"]' => array('value' =>'0'),
			)
		),
	);
	$form['personal']['truename'] = array('#type' => 'textfield',
		'#title' => t('Your Name'),
		'#default_value' => $defaults ? $defaults->name:'',
		'#maxlength' => 50,
		'#required' => TRUE,
		'#attributes' => array('style'=>'ime-mode: enabled; -webkit-ime-mode: enabled;'),
	);

	$form['personal']['haveexname'] = array('#type' => 'checkbox',
		'#title' => t('I have exname'),
		'#default_value' => $defaults ? !empty($defaults->exname):FALSE,
		'#description' => t('If you do not have exname, please uncheck the above checkbox.'),
	);
	$form['personal']['exname'] = array('#type' => 'textfield',
		'#title' => t('Your Ex Name'),
		'#default_value' => $defaults ? $defaults->exname:'',
		'#maxlength' => 50,
		'#attributes' => array('style'=>'ime-mode: enabled; -webkit-ime-mode: enabled;'),
		'#states' => array(
			'visible' => array(
				':input[name="haveexname"]' => array('checked' =>TRUE),
			),
			'required' => array(
				':input[name="haveexname"]' => array('checked' =>TRUE),
			)
		),
	);

	$form['personal']['pyname'] = array('#type' => 'textfield',
		'#title' => t('Your Name in alphabet'),
		'#description' => t('Only Half-width alphabet is allowed.'),
		'#default_value' => $defaults ? $defaults->foreign_name:'',
		'#maxlength' => 100,
		'#required' => TRUE,
		'#attributes' => array('style'=>'text-transform: uppercase; ime-mode: disabled; -webkit-ime-mode: disabled;'),
	);
	if($defaults) {
		$form['personal']['current_photo'] = array(
			'#type' => 'item',
			'#title' => t('Current Picture'),
			'#markup' => sprintf('<img src="%s" style="padding-right: 10px"/>', $student->picture),
		);
	}
	$form['personal']['photo'] = array(
		'#type' => 'managed_file',
		'#title' => !$defaults?t('Photo'):t('Change Photo'),
		'#required' => TRUE,
		'#required' => !$defaults,
		'#upload_validators' => array(
			'file_validate_extensions' => array('jpg png jpeg'),
			'file_validate_image_resolution' => array('200x200', '150x150'),
			'file_validate_is_image' => array(),
		),
		'#description' => t('Only image files are allowed to be uploaded.'),
	);
	if($defaults) {
		$form['personal']['photo']['#description'] .= t('If you want to change the picture, please upload it here. Otherwise, just leave it blank.');
	}
	$form['#validate'][]='student_user_account_form_validate';
	$form['#submit'][]='student_user_account_form_save';
}

function student_picture($account) {
	$query=db_select('students','s')->fields('s',array('picture'))->condition('s.uid',$account->uid);
	$img_tmp=$query->execute()->fetchField();
	if(!$img_tmp) return NULL;
	$img=imagecreatefromstring(base64_decode($img_tmp));
	$newheight=200;
	$newwidth=imagesx($img)*200/imagesy($img);

	$newimg=imagecreatetruecolor($newwidth, $newheight);
	imagecopyresampled($newimg, $img, 0, 0, 0, 0, $newwidth, $newheight, imagesx($img), imagesy($img));

	drupal_add_http_header('Content-type', 'image/jpg; charset=binary', TRUE);
	drupal_add_http_header('Content-Transfer-Encoding', 'binary', TRUE);

	// Do not expire image file, because it causes overload of server :(
	// seconds, minutes, hours, days
	$expires = 60*60*24*300;
	drupal_add_http_header("Pragma", "public", TRUE);
	drupal_add_http_header("Cache-Control", "maxage=".$expires, TRUE);
	drupal_add_http_header('Expires', gmdate('D, d M Y H:i:s', time()+$expires) . ' GMT', TRUE);
	imagejpeg($newimg, NULL, 100);
	imagedestroy($img);
	imagedestroy($newimg);
}

function student_user_account_form_validate($form, $form_state) {
	$user=$form_state['user'];
	$edit=$form_state['values'];

	// 1. Validating idcard number
	$idnumber=strtoupper(trim($edit['idnumber']));
	// 1.1 If the idcard number is occupied by any others.
	$query=db_query('SELECT EXISTS( SELECT * FROM {students} WHERE idcard_number=:idcard_number AND uid<>:uid)',
		array(':idcard_number'=>$idnumber, ':uid'=>$user->uid)
	);
	if($query->fetchField())  {
		form_set_error('idnumber', t('The ID Card number you\'ve entered is occupied by somebody else.'));
		return;
	}
	else {
		// 1.2 If not occupied, then check if the number is valid
		if($edit['idcard_type']=='0') {
			// 1.2.1 Is it a valid idcard number?
			if(!_student_is_idcardn_validate($idnumber)) {
				form_set_error('idnumber', t('The ID Card number you\'ve entered is not valid.'));
				return;
			} else {
			// 1.2.2 If valid, is the date too new?
				$edit['dateofbirth']['year']=substr($idnumber,6,4);
				$edit['dateofbirth']['month']=substr($idnumber,10,2);
				$edit['dateofbirth']['day']=substr($idnumber,12,2);
			}
		} else {
			if(empty($idnumber)) {
				form_set_error('idnumber', t('!name field is required.', array('!name'=>t('Your Name'))));
			}
		}
	}
    
    $exname=trim($edit['exname']);
	if($edit['haveexname'] && empty($exname)) {
		form_set_error('exname', t('!name field is required.', array('!name'=>t('Your Ex Name'))));
	}
		

	// 2. Validating birth date
	$datestr=sprintf("%04d%02d%02d",$edit['dateofbirth']['year'], $edit['dateofbirth']['month'], $edit['dateofbirth']['day']);
	if(_student_is_date_validate($datestr)) {
		$date=new DateTime();
		$date->setDate($edit['dateofbirth']['year'], $edit['dateofbirth']['month'], $edit['dateofbirth']['day']);
		if($date >= new DateTime())
			form_set_error('dateofbirth', t('The birth date you\'ve selected is not valid.'));
	} else
		form_set_error('dateofbirth', t('The birth date you\'ve selected is not valid.'));

	// 3. Validating pyname
	if(!preg_match('/^[A-Z ]+$/', strtoupper(trim($edit['pyname'])))) {
		form_set_error('pyname', t('The alphabet name you\'ve entered is not valid.'));
	}
}

function student_user_account_form_save($form, $form_state) {
	$user=$form_state['user'];
	db_merge('students')
		->key(array('uid' => $user->uid, 'idcard_number' => strtoupper(trim($form_state['values']['idnumber']))))
		->fields(array(
			'uid' => $user->uid,
			'idcard_type' => $form_state['values']['idcard_type'],
			'idcard_number' => strtoupper(trim($form_state['values']['idnumber'])),
			'date_of_birth' => $form_state['values']['idcard_type']=='0'?
				substr(strtoupper(trim($form_state['values']['idnumber'])), 6, 8):
				sprintf("%04d%02d%02d",$form_state['values']['dateofbirth']['year'], $form_state['values']['dateofbirth']['month'], $form_state['values']['dateofbirth']['day']),
			'gender' => $form_state['values']['idcard_type']=='0'?
				2-(substr(trim($form_state['values']['idnumber']),16,1) % 2):
				$form_state['values']['gender'],
			'name' => trim($form_state['values']['truename']),
			'exname' => $form_state['values']['haveexname']?trim($form_state['values']['exname']):'',
			'foreign_name' => strtoupper(trim($form_state['values']['pyname'])),
		))->execute();
		if($form_state['values']['photo']) {
			$file=file_load($form_state['values']['photo']);
			$image=image_load($file->uri);
			image_save($image, $file->uri.'.jpg');
			$fd=fopen($file->uri.'.jpg','rb');
			$data='';
			while (!feof($fd)) {
				$data.=fread($fd, 1024);
			}
			fclose($fd);
			file_unmanaged_delete($file->uri.'.jpg');
			db_update('students')->condition('uid',$user->uid)->fields(array(
				'picture' => base64_encode($data),
			))->execute();
		}
}

/**
 * Implementation of object_load().
 */
function student_load($user) {
	if($user && $user->uid) {
		$obj=db_select('students','s')->condition('s.uid',$user->uid)->fields('s')->execute()->fetchObject();
		if(!$obj) return FALSE;
		$obj->rawpicture=$obj->picture;
		if(preg_match('/(?i)msie [1-8]/',$_SERVER['HTTP_USER_AGENT'])) {
			$url=sprintf('%suser/%s/%s/picture.jpg', base_path(), $obj->uid, substr(md5($obj->picture),0,4));
			$obj->picture=$url;
		} else $obj->picture='data:image/jpeg;base64,'.$obj->picture;
		return $obj;
	}
	else return FALSE;
}

?>
