<?php

/*
 * This file is licensed under GPLv2+.
 */

/**
 * @file
 * Provides management of exam goings.
 */

define('exam_signup_status_UNKNOW', 0);
define('exam_signup_status_WAIT_APPROVED', 1);
define('exam_signup_status_APPROVED', 2);
define('exam_signup_status_FINISHED', 3);
define('exam_signup_status_FINISHED_BATCH', 4);

define('exam_signup_result_ABSENT', 0);
define('exam_signup_result_FAILED', 1);
define('exam_signup_result_PASSED', 2);

define('exam_signup_going_CLOSE', 0);
define('exam_signup_going_OPEN', 1);
define('exam_signup_going_ENDED', 2);
 
/**
 * Implementation of hook_help().
 */
function exam_help($path, $arg) {
	switch ($path) {
		case 'exam':
			$output = t('You may administrate various basic information of certificates via following features.');
			break;
		case 'exam/scores':
			$output = t('In this page, you could batch upload the scores and results of previous exams.');
			$output .= t('The uploaded file must be less than 100KB, so that the system could process it more quickly.');
			break;
		case 'exam/scores/query':
			$output = t('In this page, you could query the uploaded scores. If there are mistakes, and the scores are not claimed by student, you may remove it.');
			break;
		case 'user/scores':
			$output = t('In this page, you will see the scores and result of the test you have participated.');
			$output .= t('If you have passed certain test, you may print the score report by clicking [@passbutton] link.',
				array('@passbutton'=>_exam_result_id_into_text(exam_signup_result_PASSED)));
			break;
	}
	if (isset($output))
		return $output;
}

/**
 * Implements hook_permission
 */
function exam_permission() {
	return array(
		'admin exam places' => array(
			'title' => t('Administrater exam places'),
		),
		'manage own places' => array(
			'title' => t('Manage own places'),
		),
	);
}

/**
 * Implementation of hook_menu().
 */
function exam_menu() {
	$items=array();
	$items['exam']=array(
		'menu_name' => 'user-menu',
		'plid' => '0',
		'title' => 'Exam Management',
		'description' => "Manage the exam",
		'page callback' => 'exam_blocklist',
		'weight' => 8,
		'access callback' => 'user_access',
		'access arguments'=> array('admin certificates'),
		'expanded' => TRUE,
	);
	$items['exam/places']=array(
		'menu_name' => 'user-menu',
		'title' => 'Exam Places Management',
		'description' => "Manage the Places",
		'page callback' => 'exam_places_page',
		'weight' => 1,
		'access callback' => 'user_access',
		'access arguments'=> array('admin exam places'),
	);
	$items['exam/places/idcardnumber_autocompletion']=array(
		'type' => MENU_CALLBACK,
		'page callback' => '_exam_username_from_idcard',
		'access callback' => 'user_access',
		'access arguments'=> array('admin exam places'),
	);
	$items['exam/places/modify/%place']=array(
		'type' => MENU_VISIBLE_IN_BREADCRUMB,
		'title callback' => 'exam_places_modify_form_title',
		'title arguments' => array(3),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('exam_places_modify_form', 3),
		'weight' => 1,
		'access callback' => 'exam_places_modify_form_access',
		'access arguments'=> array(3),
	);
	$items['exam/arrangement']=array(
		'menu_name' => 'user-menu',
		'title' => 'Exam Arrangement',
		'description' => "Manage the arrangements",
		'page callback' => 'drupal_get_form',
		'page arguments' => array('exam_arrangement_form'),
		'weight' => 2,
		'access callback' => 'user_access',
		'access arguments'=> array('admin exam places'),
	);
	$items['exam/arrangement/modify/%going']=array(
		'type' => MENU_VISIBLE_IN_BREADCRUMB,
		'title callback' => 'exam_arrangement_modify_form_title',
		'title arguments' => array(3),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('exam_arrangement_modify_form', 3),
		'weight' => 1,
		'access callback' => 'exam_arrangement_modify_form_access',
		'access arguments'=> array(3),
	);
	$items['exam/scores']=array(
		'title' => 'Result and Scores',
		'weight' => 10,
		'description' => "Manage the results and scores of exams",
		'page callback' => 'drupal_get_form',
		'page arguments' => array('exam_scores_form'),
		'access callback' => 'user_access',
		'access arguments'=> array('admin certificates'),
	);
	$items['exam/scores/upload']=array(
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'title' => 'Massive upload the scores',
		'weight' => 1,
		'description' => "Massive upload the scores",
		'page callback' => 'drupal_get_form',
		'page arguments' => array('exam_scores_form'),
		'access callback' => 'user_access',
		'access arguments'=> array('admin certificates'),
	);
	$items['exam/scores/query']=array(
		'type' => MENU_LOCAL_TASK,
		'title' => 'Query uploaded the scores',
		'weight' => 2,
		'description' => "Query uploaded the scores",
		'page callback' => 'drupal_get_form',
		'page arguments' => array('exam_scores_query_form'),
		'access callback' => 'exam_scores_query_form_access',
	);
	$items['exam/scores/query/unbind/%/%']=array(
		'type' => MENU_VISIBLE_IN_BREADCRUMB,
		'page callback' => 'drupal_get_form',
		'page arguments' => array('exam_scores_query_unbind_form', 4,5),
		'access callback' => 'exam_scores_query_unbind_form_access',
		'access arguments'=> array(4,5),
	);
	$items['exam/scores/query/autocomplete/user']=array(
		'type' => MENU_CALLBACK,
		'page callback' => 'exam_scores_query_autocomplete_user',
		'access callback' => 'exam_scores_query_form_access',
	);
	$items['user/scores'] = array(
		'title' => 'My scores',
		'menu_name' => 'user-menu',
		'plid' => '0',
		'weight' => 8,
		'page callback' => 'exam_user_scores',
		'access callback' => 'exam_user_scores_access',
	);
	$items['user/scores/report/%'] = array(
		'type' => MENU_VISIBLE_IN_BREADCRUMB,
		'title' => 'Score Report',
		'page callback' => 'exam_user_scores_report',
		'page arguments' => array(3),
		'access callback' => 'exam_user_scores_report_access',
		'access arguments'=> array(3),
	);
	$items['user/scores/report/%/picture.png'] = array(
		'type' => MENU_CALLBACK,
		'page callback' => 'exam_user_scores_report_qrcode',
		'page arguments' => array(3),
		'access callback' => 'exam_user_scores_report_access',
		'access arguments'=> array(3),
	);
	return $items;
}

/**
 * Provide a single block from the administration menu as a page.
 * This function is often a destination for these blocks.
 * For example, 'admin/content/types' needs to have a destination to be valid
 * in the Drupal menu system, but too much information there might be
 * hidden, so we supply the contents of the block.
 *
 * @return
 *   The output HTML.
 */
function exam_blocklist() {
	$item = menu_get_item();
	$content = system_admin_menu_block($item);

	return theme('admin_block_content', array('content' => $content));
}

function exam_scores_form($form, $form_state) {
	if(!isset($form_state['storage']['step'])) {
		unset($form_state['storage']);
		$form_state['storage']['step']=1;
	}

	if($form_state['storage']['step']==1)
		$form=exam_scores_form_step1($form, $form_state);
	else if($form_state['storage']['step']==2)
		$form=exam_scores_form_step2($form, $form_state);
	return $form;
}

function exam_scores_form_step1($form, $form_state) {
	$form['#attached']['css']=array(
		'.inline-element-div label, .inline-element-div div, .inline-element-div select, .inline-element-div input, .inline-element-div div.form-item { display: inline; }' => array('type'=>'inline'),
		'div.ajax-progress-throbber {display: none; }'=>array('type'=>'inline'),
	);
	$rdbo=db_query('SELECT * FROM {operations} o WHERE '.
		'EXISTS(SELECT * FROM {certificates_operations} co WHERE co.oid=o.oid) '.
		'AND year=:year AND oid<:month ORDER by oid DESC',
		array(':year' => date('Y'), ':month' => date('Ym'))
	);
	$options=array();
	foreach($rdbo as $r) {
		if(checkdate(substr($r->oid, 4, 2),1,$r->year))
			$options[$r->oid]=$r->name;
	}
	$operation = isset($form_state['values']['operation']) ? $form_state['values']['operation'] : (isset($form_state['storage']['operation'])?$form_state['storage']['operation']:key($options));
	$form['operation']=array(
		'#type' => 'select',
		'#title' => t('Select Operation and certificate'),
		'#prefix' => '<div class="inline-element-div">',
		'#required' => TRUE,
		'#default_value' => $operation,
		'#options' => $options,
		'#ajax' => array(
			'callback' => '_exam_score_form_step1_operation_select_callback',
			'wrapper' => 'scores-certificate-selectbox',
		),
	);
	$form['certificate']=array(
		'#type' => 'select',
		'#title' => t('Certificate'),
		'#title_display' => 'invisible',
		'#prefix' => '<div id="scores-certificate-selectbox" class="inline-element-div">',
		'#suffix' => '</div></div>',
		'#options' => _exam_score_form_step1_certificate_select_options($operation),
		'#default_value' => isset($form_state['values']['certificate']) ? $form_state['values']['certificate'] : (isset($form_state['storage']['certificate'])?$form_state['storage']['certificate']:''),
		'#required' => TRUE,
	);
	$form['massivefile']=array(
		'#type' => 'managed_file',
		'#title' => t('Data file'),
		'#required' => TRUE,
		'#default_value' => isset($form_state['storage']['fid'])?$form_state['storage']['fid']:0,
		'#description' => t('Only .xls and .xlsx spreadsheets are supported.').
			t('The required columns are ID Card number, Ticket Number, Real Name, Score and Result.').
			t('Please note that the result should be represented with intergers, where !absent means Absent, !fail means Fail, !pass means Pass.',
			array('!absent'=>exam_signup_result_ABSENT, '!fail'=>exam_signup_result_FAILED, '!pass'=>exam_signup_result_PASSED)),
		'#upload_validators' => array('file_validate_extensions' => array('xls xlsx'), '_exam_is_file_spreadsheet'=>array()),
	);

	$form['submit']=array(
		'#type' => 'submit',
		'#value' => t('Next Step >'),
	);
	$form['#submit'][]='exam_scores_form_step1_submit';
	return $form;
}

function _exam_score_form_step1_operation_select_callback($form, $form_state) {
	return $form['certificate'];
}

function _exam_score_form_step1_certificate_select_options($operation) {
	$query=db_query('SELECT c.cid, c.series, c.name FROM {certificates} c WHERE '.
		'EXISTS(SELECT * FROM {certificates_operations} co WHERE c.cid=co.cid AND co.oid=:oid)',
		array(':oid'=>$operation)
	);
	$options=array();
	foreach($query as $r)
		$options[$r->cid]=sprintf('%s - %s', $r->series, $r->name);
	return $options;
}

function _exam_is_file_spreadsheet($file) {
	if(!preg_match('/\.xlsx{0,1}$/i', $file->filename)) return array();
	if($file->filesize > 1024*100)
		return array(
			t('The file is %filesize exceeding the maximum file size of %maxsize.', array('%filesize' => format_size($file->filesize), '%maxsize' => format_size(1024*100))).
			t('Please consider splice the file into multiple pieces.')
		);
	include_once(DRUPAL_ROOT.'/sites/all/libraries/phpexcel/PHPExcel.php');
	$result=0;
	switch($format=PHPExcel_IOFactory::identify($file->uri)) {
		case 'Excel5':
		case 'Excel2007':
		try {
			$objReader = PHPExcel_IOFactory::createReader($format);
			$objReader->setReadDataOnly(true);
			$objPHPExcel = $objReader->load($file->uri);
			$result=$objPHPExcel->getSheetCount()>0;
			$objPHPExcel->disconnectWorksheets();
			unset($objPHPExcel);
			unset($objReader);
		} catch(Exception $exp) {
			$objPHPExcel->disconnectWorksheets();
			unset($objPHPExcel);
			unset($objReader);
			return array($exp->getMessage());
		}
	}
	if($result) return array();
	else return array(t('It is not a valid spreadsheet file.'));
}

function exam_scores_form_step1_submit($form, &$form_state) {
	$form_state['storage']['coid']=db_query('SELECT coid FROM {certificates_operations} WHERE cid=:cid and oid=:oid',
		array(':oid'=>$form_state['values']['operation'], ':cid'=>$form_state['values']['certificate'])
	)->fetchField();
	$form_state['storage']['operation']=$form_state['values']['operation'];
	$form_state['storage']['certificate']=$form_state['values']['certificate'];
	$form_state['storage']['fid']=$form_state['values']['massivefile'];
	$form_state['storage']['step']=2;
	$form_state['rebuild']=TRUE;
}

function exam_scores_form_step2($form, $form_state) {
	$form['#attached']['css']=array(
		'.inline-element-div label, .inline-element-div select, .inline-element-div input, .inline-element-div div.form-item { display: inline;}'.
		'body.sidebar-first div #post-content { width: 960px; }'.
		'div#sidebar { display: none; }' => array('type'=>'inline')
	);
	$co=certificate_operations_load($form_state['storage']['certificate'], $form_state['storage']['operation']);
	$form['co']=array(
		'#type' => 'item',
		'#title' => t('Selected organization'),
		'#markup' => t('!org !series !cname',
			array('!org'=>$co->oname, '!series'=>$co->series, '!cname'=>$co->cname)),
	);
	drupal_set_title(t('Upload scores for !org !cname', array('!org'=>$co->oname, '!cname'=>$co->cname)));

	include_once(DRUPAL_ROOT.'/sites/all/libraries/phpexcel/PHPExcel.php');
	$file=file_load($form_state['storage']['fid']);
	$uri = drupal_realpath($file->uri);
	if(interface_exists('SaeInterface')) {
		file_put_contents( SAE_TMP_PATH . $file->filename, file_get_contents($uri));
		$uri=SAE_TMP_PATH . $file->filename;
	}
	$format=PHPExcel_IOFactory::identify($uri);
	$objReader = PHPExcel_IOFactory::createReader($format);
	$objReader->setReadDataOnly(true);
	$objPHPExcel = $objReader->load($uri);
	$max_cols=$objPHPExcel->getActiveSheet()->getHighestColumn();
	$max_rows=$objPHPExcel->getActiveSheet()->getHighestRow();

	$options=drupal_map_assoc(range(1,$max_rows));

	$form['beginrow']=array(
		'#type' => 'select',
		'#title' => t('row is the first row which contains data.'),
		'#title_display' => 'after',
		'#prefix' => '<div class="inline-element-div">'.t('The ', array(), array('context'=>'prefix of massive uploading form')),
		'#suffix' => '</div>',
		'#description' => t('Please select where the data series begins, not the row where header locates.'),
		'#options' => $options,
		'#required' => TRUE,
		'#default_value' => isset($form_state['storage']['beginrow'])?$form_state['storage']['beginrow']:'2',
	);

	$options=drupal_map_assoc(range('A',$max_cols));
	$form['idcardnumber']=array(
		'#type' => 'select',
		'#title' => t('column contains ID Card nubmer.'),
		'#title_display' => 'after',
		'#prefix' => '<div class="inline-element-div">'.t('The ', array(), array('context'=>'prefix of massive uploading form')),
		'#suffix' => '</div>',
		'#options' => $options,
		'#required' => TRUE,
		'#default_value' => isset($form_state['storage']['idcardnumber_col'])?$form_state['storage']['idcardnumber_col']:'',
	);
	$form['ticketnumber']=array(
		'#type' => 'select',
		'#title' => t('column contains ticket nubmer.'),
		'#title_display' => 'after',
		'#prefix' => '<div class="inline-element-div">'.t('The ', array(), array('context'=>'prefix of massive uploading form')),
		'#suffix' => '</div>',
		'#options' => $options,
		'#required' => TRUE,
		'#default_value' => isset($form_state['storage']['ticketnumber_col'])?$form_state['storage']['ticketnumber_col']:'',
	);
	$form['name']=array(
		'#type' => 'select',
		'#title' => t('column contains real name.'),
		'#title_display' => 'after',
		'#prefix' => '<div class="inline-element-div">'.t('The ', array(), array('context'=>'prefix of massive uploading form')),
		'#suffix' => '</div>',
		'#options' => $options,
		'#required' => TRUE,
		'#default_value' => isset($form_state['storage']['name_col'])?$form_state['storage']['name_col']:'',
	);
	$form['score']=array(
		'#type' => 'select',
		'#title' => t('column contains score.'),
		'#title_display' => 'after',
		'#description' => t('You may store any value including any mixed text in this column.').
			t('What you have entered in the column will be displayed to the user as is.'),
		'#prefix' => '<div class="inline-element-div">'.t('The ', array(), array('context'=>'prefix of massive uploading form')),
		'#suffix' => '</div>',
		'#options' => $options,
		'#required' => TRUE,
		'#default_value' => isset($form_state['storage']['score_col'])?$form_state['storage']['score_col']:'',
	);
	$form['result']=array(
		'#type' => 'select',
		'#title' => t('column contains result.'),
		'#title_display' => 'after',
		'#description' => t('Where !absent means Absent, !fail means Fail, !pass means Pass.',
			array('!absent'=>exam_signup_result_ABSENT, '!fail'=>exam_signup_result_FAILED, '!pass'=>exam_signup_result_PASSED)),
		'#prefix' => '<div class="inline-element-div">'.t('The ', array(), array('context'=>'prefix of massive uploading form')),
		'#suffix' => '</div>',
		'#options' => $options,
		'#required' => TRUE,
		'#default_value' => isset($form_state['storage']['result_col'])?$form_state['storage']['result_col']:'',
	);
	// Display raw data for the spreadsheet
	$origrows=$objPHPExcel->getActiveSheet()->rangeToArray(
		'A1:'.($max_cols>'L'?'L':$max_cols).($max_rows>10?'10':$max_rows),	// The worksheet range that we want to retrieve
		'',			// Value that should be returned for empty cells
		TRUE,		// Should formulas be calculated (the equivalent of getCalculatedValue() for each cell)
		TRUE,		// Should values be formatted (the equivalent of getFormattedValue() for each cell)
		FALSE		// Should the array be indexed by cell row and cell column
	);
	$rows=array();
	$i=1;
	foreach($origrows as $row) {
		array_unshift($row, array('data'=>$i++, 'header'=>TRUE));
		$rows[]=$row;
	}
	$header=range('A',($max_cols>'L'?'L':$max_cols));
	array_unshift($header, sprintf('[%s]',$objPHPExcel->getActiveSheet()->getTitle()));
	$objPHPExcel->disconnectWorksheets();
	unset($objPHPExcel);
	unset($objReader);
	$form['demotitle']=array(
		'#type' => 'item',
		'#title' => t('Raw data for @filename', array('@filename'=>$file->filename)),
		'#markup' => t('Note: the raw data shows the hidden rows and columns, which means these rows and column will be proceeded.'),
	);
	$form['demo']=array(
		'#markup' => theme('table',array('header'=>$header, 'rows'=>$rows)),
	);

	$form['previous']=array(
		'#type' => 'submit',
		'#value' => t('< Previous Step'),
		'#validate' => array(),
		'#submit' => array('exam_scores_form_step2_previous_submit'),
		'#limit_validation_errors' => array(),
	);
	$form['submit']=array(
		'#type' => 'submit',
		'#value' => t('Upload data file & save'),
	);
	$form['#validate']=array('exam_scores_form_step2_validate');
	$form['#submit']=array('exam_scores_form_step2_submit');
	return $form;
}

function exam_scores_form_step2_previous_submit($form, &$form_state) {
	$form_state['rebuild']=TRUE;
	$form_state['storage']['step']=1;
}

function exam_scores_form_step2_validate($form, $form_state) {
	$co=certificate_operations_load($form_state['storage']['certificate'], $form_state['storage']['operation']);
	drupal_set_title(t('Upload scores for !org !cname', array('!org'=>$co->oname, '!cname'=>$co->cname)));
	$test=array();
	$test[]=$form_state['values']['idcardnumber'];
	$test[]=$form_state['values']['ticketnumber'];
	$test[]=$form_state['values']['name'];
	$test[]=$form_state['values']['score'];
	$test[]=$form_state['values']['result'];
	$test=array_unique($test);
	if(count($test)<5) {
		form_set_error('idcardnumber', t('You must select different columns.'));
		form_set_error('ticketnumber');
		form_set_error('name');
		form_set_error('score');
		form_set_error('result');
		return;
	}
	$file=file_load($form_state['storage']['fid']);
	$uri=drupal_realpath($file->uri);
	if(interface_exists('SaeInterface')) {
		file_put_contents( SAE_TMP_PATH . $file->filename, file_get_contents($uri));
		$uri=SAE_TMP_PATH . $file->filename;
	}
	include_once(DRUPAL_ROOT.'/sites/all/libraries/phpexcel/PHPExcel.php');
	$format=PHPExcel_IOFactory::identify($uri);
	$objReader = PHPExcel_IOFactory::createReader($format);
	$objReader->setReadDataOnly(true);
	$objPHPExcel = $objReader->load($uri);
	$objWorksheet = $objPHPExcel->getActiveSheet();
	$row=$form_state['values']['beginrow'];
	$max_rows=$objWorksheet->getHighestRow();
	$results=array();
	while($row <= $max_rows) {
		$idcardnumber=strtoupper(trim($objWorksheet->getCell($form_state['values']['idcardnumber'].$row)->getCalculatedValue()));
		if(empty($idcardnumber)) {
			form_set_error('idcardnumber', t('The value for idcardnumber at !cell is empty.',
				array('!cell'=>$form_state['values']['idcardnumber'].$row)
			));
			break;
		}
		$ticketnumber=strtoupper(trim($objWorksheet->getCell($form_state['values']['ticketnumber'].$row)->getCalculatedValue()));
		if(empty($ticketnumber)) {
			form_set_error('ticketnumber', t('The value for idcardnumber at !cell is empty.',
				array('!cell'=>$form_state['values']['ticketnumber'].$row)
			));
			break;
		}
		$name=trim($objWorksheet->getCell($form_state['values']['name'].$row)->getCalculatedValue());
		if(empty($name)) {
			form_set_error('name', t('The value for name at !cell is empty.',
				array('!cell'=>$form_state['values']['name'].$row)
			));
			break;
		}
		$result=trim($objWorksheet->getCell($form_state['values']['result'].$row)->getCalculatedValue());
		if(!in_array($result, array(exam_signup_result_ABSENT,exam_signup_result_FAILED,exam_signup_result_PASSED))) {
			form_set_error('result', t('The value of result in !cell is "!value", where it must be 0, 1, or 2.',
				array('!cell'=>$form_state['values']['result'].$row, '!value'=>$result)
			));
			break;
		}
		if(isset($results[$idcardnumber])) {
			form_set_error('idcardnumber', t('There are duplicate idcard number "!idcardnumber" at row !cell1 and !cell2',
				array('!cell1'=> $form_state['values']['idcardnumber'].$results[$idcardnumber]['row'],
					'!cell2'=>$form_state['values']['idcardnumber'].$row,
					'!idcardnumber'=>$idcardnumber)
			));
			break;
		}
		$query=db_query('SELECT EXISTS('.
			'SELECT * FROM {students} WHERE idcard_number=:idcardnumber AND name <>:name AND exname <>:name)',
			array(':idcardnumber'=>$idcardnumber, ':name'=>$name)
		);
		if($query->fetchField()) {
			form_set_error('name', t('The name (!name) you specified in !cell differs from what the student had filled.',
				array('!cell'=>$form_state['values']['name'].$row, '!name'=>$name)
			));
			break;
		}
		$query=db_query('SELECT EXISTS(SELECT * FROM {signup} s INNER JOIN {students} st ON s.uid=st.uid '.
			'WHERE s.coid=:coid AND st.idcard_number=:idcardnumber AND s.ticket_number<>:ticket_number)',
			array(':coid'=>$form_state['storage']['coid'], ':idcardnumber'=>$idcardnumber, ':ticket_number'=>$ticketnumber)
		);
		if($query->fetchField()) {
			form_set_error('ticketnumber', t('The ticket number (!ticketnumber) you specified in !cell differs from the system value.',
				array('!cell'=>$form_state['values']['idcardnumber'].$row, '!ticketnumber'=>$ticketnumber)
			));
			break;
		}
		$query=db_query('SELECT EXISTS(SELECT * FROM {scores_temp} WHERE coid=:coid AND idcard_number=:idcardnumber)',
			array(':coid'=>$form_state['storage']['coid'], ':idcardnumber'=>$idcardnumber)
		);
		if($query->fetchField()) {
			form_set_error('idcardnumber', t('You have already uploaded scores and result for !idcardnumber in !cell',
				array('!cell'=>$form_state['values']['idcardnumber'].$row, '!idcardnumber'=>$idcardnumber)
			));
			break;
		}
		$query=db_query('SELECT EXISTS(SELECT * FROM {signup} s INNER JOIN {students} st ON s.uid=st.uid '.
			'WHERE s.coid=:coid AND st.idcard_number=:idcardnumber AND s.status=:status)',
			array(':coid'=>$form_state['storage']['coid'], ':idcardnumber'=>$idcardnumber, ':status'=>exam_signup_status_FINISHED)
		);
		if($query->fetchField()) {
			form_set_error('idcardnumber', t('You have already uploaded scores and result for !idcardnumber in !cell',
				array('!cell'=>$form_state['values']['idcardnumber'].$row, '!idcardnumber'=>$idcardnumber)
			));
			break;
		}
		$results[$idcardnumber]=array('row'=>$row, 'name'=>$name, 'result'=>$result);
		$row++;
	}
	$objWorksheet->disconnectCells();
	$objPHPExcel->disconnectWorksheets();
	unset($objPHPExcel);
	unset($objReader);
}

function exam_scores_form_step2_submit($form, &$form_state) {
	$file=file_load($form_state['storage']['fid']);
	$uri=drupal_realpath($file->uri);
	if(interface_exists('SaeInterface')) {
		file_put_contents( SAE_TMP_PATH . $file->filename, file_get_contents($uri));
		$uri=SAE_TMP_PATH . $file->filename;
	}
	include_once(DRUPAL_ROOT.'/sites/all/libraries/phpexcel/PHPExcel.php');
	$format=PHPExcel_IOFactory::identify($uri);
	$objReader = PHPExcel_IOFactory::createReader($format);
	$objReader->setReadDataOnly(true);
	$objPHPExcel = $objReader->load($uri);
	$objWorksheet = $objPHPExcel->getActiveSheet();
	$row=$form_state['values']['beginrow'];
	$max_rows=$objWorksheet->getHighestRow();
	$i=0;
	for($row=$form_state['values']['beginrow']; $row<=$max_rows; $row++) {
		$idcardnumber=strtoupper(trim($objWorksheet->getCell($form_state['values']['idcardnumber'].$row)->getCalculatedValue()));
		$ticketnumber=strtoupper(trim($objWorksheet->getCell($form_state['values']['ticketnumber'].$row)->getCalculatedValue()));
		$name=trim($objWorksheet->getCell($form_state['values']['name'].$row)->getCalculatedValue());
		$score=trim($objWorksheet->getCell($form_state['values']['score'].$row)->getCalculatedValue());
		$result=trim($objWorksheet->getCell($form_state['values']['result'].$row)->getCalculatedValue());
		$r=db_insert('scores_temp')->fields(array(
			'idcard_number' => $idcardnumber,
			'ticket_number' => $ticketnumber,
			'name' => $name,
			'coid' => $form_state['storage']['coid'],
			'score' => $score,
			'result' => $result,
		))->execute();
		if($r) $i++;
	}
	$objWorksheet->disconnectCells();
	$objPHPExcel->disconnectWorksheets();
	unset($objPHPExcel);
	unset($objReader);
	$form_state['rebuild']=TRUE;
	$form_state['storage']['step']=1;
	$form_state['storage']['fid']=0;
	$form_state['storage']['beginrow']=$form_state['values']['beginrow'];
	$form_state['storage']['idcardnumber_col']=$form_state['values']['idcardnumber'];
	$form_state['storage']['ticketnumber_col']=$form_state['values']['ticketnumber'];
	$form_state['storage']['name_col']=$form_state['values']['name'];
	$form_state['storage']['score_col']=$form_state['values']['score'];
	$form_state['storage']['result_col']=$form_state['values']['result'];
	$co=certificate_operations_load($form_state['storage']['coid']);
	drupal_set_message(t('!num scores of !org !cname saved.', array('!num'=>$i, '!org'=>$co->oname, '!cname'=>$co->cname)));
	watchdog('exam',
		'Uploaded !num scores for !org !cname.', array(
			'!num'=>$i, '!org'=>$co->oname, '!cname'=>$co->cname
			),
		WATCHDOG_INFO
	);
}

function exam_scores_query_form_access() {
	if(!user_access('admin certificates')) return FALSE;
	$query_temp=db_query('SELECT EXISTS(SELECT * FROM {scores_temp})')->fetchField();
	if(!$query_temp)
		return db_query('SELECT EXISTS(SELECT * FROM {signup} WHERE status=:status)', array(':status'=>exam_signup_status_FINISHED))->fetchField();
	return TRUE;
}

function exam_scores_query_form($form, $form_state) {
	$form['#attached']['css']=array(
		'.inline-element-div label, .inline-element-div div, .inline-element-div select, .inline-element-div input, .inline-element-div div.form-item { display: inline; }' => array('type'=>'inline'),
		'div.ajax-progress-throbber {display: none; }'=>array('type'=>'inline'),
	);
	$rdbo=db_query('SELECT * FROM {operations} o WHERE '.
		'EXISTS(SELECT * FROM (SELECT coid FROM {signup} UNION SELECT coid FROM {scores_temp}) t '.
		'INNER JOIN {certificates_operations} co ON t.coid=co.coid WHERE co.oid=o.oid) '.
		'ORDER by oid DESC'
	);
	$options=array();
	foreach($rdbo as $r) {
		if(checkdate(substr($r->oid, 4, 2),1,$r->year))
			$options[$r->oid]=$r->name;
	}
	$operation = isset($form_state['values']['operation']) ? $form_state['values']['operation'] : (isset($_SESSION['coid']['oid'])?$_SESSION['coid']['oid']:key($options));
	$form['operation']=array(
		'#type' => 'select',
		'#title' => t('Select Operation and certificate'),
		'#prefix' => '<div class="inline-element-div">',
		'#required' => TRUE,
		'#default_value' => $operation,
		'#options' => $options,
		'#ajax' => array(
			'callback' => '_exam_score_form_step1_operation_select_callback',
			'wrapper' => 'scores-certificate-selectbox',
		),
	);
	$form['certificate']=array(
		'#type' => 'select',
		'#title' => t('Certificate'),
		'#title_display' => 'invisible',
		'#prefix' => '<div id="scores-certificate-selectbox" class="inline-element-div">',
		'#suffix' => '</div>',
		'#options' => _exam_scores_query_certificate_select_options($operation),
		'#default_value' => isset($form_state['values']['certificate']) ? $form_state['values']['certificate'] : (isset($_SESSION['coid']['cid'])?$_SESSION['coid']['cid']:''),
		'#required' => TRUE,
	);
	$form['submit']=array(
		'#type' => 'submit',
		'#value' => t('Query'),
		'#suffix' => '</div>',
	);
	$form['conditions']=array(
		'#type' => 'fieldset',
		'#title' => t('Filter citeras'),
		'#collapsible' => TRUE,
		'#collapsed' => TRUE,
	);
	$form['conditions']['realname']=array(
		'#type' => 'textfield',
		'#title' => t('Real Name'),
		'#prefix' => '<div class="inline-element-div">',
		'#autocomplete_path' => 'exam/scores/query/autocomplete/user',
		'#default_value' => !empty($_SESSION['citera']['realname'])?$_SESSION['citera']['realname']:'',
		'#attributes' => array('title' => t('You may only enter the surname to search')),
		'#size' => 15,
	);
	$form['conditions']['ticketnumber']=array(
		'#type' => 'textfield',
		'#title' => t('Ticket Number'),
		'#default_value' => !empty($_SESSION['citera']['ticketnumber'])?$_SESSION['citera']['ticketnumber']:'',
		'#size' => 20,
	);
	$form['conditions']['result']=array(
		'#type' => 'select',
		'#title' => t('Result'),
		'#options' => array(
			'-1' => t('All'),
			exam_signup_result_ABSENT => _exam_result_id_into_text(exam_signup_result_ABSENT),
			exam_signup_result_FAILED => _exam_result_id_into_text(exam_signup_result_FAILED),
			exam_signup_result_PASSED => _exam_result_id_into_text(exam_signup_result_PASSED),
		),
		'#default_value' => !empty($_SESSION['citera']['result'])?$_SESSION['citera']['result']:'-1',
	);
	$form['conditions']['submit']=array(
		'#type' => 'submit',
		'#value' => t('Query'),
	);

	if(empty($_SESSION['coid']) || empty($_SESSION['coid']['cid']) || empty($_SESSION['coid']['oid'])) return $form;
	$header=array(
		array('data'=>t('Real Name'), 'field'=>'unamegbk'),
		array('data'=>t('IDCard Number'), 'field'=>'idcard_number'),
		array('data'=>t('Ticket Number'), 'field'=>'ticket_number'),
		array('data'=>t('Score')),
		array('data'=>t('Result'), 'field'=>'result'),
	);
	$co=certificate_operations_load($_SESSION['coid']['cid'], $_SESSION['coid']['oid']);
	$query=db_select('signup','su')->condition('status',exam_signup_status_FINISHED);
	$query->innerJoin('students','s','su.uid=s.uid');
	$query->fields('s',array('uid','idcard_number','name'))->fields('su',array('coid','ticket_number','score','result'));
	$query->addExpression('\'s\'','tablename');
	$query->addExpression('sid','uniqueid');
	$query->condition('coid',$co->coid);
	if(!empty($_SESSION['citera']['realname']))
		$query->condition('s.name',$_SESSION['citera']['realname'].'%', 'LIKE');
	if(!empty($_SESSION['citera']['ticketnumber']))
		$query->condition('su.ticket_number',$_SESSION['citera']['ticketnumber']);
	if(!empty($_SESSION['citera']['result']))
		$query->condition('su.result',$_SESSION['citera']['result']);
	$uquery=db_select('scores_temp','st')->condition('coid',$co->coid);
	$uquery->addExpression('0','uid');
	$uquery->addExpression('st.idcard_number','idcard_number');
	$uquery->addExpression('st.name','name');
	$uquery->addExpression('st.coid','coid');
	$uquery->addExpression('st.ticket_number','ticket_number');
	$uquery->addExpression('st.score','score');
	$uquery->addExpression('st.result','result');
	$uquery->addExpression('\'t\'','tablename');
	$uquery->addExpression('st.stid','uniqueid');
	if(!empty($_SESSION['citera']['realname']))
		$uquery->condition('st.name',$_SESSION['citera']['realname'].'%', 'LIKE');
	if(!empty($_SESSION['citera']['ticketnumber']))
		$uquery->condition('st.ticket_number',$_SESSION['citera']['ticketnumber']);
	if(!empty($_SESSION['citera']['result']))
		$uquery->condition('st.result',$_SESSION['citera']['result']);
	$query->union($uquery, 'UNION ALL');
	$rquery=db_select($query,'t')->fields('t');
	$rquery->addExpression('CONVERT(CONVERT(name, char) USING gbk )', 'unamegbk');
	$totalnum=$rquery->countQuery()->execute()->fetchField();
	$rquery=$rquery->extend('TableSort')->orderByHeader($header)->orderBy('idcard_number')->extend('PagerDefault')->limit(20);
	$rdbo=$rquery->execute();
	$rows=array();
	foreach ($rdbo as $r) {
		$rows[]=array(
			($r->uid)?l($r->name, 'user/'.$r->uid):$r->name,
			$r->idcard_number,
			$r->ticket_number,
			$r->score,
			_exam_result_id_into_text($r->result),
		);
		if(exam_scores_query_unbind_form_access($r->tablename, $r->uniqueid))
			$rows[count($rows)-1][count($rows[count($rows)-1])-1].=
				l(' ['.t('Delete').']', 'exam/scores/query/unbind/'.$r->tablename.'/'.$r->uniqueid);
	}
	$form['list']=array(
		'#markup'=>theme('table', 
			array('header'=>$header, 'rows'=>$rows, 'empty'=>t('No records found.'))),
	);
	if($totalnum)
		$form['list']['#prefix']=t('There are !num records totally.', array('!num'=>$totalnum));
	else
		$form['conditions']['#collapsed']=FALSE;
	$form['pager']=array('#markup'=>theme('pager', array('quantity'=>5)));
	return $form;
}

function _exam_scores_query_certificate_select_options($operation) {
	$query=db_query('SELECT c.cid, c.series, c.name FROM {certificates} c WHERE '.
		'EXISTS(SELECT * FROM (SELECT coid FROM {signup} UNION SELECT coid FROM {scores_temp}) t '.
		'INNER JOIN {certificates_operations} co ON t.coid=co.coid WHERE co.cid=c.cid AND co.oid=:oid) ',
		array(':oid'=>$operation)
	);
	$options=array();
	foreach($query as $r)
		$options[$r->cid]=sprintf('%s - %s', $r->series, $r->name);
	return $options;
}

function exam_scores_query_form_submit($form, &$form_state) {
	$_SESSION['coid']['oid']=$form_state['values']['operation'];
	$_SESSION['coid']['cid']=$form_state['values']['certificate'];
	if(empty($form_state['values']['realname']))
		unset($_SESSION['citera']['realname']);
	else
		$_SESSION['citera']['realname']=trim($form_state['values']['realname']);
	if(empty($form_state['values']['ticketnumber']))
		unset($_SESSION['citera']['ticketnumber']);
	else
		$_SESSION['citera']['ticketnumber']=$form_state['values']['ticketnumber'];
	if($form_state['values']['result']=='-1')
		unset($_SESSION['citera']['result']);
	else
		$_SESSION['citera']['result']=$form_state['values']['result'];

	$form_state['rebuild']=TRUE;
}

function signup_finished_load($sid) {
	return db_query('SELECT * FROM {signup} WHERE status=:status AND sid=:sid',
		array(':status'=>exam_signup_status_FINISHED, ':sid'=>$sid)
	)->fetchObject();
}

function exam_scores_query_unbind_form_access($tablename, $uniqueid) {
	if(!exam_scores_query_form_access()) return FALSE;
	if(!in_array($tablename, array('s','t'))) return FALSE;
	if($tablename=='s')
		return $GLOBALS['user']->uid==1 && db_query('SELECT EXISTS(SELECT * FROM {signup} WHERE sid=:sid AND status=:status)', array(':sid'=>$uniqueid, ':status'=>exam_signup_status_FINISHED))->fetchField();
	else
		return db_query('SELECT EXISTS(SELECT * FROM {scores_temp} WHERE stid=:stid)', array(':stid'=>$uniqueid))->fetchField();
}

function exam_scores_query_unbind_form($form, $form_state, $tablename, $uniqueid) {
	$title=t('About to remove score');
	if($tablename=='s') {
		$r=db_query('SELECT s.uid, s.name, s.idcard_number, sg.score, sg.result, sg.coid FROM {students} s '.
			'INNER JOIN {signup} sg ON s.uid=sg.uid WHERE sg.sid=:sid',
			array(':sid'=>$uniqueid)
		)->fetchObject();
		$form['warn']=array(
			'#markup' => '<div class="messages error">'.t('WARNING: The score is already aquired by student. Deleting it might cause confusions to the student.').'</div>',
		);
		$form['#attached']['js'][]=array('data'=>
			'jQuery(document).ready(function(){'.
				'jQuery("#edit-submit").click(function(){ '.
					'if(!confirm("'.t('Are you sure you want to delete the aquired score?').'")) event.preventDefault();'.
				'});'. // end submit.click function()
			'});'. // end document ready function()
			'','type' => 'inline'
		);

	} else {
		$r=db_query('SELECT name, idcard_number, score, result, coid FROM {scores_temp} WHERE stid=:stid', array(':stid'=>$uniqueid))
			->fetchObject();
	}
	$co=certificate_operations_load($r->coid);
	$form['co']=array(
		'#type' => 'item',
		'#title' => t('Organization and certificate'),
		'#markup' => t('!org !series !cname',
			array('!org'=>$co->oname, '!series'=>$co->series, '!cname'=>$co->cname)),
	);
	$form['name']=array(
		'#type' => 'item',
		'#title' => t('Real Name'),
		'#markup' => isset($r->uid)?l($r->name, 'user/'.$r->uid):$r->name,
	);
	$form['idcard_number']=array(
		'#type' => 'item',
		'#title' => t('IDCard Number'),
		'#markup' => $r->idcard_number,
	);
	$form['score']=array(
		'#type' => 'item',
		'#title' => t('Score'),
		'#markup' => $r->score,
	);
	$form['result']=array(
		'#type' => 'item',
		'#title' => t('Result'),
		'#markup' => _exam_result_id_into_text($r->result),
	);
	return confirm_form($form,
		$title,
		$_SERVER['HTTP_REFERER'],
		t('This action cannot be undone.').t('You will need to reupload the result.'),
		t('Remove')
	);
}

function exam_scores_query_unbind_form_submit($form, &$form_state) {
	if(arg(4)=='s')
		db_delete('signup')->condition('sid',arg(5))->execute();
	else
		db_delete('scores_temp')->condition('stid',arg(5))->execute();
	drupal_set_message(t('The score for !name in !cname is removed.', 
		array('!name'=>$form['name']['#markup'], '!cname'=>$form['co']['#markup']))
	);
	watchdog('exam',
		'Removed !name score in !cname.', array(
			'!name'=>$form['name']['#markup'], '!cname'=>$form['co']['#markup']
			),
		WATCHDOG_INFO
	);
	$form_state['redirect']='exam/scores/query';
}

function exam_scores_query_autocomplete_user($name='') {
	$matches=array();
	if($name) {
		$query=db_query('SELECT name FROM (SELECT s.name AS name FROM {students} s INNER JOIN {signup} sg ON s.uid=sg.uid WHERE s.name LIKE :name '.
			'UNION SELECT st.name AS name FROM {scores_temp} st WHERE st.name LIKE :name) t ORDER BY t.name LIMIT 0,20',
			array(':name'=>db_like($name) . '%')
		);
		foreach($query as $r) {
			$matches[$r->name]=$r->name;
		}
	}
	drupal_json_output($matches);
}

function exam_user_scores() {
	$output='';
	drupal_add_css(
		'.inline-element-div label, .inline-element-div select, .inline-element-div input, .inline-element-div div.form-item { display: inline;}',
		'inline'
	);
	drupal_add_library('system', 'jquery.cookie');
	$query=db_query('SELECT o.oid, o.name AS oname FROM {operations} o WHERE EXISTS('.
		'SELECT * FROM {signup} s INNER JOIN {certificates_operations} co ON s.coid=co.coid '.
		'WHERE s.uid=:uid AND s.status=:status AND co.oid=o.oid) ORDER BY oid DESC',
		array(':uid'=>$GLOBALS['user']->uid, ':status'=>exam_signup_status_FINISHED)
	);
	$oids=array();
	$onames=array();
	foreach($query as $r) {
		$oids[]=$r->oid;
		$onames[$r->oid]=$r->oname;
	}
	if(count($oids)==1) {
		$oid=$oids[0];
		setcookie('operation', NULL);
		$output.=sprintf('<strong>%s</strong>',t('Your scores and result of !oname goes:', array('!oname'=>$r->oname)));
	} else {
		$oid=isset($_COOKIE['operation'])&&in_array($_COOKIE['operation'], $oids)?$_COOKIE['operation']:$oids[0];
		$operation_select=array(
			'#type' => 'select',
			'#id' => 'operationselect',
			'#name' => 'operationselect',
			'#title' => t('Select operation'),
			'#prefix' => '<div class="inline-element-div">',
			'#suffix' => '</div>',
			'#default_value' => $oid,
			'#attributes' => array('onChange' => ''.
				'jQuery.cookie("operation", jQuery(":input[name=operationselect]").val());'.
				'window.location.reload();'.
			''),
			'#options' => $onames,
		);
		$output.=drupal_render($operation_select);
	}
	if(isset($_COOKIE['operation']))
		drupal_add_js(
			'jQuery(document).ready(function(){'.
				'jQuery("#operationselect").val('.$_COOKIE['operation'].');'.
				'});'.
				'',
			'inline'
		);

	$rdbo=db_query('SELECT s.sid, s.score, s.result, s.status, o.oid, o.name as oname, c.series, c.name as cname '.
		'FROM {signup} s INNER JOIN {certificates_operations} co ON s.coid=co.coid '.
		'INNER JOIN {operations} o ON co.oid=o.oid '.
		'INNER JOIN {certificates} c ON co.cid=c.cid '.
		'WHERE s.uid=:uid AND s.status=:status AND co.oid=:oid ORDER by s.coid DESC',
		array(':uid'=>$GLOBALS['user']->uid, ':status'=>exam_signup_status_FINISHED, ':oid'=>$oid)
	);

	$rows=array();
	foreach($rdbo as $r) {
		$rows[]=array(
			$r->series,
			$r->cname,
			$r->score,
		);
		if($r->result==exam_signup_result_PASSED && exam_user_scores_report_access($r->sid))
			$rows[count($rows)-1][]=l(_exam_result_id_into_text($r->result), 'user/scores/report/'.$r->sid,
				array('attributes'=>array('title'=>t('Click to print score report')))
			);
		else
			$rows[count($rows)-1][]=_exam_result_id_into_text($r->result);
	}

	$header=array(
		t('Series'),
		t('Specification'),
		t('Score'),
		t('Result')
	);

	$output .= theme('table', array('header'=>$header, 'rows'=>$rows));

	return $output;
}

function _exam_result_id_into_text($resultid) {
	$text=array(
		t('Absent'),
		t('Failed'),
		t('Passed')
	);
	return $text[$resultid];
}

function exam_user_scores_access() {
	$r=student_load($GLOBALS['user']);
	if(empty($r)) return FALSE;
	return db_query('SELECT EXISTS(SELECT * FROM {signup} WHERE status=:status AND uid=:uid)',
		array(':uid'=>$r->uid, ':status'=>exam_signup_status_FINISHED)
	)->fetchField();
}

function exam_user_scores_report_access($sid) {
	return db_query('SELECT EXISTS(SELECT * FROM {signup} WHERE sid=:sid AND uid=:uid AND status=:status)',
		array(':sid'=>$sid, ':uid'=>$GLOBALS['user']->uid, ':status'=>exam_signup_status_FINISHED)
	)->fetchField();
}

function exam_user_scores_report($sid) {
	drupal_add_css(drupal_get_path('module', 'exam') .'/exam.report.all.css', array('media'=>'all'));
	drupal_add_css(drupal_get_path('module', 'exam') .'/exam.report.print.css', array('media'=>'print'));
	if(preg_match('/(?i)msie [1-7]\\./',$_SERVER['HTTP_USER_AGENT']) && !preg_match('/(?i)msie [8-9]\\./',$_SERVER['HTTP_USER_AGENT'])) {
		drupal_add_js(
			'jQuery(document).ready(function(){'.
				'alert("'.t('The browser you are using is too old. \nFor better printing, IE8+ or dualcore browsers with Webkit core are suggested.').'");'.
				'window.print();'.
				'});'.
				'',
			'inline'
		);
	} else {
		drupal_add_js(
			'jQuery(document).ready(function(){'.
				'window.print();'.
				'});'.
				'',
			'inline'
		);
	}
	$s=student_load($GLOBALS['user']);
	$s->idcard_number=substr_replace($s->idcard_number, str_repeat('*', strlen($s->idcard_number)-6), 3, -3);
	$sg=db_query('SELECT * FROM {signup} WHERE sid=:sid', array(':sid'=>$sid))->fetchObject();
	$co=certificate_operations_load($sg->coid);
	$output='';
	$rows=array();
	$rows[]=array(array('data'=>t('Real Name'), 'header'=>TRUE), $s->name);
	$rows[]=array(array('data'=>t('Gender'), 'header'=>TRUE), $s->gender==1?t('Male'):t('Female'));
	$rows[]=array(array('data'=>t('IDCard Number'), 'header'=>TRUE), $s->idcard_number);
	$rows[]=array(array('data'=>t('Exam Operation'), 'header'=>TRUE), $co->oname);
	$rows[]=array(array('data'=>t('Specification'), 'header'=>TRUE), sprintf('%s<br/>%s',$co->series, $co->cname));
	$rows[]=array(array('data'=>t('Score'), 'header'=>TRUE), $sg->score);
	$rows[]=array(array('data'=>t('Result'), 'header'=>TRUE), _exam_result_id_into_text($sg->result));
	$output.=theme('table', array('rows'=>$rows));

	$output.=sprintf('<div id="certgovernorg"><div class="img"><img src="%suser/scores/report/%s/picture.png" align="left"/></div>', base_path(), $sg->sid);
	$output.=sprintf('<div class="text">%s<br/>%s</div></div>',variable_get('site_name', 'Drupal'),$GLOBALS['base_url']);

	return $output;
}

function exam_user_scores_report_qrcode($sid) {
	include_once(DRUPAL_ROOT.'/sites/all/libraries/phpqrcode/qrlib.php');
	$s=student_load($GLOBALS['user']);
	$s->idcard_number=substr_replace($s->idcard_number, '*', 3, strlen($s->idcard_number)-6);
	$sg=db_query('SELECT * FROM {signup} WHERE sid=:sid', array(':sid'=>$sid))->fetchObject();
	$co=certificate_operations_load($sg->coid);
	$output='';
	$rows=array();
	$rows[]=sprintf('%s: %s', t('Real Name'), $s->name);
	$rows[]=sprintf('%s: %s', t('Gender'), $s->gender==1?t('Male'):t('Female'));
	$rows[]=sprintf('%s: %s', t('IDCard Number'), $s->idcard_number);
	$rows[]=sprintf('%s: %s', t('Exam Operation'), $co->oname);
	$rows[]=sprintf('%s: %s', t('Specification'), sprintf('%s %s',$co->series, $co->cname));
	$rows[]=sprintf('%s: %s', t('Score'), $sg->score);
	$rows[]=sprintf('%s: %s', t('Result'), _exam_result_id_into_text($sg->result));
	QRcode::png(implode("\n", $rows));
}

function exam_places_page() {
	$output ='';
	if(user_access('admin exam places'))
		$query=db_query('SELECT p.*, u.name AS uname FROM {places} p INNER JOIN {users} u ON p.uid=u.uid');
	else if(user_access('manage own places'))
		$query=db_query('SELECT p.* FROM {places} p WHERE p.uid=:uid', array(':uid'=>$GLOBALS['user']->uid));
	else $query=array();
	$rows=array();
	foreach($query as $r) {
		$rows[]=array(
			l($r->name, 'exam/places/modify/'.$r->pid),
			$r->location,
			l($r->uname, 'user/'.$r->uid),
			$r->contact
		);
	}
	$header=array(
		t('Place Name'),
		t('Place Location'),
		t('Admin'),
		t('Contact information')
	);
	if(count($rows))
		$output .= theme('table', array('header'=>$header, 'rows'=>$rows, 'empty'=>t('There are no places for you to admin.')));
	if(user_access('admin exam places'))
		$output .= drupal_render(drupal_get_form('exam_places_add_form'));
	return $output;
}

function exam_places_add_form($form, $form_state) {
	$form['#attached']['css']=array(
		'.inline-element-div label, .inline-element-div div, .inline-element-div select, .inline-element-div input, .inline-element-div div.form-item { display: inline; } ' => array('type'=>'inline'),
		'div.ajax-progress-throbber {display: none; }'=>array('type'=>'inline'),
	);
	$form['addframe']=array(
		'#type' => 'fieldset',
		'#title' => t('Add new place'),
		'#collapsible' => TRUE,
		'#collapsed' => TRUE,
	);
	$form['addframe']['name']=array(
		'#type' => 'textfield',
		'#title' => t('Place Name'),
		'#size' => 20,
		'#maxlength' => 10,
		'#required' => TRUE,
		'#prefix' => '<div class="inline-element-div">',
		'#suffix' => '</div>',
	);
	$form['addframe']['location']=array(
		'#type' => 'textfield',
		'#title' => t('Place Location'),
		'#size' => 70,
		'#maxlength' => 60,
		'#required' => TRUE,
		'#prefix' => '<div class="inline-element-div">',
		'#suffix' => '</div>',
	);
	$form['addframe']['admin']=array(
		'#type' => 'textfield',
		'#title' => t('IDCard Number of administrater'),
		'#size' => 30,
		'#maxlength' => 18,
		'#required' => TRUE,
		'#autocomplete_path' => 'exam/places/idcardnumber_autocompletion',
		'#prefix' => '<div class="inline-element-div">',
	);
	$form['addframe']['adminusername']=array(
		'#type' => 'item',
		'#markup' => isset($form_state['values']['admin'])?_exam_username_from_idcard($form_state['values']['admin']):'',
		'#prefix' => '<div id="usernamefromidcard" class="inline-element-div">',
		'#suffix' => '</div></div>',
	);
	$form['addframe']['contact']=array(
		'#type' => 'textfield',
		'#title' => t('Contact information'),
		'#size' => 70,
		'#maxlength' => 60,
		'#required' => TRUE,
		'#prefix' => '<div class="inline-element-div">',
		'#suffix' => '</div>',
	);
	$form['addframe']['submit']=array(
		'#type' => 'submit',
		'#value' => t('Save'),
	);
	return $form;
}

function _exam_username_from_idcard($idcard='') {
	$rows=array();
	$query=db_query('SELECT s.idcard_number, u.name, s.name as sname FROM {users} u INNER JOIN {students} s ON s.uid=u.uid '.
		'WHERE s.idcard_number LIKE :idcardnumber ORDER BY s.idcard_number LIMIT 0,20',
		array(':idcardnumber'=>db_like($idcard) . '%')
	);
	foreach($query as $r) {
		$rows[$r->idcard_number]=t('!sname(!idcardnumber)', array('!idcardnumber'=>$r->idcard_number, '!sname'=>$r->sname));
	}
	drupal_json_output($rows);
}

function exam_places_add_form_validate($form, $form_state) {
	if($GLOBALS['user']->uid==1) return;
	if(!db_query('SELECT EXISTS(SELECT * FROM {students} WHERE idcard_number=:idcard)', array(':idcard'=>$form_state['values']['admin']))->fetchField())
		form_set_error('admin', t('The specific user has not been registered.'));
}

function exam_places_add_form_submit($form, $form_state) {
	$uid=(int)db_query('SELECT uid FROM {students} WHERE idcard_number=:idcard', array(':idcard'=>$form_state['values']['admin']))->fetchField();
	$i=db_insert('places')->fields(array(
		'name' => $form_state['values']['name'],
		'location' => $form_state['values']['location'],
		'uid' => $uid,
		'contact' => $form_state['values']['contact'],
	))->execute();
	if($i) {
		drupal_set_message(t('Place !name added.', array('!name'=>$form_state['values']['name'])));
		watchdog('exam',
			'Place !name added.', array(
				'!name'=>$form_state['values']['name'],
				),
			WATCHDOG_INFO
		);
	}
}

function place_load($pid) {
	return db_query('SELECT * FROM {places} WHERE pid=:pid',array(':pid'=>$pid))->fetchObject();
}

function exam_places_modify_form_access($place) {
	if(user_access('admin exam places')) return TRUE;
	if(!user_access('manage own places')) return FALSE;
	return db_query('SELECT EXISTS(SELECT * FROM {places} WHERE pid=:pid AND uid=:uid)',
		array(':pid'=>$place->pid, ':uid'=>$GLOBALS['user']->uid)
	)->fetchField();
}

function exam_places_modify_form_title($place) {
	return t('Modify detail of !name', array('!name'=>$place->name));
}

function exam_places_modify_form($form, &$form_state, $place) {
	$form_state['storage']['place']=$place;
	$form['location']=array(
		'#type' => 'textfield',
		'#title' => t('Place Location'),
		'#required' => TRUE,
		'#default_value' => $place->location,
	);
	$admin=student_load($place->uid);
	$form['admin']=array(
		'#type' => 'textfield',
		'#title' => t('IDCard Number of administrater'),
		'#size' => 30,
		'#maxlength' => 18,
		'#required' => TRUE,
		'#autocomplete_path' => 'exam/places/idcardnumber_autocompletion',
		'#default_value' => $admin?$admin->idcard_number:'',
	);
	$form['contact']=array(
		'#type' => 'textfield',
		'#title' => t('Contact information'),
		'#required' => TRUE,
		'#default_value' => $place->contact,
	);
	$query=db_query('SELECT * FROM {rooms} WHERE pid=:pid', array(':pid'=>$place->pid));
	$rows=array();
	foreach($query as $r) {
		$rows[]=array(
			$r->name,
			$r->capacity,
		);
	}
	if(count($rows)) {
		$header=array(
			t('Room Name'),
			t('Capacity (in person)'),
		);
		$form['rooms']=array(
			'#type' => 'item',
			'#title' => t('Current rooms'),
			'#markup' => theme('table', array('header'=>$header, 'rows'=>$rows))
		);
	}
	$form['addroom']=array(
		'#type' => 'checkbox',
		'#title' => t('Add a room'),
		'#default_value' => empty($rows) || (isset($form_state['values']['addroom'])?$form_state['values']['addroom']:0),
	);
	$form['room']=array(
		'#type' => 'fieldset',
		'#states' => array(
			'visible' => array(
				':input[name="addroom"]' => array('checked' =>TRUE),
			),
		),
	);
	$form['room']['name']=array(
		'#type' => 'textfield',
		'#title' => t('Room Name'),
		'#default_value' => '',
		'#states' => array(
			'required' => array(
				':input[name="addroom"]' => array('checked' =>TRUE),
			),
		),
	);
	$form['room']['capacity']=array(
		'#type' => 'textfield',
		'#title' => t('Capacity (in person)'),
		'#default_value' => '',
		'#states' => array(
			'required' => array(
				':input[name="addroom"]' => array('checked' =>TRUE),
			),
		),
	);

	$form['save']=array(
		'#type' => 'submit',
		'#value' => t('Save'),
	);
	return $form;
}

function exam_places_modify_form_validate($form, $form_state) {
	if($form_state['values']['addroom'] && empty($form_state['values']['name']))
		form_set_error('name',t('!name field is required.',array('!name'=>$form['room']['name']['#title'])));
	if($form_state['values']['addroom'] && empty($form_state['values']['capacity']))
		form_set_error('capacity',t('!name field is required.',array('!name'=>$form['room']['capacity']['#title'])));
	if($form_state['values']['addroom'] && !is_numeric($form_state['values']['capacity']))
		form_set_error('capacity',t('!name field must be a interger.',array('!name'=>$form['room']['capacity']['#title'])));
	if($form_state['values']['addroom'] && (int)($form_state['values']['capacity']) <=0 )
		form_set_error('capacity',t('!name field must be a interger.',array('!name'=>$form['room']['capacity']['#title'])));
	if(!db_query('SELECT EXISTS(SELECT * FROM {students} WHERE idcard_number=:idcard)', array(':idcard'=>$form_state['values']['admin']))->fetchField())
		form_set_error('admin', t('The specific user has not been registered.'));
}

function exam_places_modify_form_submit($form, &$form_state) {
	$uid=(int)db_query('SELECT uid FROM {students} WHERE idcard_number=:idcard', array(':idcard'=>$form_state['values']['admin']))->fetchField();
	db_update('places')->condition('pid', $form_state['storage']['place']->pid)->fields(array(
		'location' => $form_state['values']['location'],
		'uid' => $uid,
		'contact' => $form_state['values']['contact'],
	))->execute();
	if($form_state['values']['addroom'])
		db_insert('rooms')->fields(array(
			'pid' => $form_state['storage']['place']->pid,
			'name' => $form_state['values']['name'],
			'capacity' => $form_state['values']['capacity'],
		))->execute();
	drupal_set_message(t('Place !name modified.', array('!name'=>$form_state['storage']['place']->name)));
	watchdog('exam',
		'Place !name modified.', array(
			'!name'=>$form_state['storage']['place']->name,
			),
		WATCHDOG_INFO
	);
	$form_state['rebuild']=TRUE;
}

function exam_arrangement_form($form, &$form_state) {
	$form['#attached']['css']=array(
		'.inline-element-div label, .inline-element-div div, .inline-element-div select, .inline-element-div input, .inline-element-div div.form-item { display: inline; }' => array('type'=>'inline'),
		'div.ajax-progress-throbber {display: none; }'=>array('type'=>'inline'),
	);
	$query=db_query('SELECT o.* FROM {operations} o WHERE EXISTS('.
			'SELECT * FROM {goings} g INNER JOIN {certificates_operations} co ON g.coid=co.coid '.
			'WHERE co.oid=o.oid) ORDER BY o.oid DESC');
	if($query->rowCount()>1) {
		$options=array('0' => t('All operations'));
		foreach($query as $r)
			$options[$r->oid]=$r->name;
		$form['oselect']=array(
			'#type' => 'select',
			'#options' => $options,
			'#title' => t('Select Operation'),
			'#default_value' => isset($_SESSION['oselect'])?$_SESSION['oselect']:$r->oid,
			'#prefix' => '<div class="inline-element-div">',
		);
		$form['orefresh']=array(
			'#type' => 'submit',
			'#value' => t('Refresh'),
			'#limit_validation_errors' => array(array('oselect')),
			'#submit' => array('exam_arrangement_form_orefresh_submit'),
			'#suffix' => '</div>',
		);
		$curorg='';
	}
	if($query->rowCount()==1)
		$curorg=$query->fetchObject()->name;
	else $curorg=$form['oselect']['#options'][$form['oselect']['#default_value']];
	$query=db_query('SELECT * FROM {certificates}');
	$certs=array();
	foreach($query as $r) {
		$certs[$r->cid]=$r->name;
	}
	$query='SELECT p.name as pname, g.* FROM {goings} g INNER JOIN {places} p ON g.pid=p.pid ';
	if(!user_access('admin exam places'))
		$query.='WHERE p.uid=:uid';
	$dbo=db_query($query, array(':uid'=>$GLOBALS['user']->uid));
	$rows=array();
	foreach($dbo as $r) {
		$co=certificate_operations_load($r->coid);
		if(isset($form['oselect']) && $form['oselect']['#default_value']!='0' && $co->oid!=$form['oselect']['#default_value']) continue;
		$requirements=unserialize($r->requirements);
		$reqtext=array();
		$a=array();
		for($i=1;$i<=3;$i++) {
			for($j=1;$j<=3;$j++) {
				if(isset($requirements[$i][$j]))
					$reqtext[$i][$j]=$certs[$requirements[$i][$j]];
			}
			if(!empty($reqtext[$i]))
				$a[]=implode('+', $reqtext[$i]);
		}
		if(count($a)>1)
			$a='<ul><li>'.implode('</li><li>', $a).'</li></ul>';
		else if(count($a)==1) $a=$a[0];
		else $a='';
		$rows[]=array(
			$co->oname,
			$co->cname,
			$r->pname,
			$a,
			_exam_going_status_to_text($r->status),
			$r->status==exam_signup_going_CLOSE?l(t('Modify'), 'exam/arrangement/modify/'.$r->gid):l(t('Review Signup'), 'exam/arrangement/list/'.$r->gid),
		);
	}
	if(count($rows)) {
		$header=array(
			t('Organization'),
			t('Certificate'),
			t('Place Name'),
			t('Requirements for application'),
			t('Status'),
			t('Operation'),
		);
		$form['goings']=array(
			'#type' => 'item',
			'#title' => t('Current Goings for !org', array('!org'=>$curorg)),
			'#markup' => theme('table', array('header'=>$header, 'rows'=>$rows)),
		);
		$form['add']=array(
			'#type' => 'checkbox',
			'#title' => t('Add a going'),
		);
		$form['addframe']=array(
			'#type' => 'fieldset',
			'#states' => array(
				'visible' => array(
					':input[name="add"]' => array('checked' => TRUE),
				),
			),
		);
	} else {
		$form['add']=array(
			'#type' => 'hidden',
			'#value' => 1,
		);
		$form['addframe']=array(
			'#type' => 'fieldset',
			'#title' => t('Add a going'),
		);
	}
	$rdbo=db_query('SELECT * FROM {operations} o WHERE '.
		'EXISTS(SELECT * FROM {certificates_operations} co WHERE co.oid=o.oid) '.
		'AND year>=:year AND o.oid>=:month ORDER by oid DESC',
		array(':year' => date('Y'), ':month' => date('Ym'))
	);
	$options=array();
	foreach($rdbo as $r) {
		if(checkdate(substr($r->oid, 4, 2),1,$r->year))
			$options[$r->oid]=$r->name;
	}
	$operation = isset($form_state['values']['operation']) ? $form_state['values']['operation'] : (isset($form_state['storage']['operation'])?$form_state['storage']['operation']:key($options));
	$form['addframe']['operation']=array(
		'#type' => 'select',
		'#title' => t('Select Operation and certificate'),
		'#prefix' => '<div class="inline-element-div">',
		'#required' => TRUE,
		'#default_value' => $operation,
		'#options' => $options,
		'#ajax' => array(
			'callback' => '_exam_arrangement_form_operation_select_callback',
			'wrapper' => 'scores-certificate-selectbox',
		),
	);
	$form['addframe']['certificate']=array(
		'#type' => 'select',
		'#title' => t('Certificate'),
		'#title_display' => 'invisible',
		'#prefix' => '<div id="scores-certificate-selectbox" class="inline-element-div">',
		'#suffix' => '</div></div>',
		'#options' => _exam_arrangement_form_certificate_select_options($operation),
		'#default_value' => isset($form_state['values']['certificate']) ? $form_state['values']['certificate'] : (isset($form_state['storage']['certificate'])?$form_state['storage']['certificate']:''),
		'#required' => TRUE,
	);
	if(user_access('admin exam places'))
		$query=db_query('SELECT * FROM {places}');
	else
		$query=db_query('SELECT * FROM {places} WHERE uid=:uid', array(':uid'=>$GLOBALS['user']->uid));
	$options=array();
	foreach($query as $r) {
		$options[$r->pid]=$r->name;
	}
	if(count($options)>1) {
		$form['addframe']['place']=array(
			'#type' => 'select',
			'#title' => t('Exam Place'),
			'#prefix' => '<div class="inline-element-div">',
			'#suffix' => '</div>',
			'#required' => TRUE,
			'#options' => $options,
			'#default_value' => key($options),
		);
	} else {
		$form['addframe']['place']=array('#type'=>'hidden', '#value'=>key($options));
		$form['addframe']['placet']=array(
			'#type' => 'item',
			'#title' => t('Exam Place'),
			'#required' => TRUE,
			'#markup' => $r->name,
			'#prefix' => '<div class="inline-element-div">',
			'#suffix' => '</div>',
		);
	}
	$form['addframe']['submit']=array(
		'#type' => 'submit',
		'#submit' => array('exam_arrangement_form_add_going_submit'),
		'#value' => t('Create going'),
	);
	return $form;
}

function exam_arrangement_form_orefresh_submit($form, $form_state) {
	$_SESSION['oselect']=$form_state['values']['oselect'];
}

function exam_arrangement_form_add_going_submit($form, $form_state) {
	if($form_state['values']['certificate']=='0')
		$certificates=array_keys($form['addframe']['certificate']['#options']);
	else
		$certificates=array($form_state['values']['certificate']);
	foreach($certificates as $certificate) {
		if($certificate=='0') continue;
		$co=certificate_operations_load($certificate, $form_state['values']['operation']);
		db_merge('goings')->key(array('coid'=>$co->coid, 'pid'=>$form_state['values']['place']))->fields(array(
			'coid' => $co->coid,
			'pid' => $form_state['values']['place']
		))->execute();
	}
	drupal_set_message(t('Going added.'));
}

function _exam_arrangement_form_operation_select_callback($form, $form_state) {
	return $form['addframe']['certificate'];
}

function _exam_arrangement_form_certificate_select_options($operation) {
	$query=db_query('SELECT c.cid, c.series, c.name FROM {certificates} c WHERE '.
		'EXISTS(SELECT * FROM {certificates_operations} co WHERE c.cid=co.cid AND co.oid=:oid)',
		array(':oid'=>$operation)
	);
	$options=array('0' => '- '.t('All certificates').' -');
	foreach($query as $r)
		$options[$r->cid]=sprintf('%s - %s', $r->series, $r->name);
	return $options;
}

function _exam_going_status_to_text($status) {
	$result=array(
		exam_signup_going_CLOSE => t('Not yet opened'),
		exam_signup_going_OPEN => t('Open for signup'),
		exam_signup_going_ENDED => t('Signup ended'),
	);
	return $result[$status];
}

function going_load($gid) {
	$r=db_query('SELECT * FROM {goings} WHERE gid=:gid', array(':gid'=>$gid))->fetchObject();
	if($r) {
		$r->requirements=unserialize($r->requirements);
		$r->co=certificate_operations_load($r->coid);
		$r->place=db_query('SELECT * FROM {places} WHERE pid=:pid', array(':pid'=>$r->pid))->fetchObject();
	}
	return $r;
}

function exam_arrangement_modify_form_title($going) {
	if($going->status==exam_signup_going_CLOSE) 
		return t('Modify going !cname on !oname in !place',	array(
			'!cname' => $going->co->cname,
			'!oname' => $going->co->oname,
			'!place' => $going->place->name,
		));
	else
		return t('View going !cname on !oname in !place',	array(
			'!cname' => $going->co->cname,
			'!oname' => $going->co->oname,
			'!place' => $going->place->name,
		));
}

function exam_arrangement_modify_form_access($going) {
	if(user_access('admin exam places')) return TRUE;
	if(user_access('manage own places'))
		return db_query('SELECT EXISTS(SELECT * FROM {places} WHERE uid=:uid)', array(':uid'=>$GLOBALS['user']->uid))->fetchField();
	return FALSE;
}

function exam_arrangement_modify_form($form, &$form_state, $going) {
	$form_state['storage']['charge']['module']='certificate';
	$form_state['storage']['charge']['account']='certificate'.$going->co->cid;
	$form['#attached']['css']=array(
		'.inline-element-div label, .inline-element-div div, .inline-element-div select, .inline-element-div input, .inline-element-div div.form-item { display: inline; }' => array('type'=>'inline'),
		'div.ajax-progress-throbber {display: none; }'=>array('type'=>'inline'),
	);
	$form_state['storage']['going']=$going;
	$form['operation']=array(
		'#type' => 'item',
		'#title' => t('Organization'),
		'#markup' => $going->co->oname,
	);
	$form['certificate']=array(
		'#type' => 'item',
		'#title' => t('Target Certificate'),
		'#markup' => sprintf('%s %s', $going->co->series, $going->co->cname),
	);
	$form['chargeinfo']=array(
		'#type' => 'item',
	);
	$form['description']=array(
		'#type' => 'textfield',
		'#title' => t('Description shown to the student'),
		'#default_value' => $going->description,
		'#disabled' => $going->status!=exam_signup_going_CLOSE,
	);
	$form['isconditioned']=array(
		'#type' => 'radios',
		'#title' => t('Signup condition'),
		'#required' => TRUE,
		'#options' => array(
			'0' => t('Every student can signup for this certificate'),
			'1' => t('Only students have one of following certificates combines may signup for this certificate'),
		),
		'#default_value' => (int)!empty($going->requirements),
		'#disabled' => $going->status!=exam_signup_going_CLOSE,
	);
	$query=db_query('SELECT * FROM {certificates} WHERE cid <> :cid', array(':cid'=>$going->co->cid));
	$certs=array('0'=> t('Not required'));
	foreach($query as $r) {
		$certs[$r->cid]=sprintf('%s %s', $r->series, $r->name);
	}
	for($i=1; $i<=3; $i++) {
		$form['condition']['condition'.$i]=array(
			'#type' => 'fieldset',
			'#title' => t('Certificate Requirement Combine !i', array('!i'=>$i)),
			'#description' => t('User may signup for !cname if he has all the certificates listed in this combine.', array('!cname'=>$going->co->cname)),
			'#collapsible' => TRUE,
			'#states' => array(
				'visible' => array(
					':input[name="isconditioned"]' => array('value' => '1'),
				),
			),
		);
		for($j=1; $j<=3; $j++) {
			$form['condition']['condition'.$i]['cert'.$i.$j]=array(
				'#type' => 'select',
				'#title' => t('Certificate !j of combine !i', array('!i'=>$i, '!j'=>$j)),
				'#options' => $certs,
				'#default_value' => isset($going->requirements[$i][$j])?$going->requirements[$i][$j]:0,
				'#prefix' => '<div class="inline-element-div">',
				'#suffix' => '</div>',
				'#disabled' => $going->status!=exam_signup_going_CLOSE,
			);
		}

	}
	if($going->status == exam_signup_going_CLOSE) {
		$form['save']=array(
			'#type' => 'submit',
			'#name' => 'save',
			'#value' => t('Save'),
		);
		$form['saveandopen']=array(
			'#type' => 'submit',
			'#name' => 'saveandopen',
			'#value' => t('Save and Open it for students to signup'),
		);
	}
	return $form;
}

function exam_arrangement_modify_form_submit($form, &$form_state) {
	$requirements=array();
	for($i=1;$i<=3;$i++) {
		for($j=1;$j<=3;$j++) {
			if($form_state['values']['cert'.$i.$j])
				$requirements[$i][$j]=$form_state['values']['cert'.$i.$j];
		}
	}
	if(!empty($requirements)) $requirements=serialize($requirements);
	else $requirements=NULL;
	db_update('goings')->condition('gid', $form_state['storage']['going']->gid)->fields(array(
		'description' => $form_state['values']['description'],
		'requirements' => $requirements,
	))->execute();
	if($form_state['triggering_element']['#name']=='saveandopen') {
		db_update('goings')->condition('gid', $form_state['storage']['going']->gid)->fields(array(
			'status' => exam_signup_going_OPEN,
		))->execute();
		drupal_set_message(t('Going !cname in !place saved and opend.',	array(
			'!cname'=>$form_state['storage']['going']->co->cname,
			'!place'=>$form_state['storage']['going']->place->name,
		)));
		watchdog('exam',
			'Going !cname in !place saved and opend.', array(
				'!cname'=>$form_state['storage']['going']->co->cname,
				'!place'=>$form_state['storage']['going']->place->name,
				),
			WATCHDOG_INFO
		);
	} else {
		drupal_set_message(t('Going !cname in !place saved.',	array(
			'!cname'=>$form_state['storage']['going']->co->cname,
			'!place'=>$form_state['storage']['going']->place->name,
		)));
		watchdog('exam',
			'Going !cname in !place saved.', array(
				'!cname'=>$form_state['storage']['going']->co->cname,
				'!place'=>$form_state['storage']['going']->place->name,
				),
			WATCHDOG_INFO
		);
	}
	$form_state['redirect']='exam/arrangement';
}

function charge_form_cert_issue_massiveupload_form_alter(&$form, &$form_state) {
	if($form_state['storage']['step']==2)
		$form['#validate'][]='charge_form_cert_issue_massiveupload_form_validate';
}

function charge_form_cert_issue_massiveupload_form_validate(&$form, &$form_state) {
	if(!$form_state['values']['certid'] || !$form_state['values']['name'] || !$form_state['values']['gender']
		|| !$form_state['values']['birthdate'] || !$form_state['values']['idcard_type']
		|| !$form_state['values']['idcardnumber']) return;
	$file=file_load($form_state['storage']['fid']);
	$uri=drupal_realpath($file->uri);
	if(defined('SAE_TMP_PATH')) {
		file_put_contents( SAE_TMP_PATH . $file->filename, file_get_contents($uri));
		$uri=SAE_TMP_PATH . $file->filename;
	}
	$format=PHPExcel_IOFactory::identify($uri);
	$objReader = PHPExcel_IOFactory::createReader($format);
	$objReader->setReadDataOnly(true);
	$objPHPExcel = $objReader->load($uri);
	$objWorksheet = $objPHPExcel->getActiveSheet();
	$row=$form_state['values']['beginrow'];
	$max_rows=$objWorksheet->getHighestRow();
	do {
		$idcardnumber=strtoupper(trim($objWorksheet->getCell($form_state['values']['idcardnumber'].$row)->getCalculatedValue()));
		$name=trim($objWorksheet->getCell($form_state['values']['name'].$row)->getCalculatedValue());
		$query=db_query('SELECT EXISTS('.
			'SELECT * FROM {scores_temp} WHERE coid=:coid AND idcard_number=:idcardnumber AND name <> :name)',
			array(':coid' => $form_state['storage']['coid'],
				':idcardnumber' => $idcardnumber,
				':name' => $name,
			)
		);
		if($query->fetchField()) {
			form_set_error('idcardnumber',
				t('!cord: The idcard number !val does not match what the you have uploaded for scores.',
					array('!cord'=>$form_state['values']['idcardnumber'].$row, '!val' => $idcardnumber)
				)
			);
		}

		$query=db_query('SELECT EXISTS('.
			'SELECT sg.result FROM {students} s INNER JOIN {signup} sg ON s.uid=sg.uid AND sg.coid=:coid WHERE sg.result <> :status '.
			'UNION '.
			'SELECT st.result FROM {scores_temp} st WHERE st.coid=:coid AND st.idcard_number=:idcardnumber AND st.result <> :status)',
			array(':coid' => $form_state['storage']['coid'],
				':idcardnumber' => $idcardnumber,
				':status' => exam_signup_result_PASSED,
			)
		);
		if($query->fetchField()) {
			form_set_error('idcardnumber',
				t('!cord: The user did not pass the selected certificate test.',
					array('!cord'=>$form_state['values']['idcardnumber'].$row)
				)
			);
		}

	} while ($row++<$max_rows);
	$objWorksheet->disconnectCells();
	$objPHPExcel->disconnectWorksheets();
	unset($objPHPExcel);
	unset($objReader);
	if(interface_exists('SaeInterface')) {
		file_unmanaged_delete($uri);
	}
}

function exam_user_update($edit, $account, $category) {
	if($category=='account')
		exam_user_login($edit, $account);
}

function exam_student_disable_modify($student) {
	if(db_query('SELECT EXISTS(SELECT * FROM {signup} WHERE uid=:uid)', array(':uid'=>$student->uid))->fetchField())
		return array('idnumber');
}

function exam_user_login($edit, $account) {
	$s=student_load($account);
	if(empty($s) && !isset($edit['idnumber'])) return;
	$idcardnumber=isset($edit['idnumber'])?$edit['idnumber']:$s->idcard_number;
	$name=isset($edit['truename'])?$edit['truename']:$s->name;
	if(isset($edit['haveexname']))
		if($edit['haveexname'])
			$exname=$edit['exname'];
		else
			$exname=$edit['name'];
	else $exname=empty($s->exname)?$s->name:$s->exname;
	$query=db_query('SELECT * FROM {scores_temp} WHERE idcard_number=:idcardnumber AND (name=:name or name=:exname)', array(
		':idcardnumber'=>$idcardnumber,
		':name'=>$name,
		':exname'=>$exname
	));
	$c=0;
	foreach($query as $r) {
		$i=db_merge('signup')->key(array('uid'=>$account->uid, 'coid'=>$r->coid))->updateFields(array(
			'uid' => $account->uid,
			'coid' => $r->coid,
			'score' => $r->score,
			'result' => $r->result,
			'status' => exam_signup_status_FINISHED
		))->insertFields(array(
			'ticket_number'=>$r->ticket_number,
			'uid' => $account->uid,
			'coid' => $r->coid,
			'score' => $r->score,
			'result' => $r->result,
			'status' => exam_signup_status_FINISHED
		))->execute();
		if($i) {
			db_delete('scores_temp')->condition('stid',$r->stid)->execute();
			$c++;
		}
	}
	if($c) {
		drupal_set_message(t('You have !num new scores, click !url to view.',
			array('!num'=>$c, '!url'=>l(t('here'), 'user/scores'))));
		watchdog('exam',
			'!user claimed !num exam scores automatically.', array(
				'!user' => $name,
				'!num'=>$c,
				),
			WATCHDOG_INFO
		);
	}
}

function exam_user_delete($user) {
	$query=db_query('SELECT EXISTS(SELECT * FROM {signup} WHERE uid=:uid)', array(':uid'=>$user->uid));
	if($query->fetchField())
		throw new Exception(t("Cannot delete user !user, as there are signup information related to him.", array('!user'=>$user->name)));
}

?>
