<?php

/*
 * This file is licensed under GPLv2+.
*/

function _cert_issue_get_status_text($status) {
	switch($status) {
		case 0:
			return t('Normal');
		case 1:
			return t('Under approved');
		default:
			return t('Unknown');
	}
}

/**
 * Implementation of hook_help().
 */
function cert_issue_help($path, $arg) {
	switch ($path) {
		case 'user/certs':
			$output = t('List my certificates, clamed and issued.');
			break;
		case 'user/claim':
			$output = t('Claim system preloaded certificates.');
			break;
		case 'certificate/massiveupload': 
			$output = t('If you want to massive upload the certificates which are already issued, please use this feature.');
			break;
		case 'certificate/exchangerolls': 
			$output = t('Add roll for certificates exchange, or manipulate the status of rolls.');
			break;
	}
	if (isset($output))
		return $output;
}

/**
 * Implementation of hook_permission().
 */
function cert_issue_permission() {
	return array(
		'preload certificates' => array(
			'title' => t('Upload Massive certificates already issued'),
		),
		'claim certificates' => array(
			'title' => t('Claim already issued certificates'),
		),
		'admin certificates exchange rolls' => array(
			'title' => t('Administrate certificates exchange rolls'),
		),
	);
}

/**
 * Implementation of hook_theme().
 */
function cert_issue_theme() {
	return array(
		'cert_issue_exchange_rolls_form' => array(
			'render element' => 'form', 
		),
	);
}

/**
 * Implementation of hook_menu().
 */
function cert_issue_menu() {
	$items=array();
	$items['certificate/massiveupload'] = array(
		'title' => 'Upload Massive certificates already issued',
		'weight' => 3,
		'page callback' => 'drupal_get_form',
		'page arguments' => array('cert_issue_massiveupload_form'),
		'access callback' => 'user_access',
		'access arguments'=> array('preload certificates'),
	);
	$items['certificate/exchangerolls'] = array(
		'title' => 'Certificates Exchange Roll Management',
		'weight' => 4,
		'page callback' => 'drupal_get_form',
		'page arguments' => array('cert_issue_exchange_rolls_form'),
		'access callback' => 'user_access',
		'access arguments'=> array('admin certificates exchange rolls'),
	);
	$items['user/certs'] = array(
		'title' => 'My certificates',
		'menu_name' => 'user-menu',
		'plid' => '0',
		'weight' => -10,
		'page callback' => 'cert_issue_user_certs_page',
		'access callback' => 'cert_issue_user_certs_page_access',
	);
	$items['user/claim'] = array(
		'title' => 'Claim already issued certificates',
		'menu_name' => 'user-menu',
		'plid' => '0',
		'weight' => -9,
		'page callback' => 'drupal_get_form',
		'page arguments' => array('cert_issue_user_claim_form'),
		'access callback' => 'cert_issue_user_claim_access',
	);
	return $items;
}

function _cert_issue_is_file_spreadsheet($file) {
	if(!preg_match('/\.xlsx{0,1}$/i', $file->filename)) return array();
	include_once(DRUPAL_ROOT.'/sites/all/libraries/phpexcel/PHPExcel.php');
	$result=0;
	switch($format=PHPExcel_IOFactory::identify($file->uri)) {
		case 'Excel5':
		case 'Excel2007':
			$objReader = PHPExcel_IOFactory::createReader($format);
			$objReader->setReadDataOnly(true);
			$objPHPExcel = $objReader->load($file->uri);
			$result=$objPHPExcel->getSheetCount()>0;
			$objPHPExcel->disconnectWorksheets();
			unset($objPHPExcel);
			unset($objReader);
	}
	if($result) return array();
	else return array(t('It is not a valid spreadsheet file.'));
}

function cert_issue_massiveupload_form($form, $form_state) {
	$form=array();
	if(!isset($form_state['storage']['step'])) {
		unset($form_state['storage']);
		$form_state['storage']['step']=1;
	}

	if($form_state['storage']['step']==1)
		$form=cert_issue_massiveupload_form_step1($form, $form_state);
	else if($form_state['storage']['step']==2)
		$form=cert_issue_massiveupload_form_step2($form, $form_state);
	return $form;
}

function cert_issue_massiveupload_form_step1($form, $form_state) {
	$options=array();
	for($i=1980;$i<=(int)date('Y');$i++) {
		$options+=array($i.'02'=>t('!year winter',array('!year'=>$i)));
		$options+=array($i.'08'=>t('!year summer',array('!year'=>$i)));
	}
	$form['organization']=array(
		'#type' => 'select',
		'#title' => t('Organization'),
		'#required' => TRUE,
		'#options' => $options,
		'#default_value' => isset($form_state['storage']['oid'])?$form_state['storage']['oid']:NULL,
	);
	$query=db_select('certificates','c')->fields('c')->orderBy('c.cid');
	$rdbo=$query->execute();
	$options=array();
	foreach($rdbo as $r) {
		$options+=array(
			$r->cid=>sprintf('%s %s', $r->series, $r->name),
		);
	}
	$form['certificatetype']=array(
		'#type' => 'select',
		'#title' => t('Certificate Type'),
		'#required' => TRUE,
		'#options' => $options,
		'#default_value' => isset($form_state['storage']['cid'])?$form_state['storage']['cid']:NULL,
	);
	$form['autocreate']=array(
		'#type' => 'checkbox',
		'#title' => t('Auto create in-exist certificate operations.'),
		'#default_value' => TRUE,
	);
	$form['massivefile']=array(
		'#type' => 'managed_file',
		'#title' => t('Data file'),
		'#required' => TRUE,
		'#default_value' => isset($form_state['storage']['fid'])?$form_state['storage']['fid']:31,
		'#description' => t('Only .xls and .xlsx spreadsheets are supported.'),
		'#upload_validators' => array('file_validate_extensions' => array('xls xlsx'), '_cert_issue_is_file_spreadsheet'=>array()),
	);
	$form['save']=array(
		'#type' => 'submit',
		'#value' => t('Next Step >'),
	);
	$form['#validate'][]='cert_issue_massiveupload_form_step1_validate';
	$form['#submit'][]='cert_issue_massiveupload_form_step1_submit';
	return $form;
}

function cert_issue_massiveupload_form_step1_validate($form, $form_state) {
	if(!$form_state['values']['autocreate'] &&
		certificate_operations_load($form_state['values']['certificatetype'], $form_state['values']['organization'])) {
			form_set_error('organization',t('The selected organization does not contain selected certificate.'));
			form_set_error('certificatetype');
	}
}

function cert_issue_massiveupload_form_step1_submit($form, &$form_state) {
	if($form_state['values']['autocreate']) {
		// First merge th organizations table
		$year=substr($form_state['values']['organization'],0,4);
		$name=substr($form_state['values']['organization'],4,2)=='02'?t('!year winter',array('!year'=>$year)):t('!year summer',array('!year'=>$year));
		db_merge('operations')->key(array('oid'=>$form_state['values']['organization']))->fields(array(
			'year' => $year,
			'name' => $name,
		))->execute();
		// Then merge th c_i table
		if(!certificate_operations_load($form_state['values']['certificatetype'], $form_state['values']['organization'])) {
			db_insert('certificates_operations')->fields(array(
				'oid' => $form_state['values']['organization'],
				'cid' => $form_state['values']['certificatetype'],
				'visible' => 1,
				'status' => 0,
			))->execute();
		}
	}
	$form_state['storage']['oid']=$form_state['values']['organization'];
	$form_state['storage']['cid']=$form_state['values']['certificatetype'];
	$form_state['storage']['coid']=db_select('certificates_operations','co')->fields('co',array('coid'))
		->condition('co.cid',$form_state['values']['certificatetype'])->condition('co.oid',$form_state['values']['organization'])
		->execute()->fetchField();
	$form_state['storage']['fid']=$form_state['values']['massivefile'];
	$form_state['rebuild']=TRUE;
	$form_state['storage']['step']=2;
}

function cert_issue_massiveupload_form_step2($form, $form_state) {
	$form['#attached']['css']=array(
		'.inline-element-div label, .inline-element-div select, .inline-element-div input, .inline-element-div div.form-item { display: inline;}'.
		'body.sidebar-first div #post-content { width: 960px; }'.
		'div#sidebar { display: none; }' => array('type'=>'inline')
	);
	include_once(DRUPAL_ROOT.'/sites/all/libraries/phpexcel/PHPExcel.php');
	$file=file_load($form_state['storage']['fid']);
	$wrapper = file_stream_wrapper_get_instance_by_uri($file->uri);
	$uri = $wrapper->getDirectoryPath() . "/" . file_uri_target($file->uri);
	$format=PHPExcel_IOFactory::identify($uri);
	$objReader = PHPExcel_IOFactory::createReader($format);
	$objReader->setReadDataOnly(true);
	$objPHPExcel = $objReader->load($uri);
	$max_cols=$objPHPExcel->getActiveSheet()->getHighestColumn();
	$max_rows=$objPHPExcel->getActiveSheet()->getHighestRow();

	$co=certificate_operations_load($form_state['storage']['cid'], $form_state['storage']['oid']);
	$form['description']=array(
		'#type' => 'item',
		'#requires' => TRUE,
		'#title' => t('Selected organization'),
		'#markup' => t('!org !series !cname',
			array('!org'=>$co->oname, '!series'=>$co->series, '!cname'=>$co->cname)),
	);

	$options=drupal_map_assoc(range(1,$max_rows));
	$form['issuedate']=array(
		'#type' => 'date',
		'#title' => t('Certificate issue date'),
		'#default_value' => array(
			'year' => substr($form_state['storage']['oid'],0,4),
			'month' => (int)substr($form_state['storage']['oid'],4,2),
			'day' => 1,
		),
		'#required' => TRUE,
	);

	$form['prefix']=array(
		'#markup' => '<div class="inline-element-div">',
	);
	$i=1;
	$form['beginrow']=array(
		'#type' => 'select',
		'#title' => t('Data started at row'),
		'#description' => t('Please select where the data series begins, not the row where header locates.'),
		'#options' => $options,
		'#required' => TRUE,
		'#default_value' => isset($form_state['storage']['beginrow_col'])?$form_state['storage']['beginrow_col']:'2',
	);
	$options=drupal_map_assoc(range('A',$max_cols));
	foreach($options as $key=>$val) {
		if(!$objPHPExcel->getActiveSheet()->getColumnDimension($key)->getVisible())
			unset($options[$key]);
	}
	$options_with_none=array('0'=>t('None'))+$options;
	$form['middilefix'.$i++]=array(
		'#markup' => '</div><div class="inline-element-div">',
	);
	$form['ticket_number']=array(
		'#type' => 'select',
		'#title' => t('Ticket number at col'),
		'#options' => $options_with_none,
		'#required' => TRUE,
		'#default_value' => isset($form_state['storage']['ticket_number_col'])?$form_state['storage']['ticket_number_col']:'0',
	);
	$form['middilefix'.$i++]=array(
		'#markup' => '</div><div class="inline-element-div">',
	);
	$form['certid']=array(
		'#prefix' =>'<div style="width: 400px; display: inline; left: 400px;">',
		'#suffix' =>'</div>',
		'#type' => 'select',
		'#title' => t('Certificate number at col'),
		'#options' => $options,
		'#required' => TRUE,
		'#default_value' => isset($form_state['storage']['certid_col'])?$form_state['storage']['certid_col']:NULL,
	);
	$form['middilefix'.$i++]=array(
		'#markup' => '</div><div class="inline-element-div">',
	);
	$form['name']=array(
		'#type' => 'select',
		'#title' => t('Real name at col'),
		'#options' => $options,
		'#required' => TRUE,
		'#default_value' => isset($form_state['storage']['name_col'])?$form_state['storage']['name_col']:NULL,
	);
	$form['middilefix'.$i++]=array(
		'#markup' => '</div><div class="inline-element-div">',
	);
	$form['pyname']=array(
		'#type' => 'select',
		'#title' => t('Pinyin name at col'),
		'#options' => $options_with_none,
		'#required' => TRUE,
		'#default_value' => isset($form_state['storage']['pyname_col'])?$form_state['storage']['pyname_col']:'0',
	);
	$form['middilefix'.$i++]=array(
		'#markup' => '</div><div class="inline-element-div">',
	);
	$form['gender']=array(
		'#type' => 'select',
		'#title' => t('Gender at col'),
		'#options' => $options,
		'#required' => TRUE,
		'#default_value' => isset($form_state['storage']['gender_col'])?$form_state['storage']['gender_col']:NULL,
	);
	$form['middilefix'.$i++]=array(
		'#markup' => '</div><div class="inline-element-div">',
	);
	$form['birthdate']=array(
		'#type' => 'select',
		'#title' => t('Birth date at col'),
		'#options' => $options,
		'#required' => TRUE,
		'#default_value' => isset($form_state['storage']['birthdate_col'])?$form_state['storage']['birthdate_col']:NULL,
	);
	$form['middilefix'.$i++]=array(
		'#markup' => '</div><div class="inline-element-div">',
	);
	$form['idcard_type']=array(
		'#type' => 'select',
		'#title' => t('ID Card type at col'),
		'#options' => $options_with_none,
		'#required' => TRUE,
		'#default_value' => isset($form_state['storage']['idcard_type_col'])?$form_state['storage']['idcard_type_col']:'0',
	);
	$form['middilefix'.$i++]=array(
		'#markup' => '</div><div class="inline-element-div">',
	);
	$form['idcardnumber']=array(
		'#type' => 'select',
		'#title' => t('ID Card nubmer at col'),
		'#options' => $options_with_none,
		'#required' => TRUE,
		'#default_value' => isset($form_state['storage']['idcardnumber_col'])?$form_state['storage']['idcardnumber_col']:'0',
	);
	$form['suffix']=array(
		'#markup' => '</div>',
	);

	// Display raw data for the spreadsheet
	$origrows=$objPHPExcel->getActiveSheet()->rangeToArray(
		'A1:'.($max_cols>'L'?'L':$max_cols).($max_rows>10?'10':$max_rows),	// The worksheet range that we want to retrieve
		'',			// Value that should be returned for empty cells
		TRUE,		// Should formulas be calculated (the equivalent of getCalculatedValue() for each cell)
		TRUE,		// Should values be formatted (the equivalent of getFormattedValue() for each cell)
		FALSE		// Should the array be indexed by cell row and cell column
	);
	$rows=array();
	$i=1;
	foreach($origrows as $row) {
		array_unshift($row, array('data'=>$i++, 'header'=>TRUE));
		$rows[]=$row;
	}
	$header=range('A',($max_cols>'L'?'L':$max_cols));
	array_unshift($header, sprintf('[%s]',$objPHPExcel->getActiveSheet()->getTitle()));
	$objPHPExcel->disconnectWorksheets();
	unset($objPHPExcel);
	unset($objReader);
	$form['demotitle']=array(
		'#type' => 'item',
		'#title' => t('Raw data for @filename', array('@filename'=>$file->filename)),
		'#markup' => t('Note: the raw data shows the hidden rows and columns, which means these rows and column will be proceeded.'),
	);
	$form['demo']=array(
		'#markup' => theme('table',array('header'=>$header, 'rows'=>$rows)),
	);

	$form['previous']=array(
		'#type' => 'submit',
		'#value' => t('< Previous Step'),
		'#submit' => array('cert_issue_massiveupload_form_step2_submit_previous'),
		'#limit_validation_errors' => array(),
	);
	$form['submit']=array(
		'#type' => 'submit',
		'#value' => t('Upload data file & save'),
	);

	$form['#validate'][]='cert_issue_massiveupload_form_step2_validate';
	$form['#submit'][]='cert_issue_massiveupload_form_step2_submit';
	return $form;
}

function cert_issue_massiveupload_form_step2_validate($form, $form_state) {
	include_once(DRUPAL_ROOT.'/sites/all/libraries/phpexcel/PHPExcel.php');
	if($form_state['values']['certid'] && $form_state['values']['name'] && $form_state['values']['gender']
		&& $form_state['values']['birthdate'])
	{
		$file=file_load($form_state['storage']['fid']);
		$wrapper = file_stream_wrapper_get_instance_by_uri($file->uri);
		$uri = $wrapper->getDirectoryPath() . "/" . file_uri_target($file->uri);
		$format=PHPExcel_IOFactory::identify($uri);
		$objReader = PHPExcel_IOFactory::createReader($format);
		$objReader->setReadDataOnly(true);
		$objPHPExcel = $objReader->load($uri);
		$objWorksheet = $objPHPExcel->getActiveSheet();
		$row=$form_state['values']['beginrow'];
		$max_rows=$objWorksheet->getHighestRow();
		$certids=array();
		do {
			$row=(string)$row;
	
			// Test certid
			$certid=trim($objWorksheet->getCell($form_state['values']['certid'].$row)->getCalculatedValue());

			if(empty($certid)) {
				form_set_error('certid', t('!cord: The certid is empty.',
					array('!cord'=>$form_state['values']['certid'].$row)));
				break;
			} 

			
			if(in_array($certid, $certids)) {
				form_set_error('certid',
					t('!cord: Cert id has duplicated value !val.',
						array('!cord'=>$form_state['values']['certid'].$row, '!val' => $certid)
					)
				);
				break;
			}

			if(db_select('certificates_issues','ci')->fields('ci')->condition('ci.certid',$certid)->countQuery()->execute()->fetchField()) {
				form_set_error('certid',
					t('!cord: The value !val duplicate with existing certids.',
						array('!cord'=>$form_state['values']['certid'].$row, '!val' => $certid)
					)
				);
				break;
			}
			$certids[]=$certid;
			
			
			// Test name
			$name=trim($objWorksheet->getCell($form_state['values']['name'].$row)->getCalculatedValue());
			if(empty($name)) {
				form_set_error('name', t('!cord: The name is empty.',
					array('!cord'=>$form_state['values']['name'].$row)));
				break;
			}

			// Test pyname
			if($form_state['values']['pyname']) {
				$pyname=strtoupper(trim($objWorksheet->getCell($form_state['values']['pyname'].$row)->getCalculatedValue()));
				if(!empty($pyname) && !preg_match('/^[A-Z ]+$/', $pyname)) {
					form_set_error('pyname', t('!cord: The alphabet name !val is not valid.',
						array('!cord'=>$form_state['values']['pyname'].$row, '!val' => $pyname)
					));
					break;
				}
			}

			// Test gender
			$gender=trim($objWorksheet->getCell($form_state['values']['gender'].$row)->getCalculatedValue());
			if(!in_array($gender, array('1','2',t('Male'),t('Female')))) {
				form_set_error('gender', t('!cord: The gender !val is invalid.',
					array('!cord'=>$form_state['values']['gender'].$row, '!val' => $gender)
				));
				break;
			}

			// Test birthdate
			if($form_state['values']['birthdate']) {
				$birthdate=trim($objWorksheet->getCell($form_state['values']['birthdate'].$row)->getCalculatedValue());
				if(!empty($birthdate) && !preg_match('/^[0-9]+$/', $birthdate)) {
					form_set_error('birthdate', t('!cord: The birthdate !val is invalid.',
						array('!cord'=>$form_state['values']['birthdate'].$row, '!val' => $birthdate)
					));
					break;
				}
				if(strlen($birthdate)==6) {
					if(!_student_is_date_validate($birthdate.'01')) {
						form_set_error('birthdate', t('!cord: The birthdate !val is invalid.',
							array('!cord'=>$form_state['values']['birthdate'].$row, '!val' => $birthdate)
						));
						break;
					}
				} else if(strlen($birthdate)==8) {
					if(!_student_is_date_validate($birthdate)) {
						form_set_error('birthdate', t('!cord: The birthdate !val is invalid.',
							array('!cord'=>$form_state['values']['birthdate'].$row, '!val' => $birthdate)
						));
						break;
					}
				} else {
					form_set_error('birthdate', t('!cord: The birthdate !val is invalid.',
						array('!cord'=>$form_state['values']['birthdate'].$row, '!val' => $birthdate)
					));
				}
			}

			// Test idcard_type
			if($form_state['values']['idcard_type']) {
				$idcard_type=trim($objWorksheet->getCell($form_state['values']['idcard_type'].$row)->getCalculatedValue());
				if(!empty($idcard_type) && !preg_match('/^[0-9]$/', $idcard_type)) {
					form_set_error('idcard_type', t('!cord: The idcard type !val is invalid.',
						array('!cord'=>$form_state['values']['idcard_type'].$row, '!val' => $birthdate)
					));
					break;
				}
			}

			// Test idcard number
			if($form_state['values']['idcardnumber']) {
				$idcardnumber=strtoupper(trim($objWorksheet->getCell($form_state['values']['idcardnumber'].$row)->getCalculatedValue()));
				if(!empty($idcard_type) && $idcard_type==0 && _student_is_idcardn_validate($idcardnumber)) {
					form_set_error('idcard_type', t('!cord: The idcard number !val is invalid.',
						array('!cord'=>$form_state['values']['idcardnumber'].$row, '!val' => $birthdate)
					));
					break;
				}
				$student=db_select('students','s')->fields('s')
					->condition('s.idcard_type',$idcard_type)->condition('s.idcard_number',$idcardnumber)
					->execute()->fetchObject();
				if(!$student) break;
				if(($student->name != $name && $student->exname != $name) || ($student_gender != $gender)) {
					$form_set_error('idcardnumber',
						t('!cord: The idcard number !val does not match what the users have input (!name, !gender).',
							array('!cord'=>$form_state['values']['idcardnumber'].$row, '!val' => $idcardnumber,
								'!name'=>empty($student->exname)?$student->name:(sprintf('%s (%s)', $student->name, $student->exname))
							)
						)
					);
					break;
				}
			}
			
		} while ($row++<$max_rows);

		$objWorksheet->disconnectCells();
		$objPHPExcel->disconnectWorksheets();
		unset($objPHPExcel);
		unset($objReader);
	}
}

function cert_issue_massiveupload_form_step2_submit($form, &$form_state) {
	$file=file_load($form_state['storage']['fid']);
	$wrapper = file_stream_wrapper_get_instance_by_uri($file->uri);
	$uri = $wrapper->getDirectoryPath() . "/" . file_uri_target($file->uri);
	$format=PHPExcel_IOFactory::identify($uri);
	$objReader = PHPExcel_IOFactory::createReader($format);
	$objReader->setReadDataOnly(true);
	$objPHPExcel = $objReader->load($uri);
	$objWorksheet = $objPHPExcel->getActiveSheet();
	$i=0;
	$max_rows=$objWorksheet->getHighestRow();
	for($row=$form_state['values']['beginrow'];$row<=$max_rows;$row++) {
		$certid=trim($objWorksheet->getCell($form_state['values']['certid'].$row)->getCalculatedValue());
		if($form_state['values']['ticket_number'])
			$ticket_number=trim($objWorksheet->getCell($form_state['values']['ticket_number'].$row)->getCalculatedValue());
		else
			$ticket_number='';
		$name=trim($objWorksheet->getCell($form_state['values']['name'].$row)->getCalculatedValue());
		if($form_state['values']['pyname'])
			$pyname=trim($objWorksheet->getCell($form_state['values']['pyname'].$row)->getCalculatedValue());
		else
			$pyname='';
		if($form_state['values']['idcard_type'])
			$idcard_type=trim($objWorksheet->getCell($form_state['values']['idcard_type'].$row)->getCalculatedValue());
		else
			$idcard_type=NULL;
		if($form_state['values']['idcardnumber'])
			$idcardnumber=strtoupper(trim($objWorksheet->getCell($form_state['values']['idcardnumber'].$row)->getCalculatedValue()));
		else
			$idcardnumber='';
		$birthdate=trim($objWorksheet->getCell($form_state['values']['birthdate'].$row)->getCalculatedValue());
		$gender=trim($objWorksheet->getCell($form_state['values']['gender'].$row)->getCalculatedValue());
		if(in_array($gender,array('1',t('Male'))))
			$gender=1;
		else
			$gender=2;
		$claimedby=(int)db_select('students','s')->condition('s.idcard_type')->fields('s',array('uid'))->execute()->fetchField();
		$r=db_insert('certificates_issues')->fields(array(
			'coid' => $form_state['storage']['coid'],
			'certid' => $certid,
			'ticket_number' => $ticket_number,
			'name' => $name,
			'foreign_name' => $pyname,
			'idcard_type' => $idcard_type,
			'idcard_number' => $idcardnumber,
			'date_of_birth' => $birthdate,
			'gender' => $gender,
			'issuedate' => sprintf("%04d%02d%02d",$form_state['values']['issuedate']['year'], $form_state['values']['issuedate']['month'], $form_state['values']['issuedate']['day']),
			'claimedby' => $claimedby,
		))->execute();
		if($r) {
			$i++;
			$form_state['storage']['beginrow_col']=$form_state['values']['beginrow'];
			$form_state['storage']['ticket_number_col']=$form_state['values']['ticket_number'];
			$form_state['storage']['certid_col']=$form_state['values']['certid'];
			$form_state['storage']['name_col']=$form_state['values']['name'];
			$form_state['storage']['pyname_col']=$form_state['values']['pyname'];
			$form_state['storage']['gender_col']=$form_state['values']['gender'];
			$form_state['storage']['birthdate_col']=$form_state['values']['birthdate'];
			$form_state['storage']['idcard_type_col']=$form_state['values']['idcard_type'];
			$form_state['storage']['idcardnumber_col']=$form_state['values']['idcardnumber'];
		}
	}

	$objWorksheet->disconnectCells();
	$objPHPExcel->disconnectWorksheets();
	unset($objPHPExcel);
	unset($objReader);
	$form_state['rebuild']=TRUE;
	unset($form_state['storage']['fid']);
	$form_state['storage']['step']=1;
	drupal_set_message(t('!num records are imported.', array('!num'=>$i)));
}

function cert_issue_massiveupload_form_step2_submit_previous($form, &$form_state) {
	$form_state['rebuild']=TRUE;
	$form_state['storage']['step']=1;
}

function cert_issue_user_certs_page_access() {
	$user=$GLOBALS['user'];
	if(student_load($user)) {
		return db_select('certificates_issues','ci')->fields('ci')->condition('ci.claimedby',$user->uid)
			->countQuery()->execute()->fetchField();
	} else return FALSE;
}

function cert_issue_user_certs_page() {
	$user=$GLOBALS['user'];
	$query=db_select('certificates_issues','ci')
		->condition('ci.claimedby',$user->uid)
		->fields('ci',array('certid','issuedate','status'));
	$query->innerJoin('certificates_operations','co','co.coid=ci.coid');
	$query->innerJoin('operations','o','co.oid=o.oid');
	$query->innerJoin('certificates','c','co.cid=c.cid');
	$query->addExpression('o.name','oname');
	$query->addExpression('c.name','cname');
	$query->fields('c',array('series'));
	$header=array(
		array('data'=>t('Organizations series'),'field'=>'o.oid'),
		array('data'=>t('Series'), 'field'=>'c.series'),
		array('data'=>t('Specification name')),
		array('data'=>t('Certificate no'), 'field'=>'ci.certid'),
		array('data'=>t('Status'), 'field'=>'ci.status'),
	);
	$rows=array();
	$query->extend('TableSort')->orderByHeader($header)->extend('PagerDefault')->limit(20);
	$output = '';
	$rdbo=$query->execute();
	foreach($rdbo as $r) {
		$rows[]=array(
			$r->oname,
			$r->series,
			$r->cname,
			$r->certid,
			_cert_issue_get_status_text($r->status),
		);
	}
	$output .= theme('table', array('header'=>$header, 'rows'=>$rows));
	$output .= theme('pager');

	if(cert_issue_user_claim_access())
		$output .= '<div>'.l(t('Want claim more certificates?'), 'user/claim').'</div>';
	return $output;
}

function cert_issue_user_claim_access() {
	$user=$GLOBALS['user'];
	if(isset($user->uid) && $user->uid) {
		$student=student_load($user);
		if(!$student) return FALSE;
		$query=db_select('certificates_issues','ci')
			->condition('ci.claimedby',0)
			->condition('ci.gender',$student->gender)
			->fields('ci');
		if($student->exname) {
			$condition=db_or()->condition('ci.name',$student->name)->condition('ci.name',$student->exname);
			$query->condition($condition);
			unset($condition);
		} else
			$query->condition('ci.name',$student->name);
		$query->condition('ci.date_of_birth',substr($student->date_of_birth,0,6));
		$query->innerJoin('certificates_operations','co','co.coid=ci.coid');
		$query->innerJoin('operations','o','co.oid=o.oid');
		$query->innerJoin('certificates','c','co.cid=c.cid');
		return $query->countQuery()->execute()->fetchField();
	} else return FALSE;
}

function cert_issue_user_claim_form($form, $form_state) {
	$student=student_load($GLOBALS['user']);
	$form=array();
	$form['description']=array(
		'#markup' => t('Please select the certificate you wan to claim. ').
			t('If your certificates is not listed here, please contact us.').'<br/>'.
			t('Tip: if you have changed your name in the pass, please put it down at !url, so that we could make it recognized.',
				array('!url'=>l(t('here'), 'user/'.$student->uid.'/edit'))),
	);
	$header=array(
		t('Organizations series'),
		t('Specification name'),
		t('Certificate no'),
		t('True name'),
		t('Birth date'),
	);
	$query=db_select('certificates_issues','ci')
		->condition('ci.claimedby',0)
		->condition('ci.gender',$student->gender)
		->fields('ci',array('ciid','certid','name','date_of_birth'));
	if($student->exname) {
		$condition=db_or()->condition('ci.name',$student->name)->condition('ci.name',$student->exname);
		$query->condition($condition);
		unset($condition);
	} else
		$query->condition('ci.name',$student->name);
	$query->condition('ci.date_of_birth',substr($student->date_of_birth,0,6));
	$query->innerJoin('certificates_operations','co','co.coid=ci.coid');
	$query->innerJoin('operations','o','co.oid=o.oid');
	$query->innerJoin('certificates','c','co.cid=c.cid');
	$query->addExpression('o.name','oname');
	$query->addExpression('c.name','cname');
	$query->fields('c',array('series'));
	$query->orderBy('o.year')->orderBy('o.oid')->orderBy('c.cid');

	$rows=array();
	$rdbo=$query->execute();
	foreach($rdbo as $r) {
		$rows[$r->ciid]=array(
			$r->oname,
			$r->cname,
			$r->certid,
			$r->name,
			$r->date_of_birth,
		);
	}
	$form['certs']=array(
		'#type' => 'tableselect',
		'#header' => $header,
		'#options' => $rows,
		'#required' => empty($rows),
		'#empty' => t('No available certificates for you to claim.'),
	);
	if(!empty($rows))
		$form['claim']=array(
			'#type' => 'submit',
			'#value' => t('Claim selected certificates & Proceed'),
		);
	return $form;
}

function cert_issue_user_claim_form_submit($form, &$form_state) {
	$certs=array_keys(array_filter($form_state['values']['certs']));
	$i=0;
	foreach($certs as $cert) {
		$i+=db_update('certificates_issues')->condition('claimedby',0)->condition('ciid',$cert)->fields(array(
			'claimedby' => $GLOBALS['user']->uid,
		))->execute();
	}
	if($i)
		drupal_set_message(t('You claimed !num certificates.', array('!num'=>$i)));
	if(!cert_issue_user_claim_access())
		$form_state['redirect']='user/certs';
}

function cert_issue_exchange_rolls_form($form, &$form_state) {
	$form=array();
	$form['#attached']['css']=array(
		'.inline-element-div label, .inline-element-div select, .inline-element-div input, .inline-element-div div.form-item { display: inline; }' => array('type'=>'inline')
	);

	$form['addrolls']=array(
		'#type' => 'fieldset',
		'#title' => t('Add new roll for certificates exchange'),
		'#collapsible' => TRUE,
	);
	$query=db_select('certificates','c')->fields('c')->orderBy('c.series')->orderBy('c.cid');
	$subquery=db_select('certificates_exchange_rolls','cer')->fields('cer')->where('cer.cid=c.cid')->condition('cer.status',2);
	$query->notExists($subquery);
	$rdbo=$query->execute();
	$options=array();
	foreach($rdbo as $r) {
		$options+=array(
			(string)$r->cid=>sprintf("%s - %s",$r->series, $r->name)
		);
	}
	$form['addrolls']['cid_prefix']=array(
		'#type' => 'item',
		'#title' => t('Student may apply'),
		'#required' => TRUE,
	);
	$form['addrolls']['cid']=array(
		'#type' => 'select',
		'#options' => $options,
		'#title' => t('New certificate'),
		'#title_display' => 'invisible',
		'#required' => TRUE,
		'#default_value' => NULL,
	);
	$form['addrolls']['cid_orig_prefix']=array(
		'#type' => 'item',
		'#title' => t(', if he has a valid'),
		'#required' => TRUE,
	);
	$query=db_select('certificates','c')->fields('c')->orderBy('c.series')->orderBy('c.cid');
	$rdbo=$query->execute();
	$options=array();
	foreach($rdbo as $r) {
		$options+=array(
			(string)$r->cid=>sprintf("%s - %s",$r->series, $r->name)
		);
	}
	$form['addrolls']['cid_orig']=array(
		'#type' => 'select',
		'#title' => t('Old certificate'),
		'#title_display' => 'invisible',
		'#options' => $options,
		'#required' => TRUE,
		'#default_value' => NULL,
	);
	$options=array('0'=>t('nothing else'))+$options;
	$form['addrolls']['ccid_orig_extra_prefix']=array(
		'#type' => 'item',
		'#title' => t('and'),
		'#required' => TRUE,
	);
	$form['addrolls']['cid_orig_extra']=array(
		'#type' => 'select',
		'#title' => t('Old certificate'),
		'#title_display' => 'invisible',
		'#options' => $options,
		'#required' => TRUE,
		'#default_value' => '-1',
	);
	$form['addrolls']['enabled']=array(
		'#type' => 'checkbox',
		'#title' => t('Make it enabled for students to apply right now'),
		'#default_value' => TRUE,
		'#description' => t('You can only close (end) a roll, after enabling it.'),
	);
	$form['addrolls']['save']=array(
		'#type' => 'submit',
		'#value' => t('Add roll'),
	);
	$form['#attached']['css'][]=array(
		'data'=>'div.form-item-enabled div.description {color: red; font-weight: bold;}',
		'type'=>'inline'
	);

	$header=array(
		array('data' => t('Series'), 'field'=> 'series'),
		array('data' => t('Specification'), 'field'=> 'name'),
		array('data' => t('Exchange requirements'), 'field'=> 'name'),
		array('data' => t('Status'), 'field'=> 'status_mod', 'sort'=>'desc'),
		array('data' => t('Operation')),
	);
	$query=db_select('certificates_exchange_rolls','cer')->fields('cer')
		->extend('TableSort')->orderByHeader($header)->extend('PagerDefault')->limit(20);
	$query->innerJoin('certificates','c','c.cid=cer.cid');
	$query->addExpression('1-MOD(cer.status,2)','status_mod');
	$query->fields('c',array('series','name'));
	$form['rolls']=array(
		'#type' => 'fieldset',
	);
	$form['rolls']['title']=array(
		'#type' => 'item',
		'#title' => t('Existing rolls'),
	);
	$rdbo=$query->execute();
	$form['addrolls']['#collapsed']=$rdbo->rowCount();
	$form['rolls']['cerid']=array();
	foreach($rdbo as $r) {
		$form['rolls']['cerid'][$r->cerid]=array('#type'=>'hidden','#value'=>$r->cerid);
		$form['rolls']['series'][$r->cerid]=array('#markup'=>$r->series);
		$form['rolls']['name'][$r->cerid]=array('#markup'=>$r->name);
		$cid_orig=json_decode($r->cid_orig);
		$cids=array();
		foreach($cid_orig as $cid) {
			$cids[]=db_select('certificates','c')->condition('c.cid',$cid)->fields('c',array('name'))->execute()->fetchField();
		}
		if(count($cids)>1)
			$c='<ul><li>'.implode('</li><li>',$cids).'</li></ul>';
		else
			$c=$cids[0];
		$form['rolls']['cid_orig'][$r->cerid]=array('#markup'=>$c);
		switch($r->status) {
			case 0: // it is not enabled.
				$form['rolls']['status'][$r->cerid]=array('#markup'=>t('Openable'));
				$form['rolls']['submit'.$r->cerid]=array(
					'#type' => 'submit',
					'#value' => t('Open'),
					'#name' => 'open'.$r->cerid,
					'#limit_validation_errors'=>array(),
					'#submit' => array('cert_issue_exchange_rolls_form_open_submit'),
				);
				break;
			case 2: // it is not open.
				$form['rolls']['status'][$r->cerid]=array('#markup'=>t('Ongoing'));
				$form['rolls']['submit'.$r->cerid]=array(
					'#type' => 'submit',
					'#name' => 'close'.$r->cerid,
					'#value' => t('Close'),
					'#limit_validation_errors'=>array(),
					'#submit' => array('cert_issue_exchange_rolls_form_close_submit'),
				);
				break;
			case 1: // it is closed
				$form['rolls']['status'][$r->cerid]=array('#markup'=>t('Closed'));
				$form['rolls']['submit'.$r->cerid]=array('#markup'=>'');
		}
	}

	return $form;
}

function theme_cert_issue_exchange_rolls_form($variables) {
	$form=$variables['form'];
	$output ='';
	$output .= drupal_render($form['addrolls']);
	$output .= drupal_render($form['rolls']['title']);
	unset($form['rolls']['title']);
	$header=array(
		array('data' => t('Series'), 'field'=> 'series'),
		array('data' => t('Specification'), 'field'=> 'name'),
		array('data' => t('Exchange requirements'), 'field'=> 'name'),
		array('data' => t('Status'), 'field'=> 'status_mod', 'sort'=>'desc'),
		array('data' => t('Operation')),
	);
	$rows=array();
	foreach($form['rolls']['cerid'] as $cer) {
		if(!isset($cer['#type']) || $cer['#type']!='hidden') continue;
		$cerid=$cer['#value'];
		$rows[]=array(
			drupal_render($form['rolls']['series'][$cerid]),
			drupal_render($form['rolls']['name'][$cerid]),
			drupal_render($form['rolls']['cid_orig'][$cerid]),
			drupal_render($form['rolls']['status'][$cerid]),
			drupal_render($form['rolls']['submit'.$cerid]),
		);
	}
	if(!empty($rows))
		$output.=theme('table',array('header'=>$header,'rows'=>$rows,'empty'=>t('There is no defined rolls.')));
	unset($form['rolls']);
	$output.=drupal_render_children($form);
	$output .= theme('pager');
	return $output;
}

function cert_issue_exchange_rolls_form_validate($form, $form_state) {
	if(empty($form_state['values']['cid']) || empty($form_state['values']['cid_orig'])) return;
	if($form_state['values']['cid']==$form_state['values']['cid_orig']) {
		form_set_error('cid');
		form_set_error('cid_orig', t('You cannot select the same value for both new and old certificate.'));
	}
	else if($form_state['values']['cid']==$form_state['values']['cid_orig_extra']) {
		form_set_error('cid');
		form_set_error('cid_orig_extra', t('You cannot select the same value for both new and old certificate.'));
	}
	else if($form_state['values']['cid_orig']==$form_state['values']['cid_orig_extra']) {
		form_set_error('cid_orig');
		form_set_error('cid_orig_extra', t('You cannot select the same value for both old certificates.'));
	} else {
		$query=db_select('certificates_exchange_rolls','cer')->fields('cer')
			->condition('cer.cid',$form_state['values']['cid'])->condition('cer.status',1);
		if($query->countQuery()->execute()->fetchField())
			form_set_error('cid', t('There is ongoing certificate exchange roll with the same new certificate.'));
	}
}

function cert_issue_exchange_rolls_form_submit($form, $form_state) {
	$cid_orig=array((int)$form_state['values']['cid_orig']);
	if($form_state['values']['cid_orig_extra'])
		$cid_orig+=(int)$form_state['values']['cid_orig_extra'];
	db_merge('operations')->key(array('oid'=>date('Ym')))->insertFields(array(
		'oid'=>date('Ym'),
		'year'=>date('Y'),
		'name'=>t('!year !month cert exchange',array('!year'=>date('Y'), '!month'=>date('n'))),
	))->execute(); 
	$r=db_insert('certificates_exchange_rolls')->fields(array(
		'cid' => $form_state['values']['cid'],
		'cid_orig' => json_encode($cid_orig),
		'status' => $form_state['values']['enabled']?2:0,
	))->execute();
	if($r)
		if($form_state['values']['enabled'])
			drupal_set_message(t('Roll added and published.'));
		else
			drupal_set_message(t('Roll added.'));
}

function cert_issue_exchange_rolls_form_open_submit($form, $form_state) {
	$cerid=substr($form_state['triggering_element']['#name'],4);
	db_update('certificates_exchange_rolls')->fields(array(
		'status'=>2
	))->condition('cerid',$cerid)->execute();
	drupal_set_message(t('Roll opened.'));
}

function cert_issue_exchange_rolls_form_close_submit($form, $form_state) {
	$cerid=substr($form_state['triggering_element']['#name'],5);
	db_update('certificates_exchange_rolls')->fields(array(
		'status'=>1
	))->condition('cerid',$cerid)->execute();
	drupal_set_message(t('Roll closed.'));
}
?>
