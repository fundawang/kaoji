<?php

/*
 * This file is licensed under GPLv2+.
 */

/**
 * @file
 * Defines the basic information of certificate.
 */
 

/**
 * Implementation of hook_username_alter().
 */
function certificate_username_alter(&$name, $account) {
	if(user_access('admin certificates', $account))
		$name=t('Administrator');
}

/**
 * Implementation of hook_help().
 */
function certificate_help($path, $arg) {
	switch ($path) {
		case 'certificate':
			$output = t('You may administrate various basic information of certificates via following features.');
			break;
		case 'certificate/specification':
			$output = t('In this page, you could modify or add new certificate specification.');
			break;
		case 'certificate/preload':
			$output = t('In this page, you could preload certificates already issued, for students to claim.');
			break;
		case 'certificate/operations':
			$output = t('There are two methods adding operations: copying existing operation or creating from scratch.');
			$output .= t('You may also adding certificates to operation one by one.');
			break;
	}
	if (isset($output))
		return $output;
}

/**
 * Implementation of hook_permission().
 */
function certificate_permission() {
	return array(
		'admin certificates' => array(
			'title' => t('Administrate certificates types'),
		),
	);
}

/**
 * Implementation of hook_theme().
 */
function certificate_theme() {
	return array(
		'certificate_specification_form' => array(
			'render element' => 'form', 
		),
	);
}

/**
 * Implementation of hook_menu().
 */
function certificate_menu() {
	$items=array();
	$items['certificate']=array(
		'menu_name' => 'user-menu',
		'plid' => '0',
		'title' => 'Certificates Management',
		'description' => "Manage the certificates",
		'page callback' => 'certificate_blocklist',
		'weight' => 7,
		'access callback' => 'user_access',
		'access arguments'=> array('admin certificates'),
		'expanded' => TRUE,
	);
	$items['certificate/specification']=array(
		'title' => 'Specification Management',
		'weight' => '1',
		'description' => "Manage the specifications",
		'page callback' => 'drupal_get_form',
		'page arguments' => array('certificate_specification_form'),
		'access callback' => 'user_access',
		'access arguments'=> array('admin certificates'),
	);
	$items['certificate/operations']=array(
		'title' => 'Operations Management',
		'weight' => 2,
		'description' => "Manage the operations",
		'page callback' => 'drupal_get_form',
		'page arguments' => array('certificate_operations_form'),
		'access callback' => 'user_access',
		'access arguments'=> array('admin certificates'),
	);
	return $items;
}

/**
 * Provide a single block from the administration menu as a page.
 * This function is often a destination for these blocks.
 * For example, 'admin/content/types' needs to have a destination to be valid
 * in the Drupal menu system, but too much information there might be
 * hidden, so we supply the contents of the block.
 *
 * @return
 *   The output HTML.
 */
function certificate_blocklist() {
	$item = menu_get_item();
	$content = system_admin_menu_block($item);

	return theme('admin_block_content', array('content' => $content));
}

/**
 * Callback function of 'certificate/specification'
 */
function certificate_specification_form($form, $form_state) {
	$form=array();
	if(isset($form_state['storage']['cid'])) {
		$form['cid']=array('#type'=>'hidden','#value'=>$form_state['storage']['cid']);
		$certificate=db_query('SELECT * FROM {certificates} WHERE cid=:cid',array(':cid'=>$form_state['storage']['cid']))->fetchObject();
	} else $certificate=FALSE;

	$form['#attached']['css']=array(
		'.inline-element-div label, .inline-element-div select, .inline-element-div input, .inline-element-div div.form-item { display: inline; }' => array('type'=>'inline')
	);

	$form['addnotice']=array(
		'#markup' => '<strong>'.($certificate?t('Modify specification'):t('Add specification')).'</strong>',
	);

	$series=array();
	$dbo=db_query('SELECT DISTINCT series FROM {certificates}');
	$i=1;
	$c_series=1;
	foreach($dbo as $r) {
		$series+=array($i=>$r->series);
		if($certificate&&$r->series==$certificate->series) $c_series=$i;
		$i++;
	}
	$form['begin']=array(
		'#markup' => '<div class="inline-element-div">',
	);
	if($i>1) {
		$form['series_caption']=array(
			'#type' => 'item',
			'#title' => t('Series'),
			'#required' => TRUE,
		);
		$series+=array('0'=>t('-- New series --'));
		$form['series']=array(
			'#type' => 'select',
			'#required' => TRUE,
			'#default_value' => 1,
			'#options' => $series,
		);
		$form['series_input']=array(
			'#type' => 'textfield',
			'#title' => t(', in the name of'),
			'#title_display' => 'before',
			'#maxlength' => 30,
			'#size' => 30,
			'#states' => array(
				'visible' => array(
					':input[name="series"]' => array('value' =>'0'),
				),
				'required' => array(
					':input[name="series"]' => array('value' =>'0'),
				),
			),
		);
		$form['#attached']['js'][]=array('data'=>
			'jQuery(document).ready(function(){'.
				'jQuery("#edit-series").change(function(){ '.
				'if(jQuery("#edit-series").val()==0) {'.
					'jQuery("#edit-series-input").val(""); }'.
				'else {'.
					'jQuery("#edit-series-input").val(jQuery("#edit-series").find("option:selected").text());'.
					'}'.
				'});'. // end series.change function()
				'});'. // end document ready function()
				'','type' => 'inline'
		);
	}
	else {
		$form['series']=array(
			'#type' => 'hidden',
			'#value' => '0',
		);
		$form['series_input']=array(
			'#type' => 'textfield',
			'#title' => t('Series Name'),
			'#maxlength' => 30,
			'#size' => 40,
			'#required' => TRUE,
		);
	}
	$form['name']=array(
		'#type' => 'textfield',
		'#title' => t('Specification Name'),
		'#default_value' => isset($form_state['values']['name'])?$form_state['values']['name']:'',
		'#required' => TRUE,
		'#maxlength' => 50,
		'#size' => 40,
	);
	$form['end']=array(
		'#markup' => '</div>'
	);
	$form['c_series']=array('#type'=>'hidden','#value'=>$c_series);
	$form['c_name']=array('#type'=>'hidden','#value'=>$certificate?$certificate->name:'');
	$form['#attached']['js'][]= array('data'=>
		'jQuery(document).ready(function(){'.
			'if(jQuery(":input[name=\"c_series\"]").val()!="") jQuery("#edit-series").val(jQuery(":input[name=\"c_series\"]").val());'.
			'else jQuery("#edit-series").val("0");'.
			'jQuery("#edit-name").val(jQuery(":input[name=\"c_name\"]").val());'.
			'jQuery("#edit-series").change();'.
			'});'.
			'', 'type'=>'inline'
	);
	$form['save']=array(
		'#type' => 'submit',
		'#name' => 'save',
		'#value' => t('Save'),
	);
	if(isset($form_state['storage']['cid']))
		$form['cancel']=array(
			'#type' => 'submit',
			'#name' => 'cancel',
			'#value' => t('Cancel'),
			'#limit_validation_errors' => array(),
		);

	$form['existingnotice']=array(
		'#markup' => '<div style="margin-top: 20px;"><strong>'.t('Existing specifications').'</strong></div>',
	);
	$header=array(
		'series' => array('data' => t('Series'), 'field'=> 'series'),
		'name' => array('data' => t('Specification'), 'field'=> 'name'),
	);
	
	$query=db_select('certificates','c')->fields('c')
		->extend('TableSort')->orderByHeader($header)->extend('PagerDefault')->limit(20);
	$result=$query->execute();
	$form['existing']=array('#type'=>'fieldset');

	foreach($result as $r) {
		$form['existing']['cid'.$r->cid]=array('#type'=>'hidden','#value'=>$r->cid);
		$form['existing']['series'.$r->cid]=array('#markup'=>$r->series);
		$form['existing']['name'.$r->cid]=array('#markup'=>$r->name);
		$form['existing']['modify'.$r->cid]=array('#type'=>'submit','#submit'=>array('certificate_specification_form_modify_submit'),'#limit_validation_errors'=>array(),'#name'=>'modify_'.$r->cid,'#value'=>t('Modify'));
		$form['existing']['delete'.$r->cid]=array('#type'=>'submit','#submit'=>array('certificate_specification_form_delete_submit'),'#limit_validation_errors'=>array(),'#name'=>'delete_'.$r->cid,'#value'=>t('Delete'));
	}
	return $form;
}

function certificate_specification_form_validate($form, $form_state) {
	if($form_state['values']['series']=='0' && trim($form_state['values']['series_input'])==FALSE) {
		form_set_error('series_input', t('Series name is required.'));
		return;
	}
	$query=db_query('SELECT EXISTS(SELECT * FROM {certificates} WHERE series=:series AND name=:name AND cid <> :cid)',
		array(':series'=>$form_state['values']['series_input'], ':name' => $form_state['values']['name'],
			':cid'=> isset($form_state['storage']['cid'])?$form_state['storage']['cid']:0)
	);
	if($form_state['triggering_element']['#name']!='cancel' && $query->fetchField()) {
		form_set_error('name', t('This certificate already exists.'));
	}

}

function certificate_specification_form_submit($form, $form_state) {
	// if cid is not set, then add new specification
	if(!isset($form_state['storage']['cid'])) {
		$i=db_query('SELECT MAX(cid) FROM {certificates}')->fetchField();
		db_insert('certificates')->fields(array(
			'cid' => $i+1,
			'series' => $form_state['values']['series_input'],
			'name' => $form_state['values']['name'],
		))->execute();
		drupal_set_message(t('Specification added.'));
	} else {
		if($form_state['triggering_element']['#name']=='cancel') return;
		db_update('certificates')->fields(array(
			'series' => $form_state['values']['series_input'],
			'name' => $form_state['values']['name'],
		))->condition('cid',$form_state['storage']['cid'])->execute();
		drupal_set_message(t('Specification Saved.'));
	}
}

function certificate_specification_form_modify_submit($form, &$form_state) {
	$form_state['rebuild'] = TRUE;
	$form_state['storage']['cid']=substr($form_state['triggering_element']['#name'],7);
}

function certificate_specification_form_delete_submit($form, $form_state) {
	db_delete('certificates')->condition('cid',substr($form_state['triggering_element']['#name'],7))->execute();
	drupal_set_message(t('Specification Deleted.'));
}

function theme_certificate_specification_form($variables) {
	$form=$variables['form'];
	$output ='';
	$output.=drupal_render($form['addnotice']);
	$output.=drupal_render($form['series_caption']);
	$output.=drupal_render($form['series']);
	$output.=drupal_render($form['series_input']);
	$output.=drupal_render($form['end']);
	$output.=drupal_render($form['name']);
	$output.=drupal_render($form['save']);
	if(isset($form['cancel'])) $output.=drupal_render($form['cancel']);
	$output.=drupal_render($form['existingnotice']);
	$rows=array();
	foreach($form['existing'] as $key=>$val) {
		//var_dump($key);
		if(substr($key,0,3)!='cid') continue;
		$cid=substr($key,3);
		if(isset($form['cid']) && $form['cid']['#value']==$cid) {
			$rows[]=array(
				'data'=>array(
					drupal_render($form['existing']['series'.$cid]),
					drupal_render($form['existing']['name'.$cid]),
					t('Now Editing'),
				),
				'class'=>array('rowselected'),
			);
			unset($form['existing']['modify'.$cid]);
			unset($form['existing']['delete'.$cid]);
		} else {
			$rows[]=array(
				drupal_render($form['existing']['series'.$cid]),
				drupal_render($form['existing']['name'.$cid]),
				drupal_render($form['existing']['modify'.$cid]).drupal_render($form['existing']['delete'.$cid]),
			);
		}
	}
	$header=array(
		'series' => array('data' => t('Series'), 'field'=> 'series'),
		'name' => array('data' => t('Specification'), 'field'=> 'name'),
		'modify' => array('data' => t('Operations')),
	);
	$output.=theme('table', array('header'=>$header, 'rows'=>$rows, 'empty'=>t('No existing specifications.')));
	unset($form['existing']);
	$output.=drupal_render_children($form);
	$output .= theme('pager');
	return $output;
}

function certificate_operations_form($form, $form_state) {
	if(empty($form)) $form=array();
	if(!isset($form_state['storage']['operation'])) $form_state['storage']['operation']='0';
	$form['#attached']['css']=array(
		'.inline-element-div label, .inline-element-div select, .inline-element-div input, .inline-element-div div.form-item { display: inline; }' => array('type'=>'inline')
	);
	$query=db_query('SELECT o.oid, o.name as oname FROM {operations} o WHERE EXISTS(SELECT * FROM {certificates_operations} co WHERE co.oid=o.oid) ORDER BY o.oid DESC');
	$options=array(
		'0' => t('All operations'),
	);
	foreach($query as $r) {
		$options+=array(
			$r->oid => $r->oname
		);
	}
	$form['operation']=array(
		'#type' => 'select',
		'#title' => t('Select Operation'),
		'#options' => $options,
		'#prefix' => '<div class="inline-element-div">',
		'#default_value' => $form_state['storage']['operation'],
		'#value' => $form_state['storage']['operation'],
	);
	$form['refresh']=array(
		'#type' => 'submit',
		'#value' => t('Refresh'),
		'#suffix' => '</div>',
		'#limit_validation_errors' => array(),
		'#submit' => array('certificate_operations_form_refresh_submit')
	);
	$rdbo=db_query('SELECT * FROM {certificates} ORDER by cid');
	$certs=array();
	foreach($rdbo as $r) {
		$certs[$r->cid]=array('series'=>$r->series, 'name'=>$r->name);
	}
	$operations=array();
	if($form_state['storage']['operation']=='0')
		$header=array(
			'oid'=>array('data'=>t('Running Operations'), 'field'=>'oid', 'sort'=>'desc'),
			'cnames'=>t('Valid certificates'),
		);
	else $header=array('cnames'=>t('Valid certificates'));
	$query=db_select('operations','o')->fields('o',array('oid'));
	$query->addExpression('o.name','oname');
	$subquery=db_select('certificates_operations','co')->fields('co')->where('co.oid=o.oid');
	$query->exists($subquery);
	if($form_state['storage']['operation']!='0')
		$query->condition('o.oid',$form_state['storage']['operation']);
	else 
		$query=$query->extend('PagerDefault')->limit(5)->extend('TableSort')->orderByHeader($header);
	$rdbo=$query->execute();
	$rows=array();
	foreach($rdbo as $r) {
		$dbo=db_query('SELECT DISTINCT co.oid, c.name AS cname, c.series AS series '.
			'FROM {certificates_operations} co INNER JOIN {operations} o ON co.oid=o.oid '.
			'INNER JOIN {certificates} c ON co.cid=c.cid WHERE co.oid=:oid ORDER BY co.oid DESC, co.cid',
			array(':oid'=>$r->oid));
		$certs=array();
		foreach($dbo as $db) {
			$certs[$db->series][]=$db->cname;
		}
		$certificates='';
		foreach($certs as $series=>$cnames) {
			$certificates.=sprintf('%s<ul><li>%s</li></ul>', $series, implode($cnames,'</li><li>'));
		}
		if($form_state['storage']['operation']=='0')
			$rows[$r->oid]=array(
				'oid'=>$r->oname,
				'cnames'=>$certificates
			);
		else {
			foreach($certs as $series=>$cnames)
				foreach($cnames as $cname)
				$rows[]=array(sprintf('%s - %s', $series, $cname));
		}
	}
	if($form_state['storage']['operation']=='0') {
		$form['cert_operations']=array(
			'#type' =>'tableselect',
			'#multiple' => FALSE,
			'#header'=>$header,
			'#options'=>$rows,
			'#empty'=>t('No existing operations'),
			'#suffix' => theme('pager'),
		);
	}
	else  {
		drupal_set_title(sprintf('%s - %s', t('Operations Management'), $r->oname));
		$form['cert_operations_text']=array(
			'#type' =>'markup',
			'#markup' => theme('table', array('header' => $header, 'rows'=>$rows))
		);
		$form['cert_operations']=array(
			'#type' =>'hidden',
			'#value' => $form_state['storage']['operation']
		);
	}
	if(!empty($rows)) {
		$form['copytext']=array(
			'#type' => 'item',
			'#prefix' => '<hr/><div class="inline-element-div">',
			'#weight' => 10,
			'#title' => $form_state['storage']['operation']=='0'?t('Copy selected operation into'):t('Copy this operation into'),
			'#states' => array(
				'visible' => array(
					':input[name="cert_operations"]' => array('!value' => false),
				),
			),
		);
		$form['copyoperationselectyear']=array(
			'#type' => 'select',
			'#weight' => 11,
			'#title' => t('Year select'),
			'#title_display' => 'invisible',
			'#options' => array(
				date('Y') => date('Y').t('Year'),
				date('Y')+1 => (date('Y')+1).t('Year')
			),
			'#required' => TRUE,
			'#states' => array(
				'visible' => array(
					':input[name="cert_operations"]' => array('!value' => false),
				),
			),
		);
		$options=array(
			'02' => t('Feb (winter)'),
			'08' => t('Aug (summer)'),
			'01' => t('Jan'),
			'03' => t('Mar'),
			'04' => t('Apr'),
			'05' => t('May'),
			'06' => t('Jun'),
			'07' => t('Jul'),
			'09' => t('Sep'),
			'10' => t('Oct'),
			'11' => t('Nov'),
			'12' => t('Dec'),
		);
		$form['copyoperationselectmonth']=array(
			'#type' => 'select',
			'#weight' => 12,
			'#title' => t('Month select'),
			'#title_display' => 'invisible',
			'#options' => $options,
			'#required' => TRUE,
			'#states' => array(
				'visible' => array(
					':input[name="cert_operations"]' => array('!value' => false),
				),
			),
		);
		$form['copyexecute']=array(
			'#type' => 'submit',
			'#weight' => 13,
			'#value' => t('Copy and Generate new operation'),
			'#limit_validation_errors' => array(array('copyoperationselectyear'), array('copyoperationselectmonth'), array('cert_operations')),
			'#submit' => array('certificate_operations_form_copy_submit'),
			'#validate' => array('certificate_operations_form_copy_validate'),
			'#suffix' => '</div>',
			'#states' => array(
				'visible' => array(
					':input[name="cert_operations"]' => array('!value' => false),
				),
			),
		);
	}
	if($form_state['storage']['operation']=='0') {
		$form['newop']=array(
			'#type' => 'fieldset',
			'#weight' => 14,
			'#title' => t('Create new operation from scratch'),
			'#collapsible' => TRUE,
			'#collapsed' => TRUE,
		);
		$form['newop']['dateselecttext']=array(
			'#type' => 'item',
			'#required' => TRUE,
			'#title' => t('Create a new operation on'),
			'#prefix' => '<div class="inline-element-div">',
		);
		$form['newop']['year']=array(
			'#type' => 'select',
			'#title' => t('New operation on year'),
			'#title_display' => 'invisible',
			'#options' => array(
				date('Y') => date('Y').t('Year'),
				date('Y')+1 => (date('Y')+1).t('Year')
			),
			'#required' => TRUE,
		);
		$options=array(
			'02' => t('Feb (winter)'),
			'08' => t('Aug (summer)'),
			'01' => t('Jan'),
			'03' => t('Mar'),
			'04' => t('Apr'),
			'05' => t('May'),
			'06' => t('Jun'),
			'07' => t('Jul'),
			'09' => t('Sep'),
			'10' => t('Oct'),
			'11' => t('Nov'),
			'12' => t('Dec'),
		);
		$form['newop']['month']=array(
			'#type' => 'select',
			'#title' => t('New operation on month'),
			'#title_display' => 'invisible',
			'#options' => $options,
			'#required' => TRUE,
			'#suffix' => '</div><div class="inline-element-div">',
		);
		$options=array();
		$rdbo=db_query('SELECT * FROM {certificates} ORDER by cid');
		foreach($rdbo as $r) {
			$options[$r->cid] = sprintf('%s - %s', $r->series, $r->name);
		}
		$form['newop']['cert']=array(
			'#type' => 'select',
			'#title' => t('And set certificate'),
			'#required' => TRUE,
			'#options'=>$options,
			'#suffix' => '</div>',
		);
		$form['newop']['create']=array(
			'#type' => 'submit',
			'#value' => t('Create new operation'),
			'#submit' => array('certificate_operations_form_create_submit'),
			'#limit_validation_errors'=>array(array('year'), array('month'), array('cert')),
		);
	} else {
		$query=db_query(
			'SELECT * FROM {certificates} c WHERE NOT EXISTS(SELECT * FROM {certificates_operations} co WHERE co.cid=c.cid AND co.oid=:oid)',
			array(':oid'=>$form_state['storage']['operation']));
		$options=array();
		foreach($query as $r) {
			$options[$r->cid] = sprintf('%s - %s', $r->series, $r->name);
		}
		if(!empty($options)) {
			$form['certselect']=array(
				'#type'=>'select',
				'#weight' => 8,
				'#options'=>$options,
				'#required'=>TRUE,
				'#title'=>t('Certificate to add'),
				'#title_display'=>'invisible',
				'#prefix' => '<hr/><div class="inline-element-div">',
			);
			$form['addcert']=array(
				'#weight' => 9,
				'#type'=>'submit',
				'#value'=>t('Add selected certificate into this operation'),
				'#submit' => array('certificate_operations_form_addcert_submit'),
				'#limit_validation_errors'=>array(array('certselect')),
				'#suffix' => '</div>',
			);
		}
	}
	return $form;
}

function certificate_operations_form_refresh_submit($form, &$form_state) {
	$form_state['storage']['operation']=$_POST['operation'];
	$form_state['rebuild']=TRUE;
}

function certificate_operations_form_copy_validate($form, $form_state) {
	if(empty($form_state['values']['cert_operations']))
		form_set_error('cert_operations', t('!name field is required.', array('!name'=>t('Base operation'))));
}

function certificate_operations_form_copy_submit(&$form, &$form_state) {
	$i=0;
	$oid=$form_state['values']['copyoperationselectyear'].$form_state['values']['copyoperationselectmonth'];
	if($form_state['values']['copyoperationselectmonth']=='02')
		$oname=t('!year winter',array('!year'=>$form_state['values']['copyoperationselectyear']));
	elseif ($form_state['values']['copyoperationselectmonth']=='08')
		$oname=t('!year summer',array('!year'=>$form_state['values']['copyoperationselectyear']));
	else
		$oname=t('!year !month',array('!year'=>$form_state['values']['copyoperationselectyear'], '!month'=>(int)$form_state['values']['copyoperationselectmonth']));
	db_merge('operations')->key(array('oid'=>$oid))->insertFields(array(
		'oid' => $oid,
		'year' => $form_state['values']['copyoperationselectyear'],
		'name' => $oname
	))->execute();

	$dbo=db_query('SELECT cid FROM {certificates_operations} WHERE oid=:oid', array(':oid'=>$form_state['values']['cert_operations']));
	foreach($dbo as $r) {
		$result=db_merge('certificates_operations')->key(array('oid'=>$oid, 'cid'=>$r->cid))->insertFields(array(
			'oid' => $oid,
			'cid' => $r->cid,
			'visible' => 0,
			'status' => 0,
		))->execute();
		if($result==MergeQuery::STATUS_INSERT) $i++;
	}
	if($i>0) {
		drupal_set_message(t('Copied !num certificates into !oname', array('!num'=>$i, '!oname'=>$oname)));
		$form_state['storage']['operation']=$oid;
		$form_state['rebuild']=TRUE;
	}
}

function certificate_operations_form_addcert_submit($form, &$form_state) {
	$i=db_merge('certificates_operations')
		->key(array('oid'=>$form_state['storage']['operation'], 'cid'=>$form_state['values']['certselect']))
		->insertFields(array(
			'oid' => $form_state['storage']['operation'],
			'cid' => $form_state['values']['certselect'],
			'visible' => 0,
			'status' => 0,
		))->execute();
	if($i==MergeQuery::STATUS_INSERT) 
		drupal_set_message(t('Certificate added.'));
	$form_state['rebuild']=TRUE;
}

function certificate_operations_form_create_submit($form, &$form_state) {
	$oid=$form_state['values']['year'].$form_state['values']['month'];
	if($form_state['values']['month']=='02')
		$oname=t('!year winter',array('!year'=>$form_state['values']['year']));
	elseif ($form_state['values']['month']=='08')
		$oname=t('!year summer',array('!year'=>$form_state['values']['year']));
	else
		$oname=t('!year !month',array('!year'=>$form_state['values']['year'], '!month'=>(int)$form_state['values']['month']));
	db_merge('operations')->key(array('oid'=>$oid))->insertFields(array(
		'oid' => $oid,
		'year' => $form_state['values']['year'],
		'name' => $oname
	))->execute();
	$i=db_merge('certificates_operations')
		->key(array('oid'=>$oid, 'cid'=>$form_state['values']['cert']))
		->insertFields(array(
			'oid' => $oid,
			'cid' => $form_state['values']['cert'],
			'visible' => 0,
			'status' => 0,
		))->execute();
	if($i==MergeQuery::STATUS_INSERT) {
		drupal_set_message(t('Certificate added into !oname',array('!oname'=>$oname)));
		$form_state['storage']['operation']=$oid;
	}
	$form_state['rebuild']=TRUE;
}

function certificate_operations_load($cid, $oid=NULL) {
	if(!empty($oid))
		$query=db_query('SELECT co.*, c.name AS cname, o.name as oname, c.series FROM {certificates_operations} co '.
			'INNER JOIN {operations} o ON o.oid=co.oid '.
			'INNER JOIN {certificates} c ON c.cid=co.cid '.
			'WHERE co.cid=:cid AND co.oid=:oid',
			array(':cid'=>$cid, ':oid'=>$oid)
		);
	else 
		$query=db_query('SELECT co.*, c.name AS cname, o.name as oname, c.series FROM {certificates_operations} co '.
			'INNER JOIN {operations} o ON o.oid=co.oid '.
			'INNER JOIN {certificates} c ON c.cid=co.cid '.
			'WHERE co.coid=:coid',
			array(':coid'=>$cid)
		);
	return $query->fetchObject();
}

?>
