<?php

/*
 * This file is licensed under GPLv2+.
*/

function _cert_issue_get_status_text($status) {
	switch($status) {
		case 0:
			return t('Normal');
		case 1:
			return t('Under approved');
		default:
			return t('Unknown');
	}
}

/**
 * Implementation of hook_help().
 */
function cert_issue_help($path, $arg) {
	switch ($path) {
		case 'user/certs':
			$output = t('List my certificates, clamed and issued.');
			break;
		case 'user/claim':
			$output = t('Claim system preloaded certificates.');
			break;
		case 'certificate/massiveupload': 
			$output = t('If you want to massive upload the certificates which are already issued, please use this feature.');
			break;
	}
	if (isset($output))
		return $output;
}

/**
 * Implementation of hook_permission().
 */
function cert_issue_permission() {
	return array(
		'preload certificates' => array(
			'title' => t('Upload Massive certificates already issued'),
		),
		'claim certificates' => array(
			'title' => t('Claim already issued certificates'),
		),
	);
}

/**
 * Implementation of hook_menu().
 */
function cert_issue_menu() {
	$items=array();
	$items['certificate/massiveupload'] = array(
		'title' => 'Upload Massive certificates already issued',
		'weight' => 3,
		'page callback' => 'drupal_get_form',
		'page arguments' => array('cert_issue_massiveupload_form'),
		'access callback' => 'user_access',
		'access arguments'=> array('preload certificates'),
	);
	$items['user/certs'] = array(
		'title' => 'My certificates',
		'menu_name' => 'user-menu',
		'plid' => '0',
		'weight' => -10,
		'page callback' => 'cert_issue_user_certs_page',
		'access callback' => 'cert_issue_user_certs_page_access',
	);
	$items['user/claim'] = array(
		'title' => 'Claim already issued certificates',
		'menu_name' => 'user-menu',
		'plid' => '0',
		'weight' => -9,
		'page callback' => 'drupal_get_form',
		'page arguments' => array('cert_issue_user_claim_form'),
		'access callback' => 'cert_issue_user_claim_access',
	);
	return $items;
}

function _cert_issue_is_file_spreadsheet($file) {
	if(!preg_match('/\.xlsx{0,1}$/i', $file->filename)) return array();
	include_once(DRUPAL_ROOT.'/sites/all/libraries/phpexcel/PHPExcel.php');
	$result=0;
	switch($format=PHPExcel_IOFactory::identify($file->uri)) {
		case 'Excel5':
		case 'Excel2007':
			$objReader = PHPExcel_IOFactory::createReader($format);
			$objReader->setReadDataOnly(true);
			$objPHPExcel = $objReader->load($file->uri);
			$result=$objPHPExcel->getSheetCount()>0;
			$objPHPExcel->disconnectWorksheets();
			unset($objPHPExcel);
			unset($objReader);
	}
	if($result) return array();
	else return array(t('It is not a valid spreadsheet file.'));
}

function cert_issue_massiveupload_form($form, $form_state) {
	$form=array();
	if(!isset($form_state['storage']['step'])) {
		unset($form_state['storage']);
		$form_state['storage']['step']=1;
	}

	if($form_state['storage']['step']==1)
		$form=cert_issue_massiveupload_form_step1($form, $form_state);
	else if($form_state['storage']['step']==2)
		$form=cert_issue_massiveupload_form_step2($form, $form_state);
	return $form;
}

function cert_issue_massiveupload_form_step1($form, $form_state) {
	$options=array();
	for($i=1980;$i<=(int)date('Y');$i++) {
		$options+=array($i.'02'=>t('!year winter',array('!year'=>$i)));
		$options+=array($i.'08'=>t('!year summer',array('!year'=>$i)));
	}
	$form['organization']=array(
		'#type' => 'select',
		'#title' => t('Organization'),
		'#required' => TRUE,
		'#options' => $options,
		'#default_value' => isset($form_state['storage']['oid'])?$form_state['storage']['oid']:NULL,
	);
	$query=db_select('certificates','c')->fields('c')->orderBy('c.cid');
	$rdbo=$query->execute();
	$options=array();
	foreach($rdbo as $r) {
		$options+=array(
			$r->cid=>sprintf('%s %s', $r->series, $r->name),
		);
	}
	$form['certificatetype']=array(
		'#type' => 'select',
		'#title' => t('Certificate Type'),
		'#required' => TRUE,
		'#options' => $options,
		'#default_value' => isset($form_state['storage']['cid'])?$form_state['storage']['cid']:NULL,
	);
	$form['autocreate']=array(
		'#type' => 'checkbox',
		'#title' => t('Auto create in-exist certificate operations.'),
		'#default_value' => TRUE,
	);
	$form['massivefile']=array(
		'#type' => 'managed_file',
		'#title' => t('Data file'),
		'#required' => TRUE,
		'#default_value' => isset($form_state['storage']['fid'])?$form_state['storage']['fid']:31,
		'#description' => t('Only .xls and .xlsx spreadsheets are supported.'),
		'#upload_validators' => array('file_validate_extensions' => array('xls xlsx'), '_cert_issue_is_file_spreadsheet'=>array()),
	);
	$form['save']=array(
		'#type' => 'submit',
		'#value' => t('Next Step >'),
	);
	$form['#validate'][]='cert_issue_massiveupload_form_step1_validate';
	$form['#submit'][]='cert_issue_massiveupload_form_step1_submit';
	return $form;
}

function cert_issue_massiveupload_form_step1_validate($form, $form_state) {
	if(!$form_state['values']['autocreate'] &&
		certificate_operations_load($form_state['values']['certificatetype'], $form_state['values']['organization'])) {
			form_set_error('organization',t('The selected organization does not contain selected certificate.'));
			form_set_error('certificatetype');
	}
}

function cert_issue_massiveupload_form_step1_submit($form, &$form_state) {
	if($form_state['values']['autocreate']) {
		// First merge th organizations table
		$year=substr($form_state['values']['organization'],0,4);
		$name=substr($form_state['values']['organization'],4,2)=='02'?t('!year winter',array('!year'=>$year)):t('!year summer',array('!year'=>$year));
		db_merge('operations')->key(array('oid'=>$form_state['values']['organization']))->fields(array(
			'year' => $year,
			'name' => $name,
		))->execute();
		// Then merge th c_i table
		if(!certificate_operations_load($form_state['values']['certificatetype'], $form_state['values']['organization'])) {
			db_insert('certificates_operations')->fields(array(
				'oid' => $form_state['values']['organization'],
				'cid' => $form_state['values']['certificatetype'],
				'visible' => 1,
				'status' => 0,
			))->execute();
		}
	}
	$form_state['storage']['oid']=$form_state['values']['organization'];
	$form_state['storage']['cid']=$form_state['values']['certificatetype'];
	$form_state['storage']['fid']=$form_state['values']['massivefile'];
	$form_state['rebuild']=TRUE;
	$form_state['storage']['step']=2;
}

function cert_issue_massiveupload_form_step2($form, $form_state) {
	drupal_add_css(
		'.inline-element-div label, .inline-element-div select, .inline-element-div input, .inline-element-div div.form-item { display: inline;}'.
		'body.sidebar-first div #post-content { width: 960px; }'.
		'div#sidebar { display: none; }',
		'inline'
	);
	include_once(DRUPAL_ROOT.'/sites/all/libraries/phpexcel/PHPExcel.php');
	
	$co=certificate_operations_load($form_state['storage']['cid'], $form_state['storage']['oid']);
	$form['description']=array(
		'#type' => 'item',
		'#requires' => TRUE,
		'#title' => t('Selected organization'),
		'#markup' => t('!org !series !cname',
			array('!org'=>$co->oname, '!series'=>$co->series, '!cname'=>$co->cname)),
	);

	$options=drupal_map_assoc(range(1,10));
	$form['prefix']=array(
		'#markup' => '<div class="inline-element-div">',
	);
	$i=1;
	$form['beginrow']=array(
		'#type' => 'select',
		'#title' => t('Data started at row'),
		'#description' => t('Please select where the data series begins, not the row where header locates.'),
		'#options' => $options,
		'#required' => TRUE,
		'#default_value' => isset($form_state['storage']['beginrow'])?$form_state['storage']['beginrow']:'2',
	);
	$options=drupal_map_assoc(range('A','Z'));
	$options_with_none=array('0'=>t('None'))+$options;
	$form['middilefix'.$i++]=array(
		'#markup' => '</div><div class="inline-element-div">',
	);
	$form['ticket_number_col']=array(
		'#type' => 'select',
		'#title' => t('Ticket number at col'),
		'#options' => $options_with_none,
		'#required' => TRUE,
		'#default_value' => isset($form_state['storage']['ticket_number_col'])?$form_state['storage']['ticket_number_col']:'0',
	);
	$form['middilefix'.$i++]=array(
		'#markup' => '</div><div class="inline-element-div">',
	);
	$form['certid_col']=array(
		'#prefix' =>'<div style="width: 400px; display: inline; left: 400px;">',
		'#suffix' =>'</div>',
		'#type' => 'select',
		'#title' => t('Certificate number at col'),
		'#options' => $options,
		'#required' => TRUE,
		'#default_value' => isset($form_state['storage']['certid_col'])?$form_state['storage']['certid_col']:NULL,
	);
	$form['middilefix'.$i++]=array(
		'#markup' => '</div><div class="inline-element-div">',
	);
	$form['name']=array(
		'#type' => 'select',
		'#title' => t('Real name at col'),
		'#options' => $options,
		'#required' => TRUE,
		'#default_value' => isset($form_state['storage']['name_col'])?$form_state['storage']['name_col']:NULL,
	);
	$form['middilefix'.$i++]=array(
		'#markup' => '</div><div class="inline-element-div">',
	);
	$form['pyname']=array(
		'#type' => 'select',
		'#title' => t('Pinyin name at col'),
		'#options' => $options_with_none,
		'#required' => TRUE,
		'#default_value' => isset($form_state['storage']['pyname_col'])?$form_state['storage']['pyname_col']:'0',
	);
	$form['middilefix'.$i++]=array(
		'#markup' => '</div><div class="inline-element-div">',
	);
	$form['gender']=array(
		'#type' => 'select',
		'#title' => t('Gender at col'),
		'#options' => $options,
		'#required' => TRUE,
		'#default_value' => isset($form_state['storage']['gender_col'])?$form_state['storage']['gender_col']:NULL,
	);
	$form['middilefix'.$i++]=array(
		'#markup' => '</div><div class="inline-element-div">',
	);
	$form['birthdate']=array(
		'#type' => 'select',
		'#title' => t('Birth date at col'),
		'#options' => $options,
		'#required' => TRUE,
		'#default_value' => isset($form_state['storage']['birthdate_col'])?$form_state['storage']['birthdate_col']:NULL,
	);
	$form['middilefix'.$i++]=array(
		'#markup' => '</div><div class="inline-element-div">',
	);
	$form['idcard_type']=array(
		'#type' => 'select',
		'#title' => t('ID Card type at col'),
		'#options' => $options_with_none,
		'#required' => TRUE,
		'#default_value' => isset($form_state['storage']['idcard_type_col'])?$form_state['storage']['idcard_type_col']:'0',
	);
	$form['middilefix'.$i++]=array(
		'#markup' => '</div><div class="inline-element-div">',
	);
	$form['idcardnumber']=array(
		'#type' => 'select',
		'#title' => t('ID Card nubmer at col'),
		'#options' => $options_with_none,
		'#required' => TRUE,
		'#default_value' => isset($form_state['storage']['idcardnumber_col'])?$form_state['storage']['idcardnumber_col']:'0',
	);
	$form['suffix']=array(
		'#markup' => '</div>',
	);

	// Display raw data for the spreadsheet
	$file=file_load($form_state['storage']['fid']);
	$format=PHPExcel_IOFactory::identify($file->uri);
	$objReader = PHPExcel_IOFactory::createReader($format);
	$objReader->setReadDataOnly(true);
	$objPHPExcel = $objReader->load($file->uri);
	$origrows=$objPHPExcel->getActiveSheet()->rangeToArray(
		'A1:L10',	// The worksheet range that we want to retrieve
		'',			// Value that should be returned for empty cells
		TRUE,		// Should formulas be calculated (the equivalent of getCalculatedValue() for each cell)
		TRUE,		// Should values be formatted (the equivalent of getFormattedValue() for each cell)
		FALSE		// Should the array be indexed by cell row and cell column
	);
	$rows=array();
	$i=1;
	foreach($origrows as $row) {
		array_unshift($row, array('data'=>$i++, 'header'=>TRUE));
		$rows[]=$row;
	}
	$header=range('A','L');
	array_unshift($header, sprintf('[%s]',$objPHPExcel->getActiveSheet()->getTitle()));
	$objPHPExcel->disconnectWorksheets();
	unset($objPHPExcel);
	unset($objReader);
	$form['demotitle']=array(
		'#type' => 'item',
		'#title' => t('Raw data for @filename', array('@filename'=>$file->filename)),
	);
	$form['demo']=array(
		'#markup' => theme('table',array('header'=>$header, 'rows'=>$rows)),
	);

	$form['previous']=array(
		'#type' => 'submit',
		'#value' => t('< Previous Step'),
		'#submit' => array('cert_issue_massiveupload_form_step2_submit_previous'),
		'#limit_validation_errors' => array(),
	);
	$form['submit']=array(
		'#type' => 'submit',
		'#value' => t('Upload data file and save'),
	);

	$form['#validate'][]='cert_issue_massiveupload_form_step2_validate';
	$form['#submit'][]='cert_issue_massiveupload_form_step2_submit';
	return $form;
}

function cert_issue_massiveupload_form_step2_validate($form, &$form_state) {}

function cert_issue_massiveupload_form_step2_submit($form, &$form_state) {}

function cert_issue_massiveupload_form_step2_submit_previous($form, &$form_state) {
	$form_state['rebuild']=TRUE;
	$form_state['storage']['step']=1;
}

function cert_issue_user_certs_page_access() {
	$user=$GLOBALS['user'];
	if(student_load($user)) {
		return db_select('certificates_issues','ci')->fields('ci')->condition('ci.claimedby',$user->uid)
			->countQuery()->execute()->fetchField();
	} else return FALSE;
}

function cert_issue_user_certs_page() {
	$user=$GLOBALS['user'];
	$query=db_select('certificates_issues','ci')
		->condition('ci.claimedby',$user->uid)
		->fields('ci',array('certid','issuedate','status'));
	$query->innerJoin('certificates_operations','co','co.coid=ci.coid');
	$query->innerJoin('operations','o','co.oid=o.oid');
	$query->innerJoin('certificates','c','co.cid=c.cid');
	$query->addExpression('o.name','oname');
	$query->addExpression('c.name','cname');
	$query->fields('c',array('series'));
	$header=array(
		array('data'=>t('Organizations series'),'field'=>'o.oid'),
		array('data'=>t('Series'), 'field'=>'c.series'),
		array('data'=>t('Specification name')),
		array('data'=>t('Certificate no'), 'field'=>'ci.certid'),
		array('data'=>t('Status'), 'field'=>'ci.status'),
	);
	$rows=array();
	$query->extend('TableSort')->orderByHeader($header)->extend('PagerDefault')->limit(20);
	$output = '';
	$rdbo=$query->execute();
	foreach($rdbo as $r) {
		$rows[]=array(
			$r->oname,
			$r->series,
			$r->cname,
			$r->certid,
			_cert_issue_get_status_text($r->status),
		);
	}
	$output .= theme('table', array('header'=>$header, 'rows'=>$rows));
	$output .= theme('pager');

	if(cert_issue_user_claim_access())
		$output .= '<div>'.l(t('Want claim more certificates?'), 'user/claim').'</div>';
	return $output;
}

function cert_issue_user_claim_access() {
	$user=$GLOBALS['user'];
	if(isset($user->uid) && $user->uid) {
		$student=student_load($user);
		if(!$student) return FALSE;
		$query=db_select('certificates_issues','ci')
			->condition('ci.claimedby',0)
			->condition('ci.gender',$student->gender)
			->fields('ci');
		if($student->exname) {
			$condition=db_or()->condition('ci.name',$student->name)->condition('ci.name',$student->exname);
			$query->condition($condition);
			unset($condition);
		} else
			$query->condition('ci.name',$student->name);
		$query->condition('ci.date_of_birth',substr($student->date_of_birth,0,6));
		$query->innerJoin('certificates_operations','co','co.coid=ci.coid');
		$query->innerJoin('operations','o','co.oid=o.oid');
		$query->innerJoin('certificates','c','co.cid=c.cid');
		return $query->countQuery()->execute()->fetchField();
	} else return FALSE;
}

function cert_issue_user_claim_form($form, $form_state) {
	$student=student_load($GLOBALS['user']);
	$form=array();
	$form['description']=array(
		'#markup' => t('Please select the certificate you wan to claim. ').
			t('If your certificates is not listed here, please contact us.').'<br/>'.
			t('Tip: if you have changed your name in the pass, please put it down at !url, so that we could make it recognized.',
				array('!url'=>l(t('here'), 'user/'.$student->uid.'/edit'))),
	);
	$header=array(
		t('Organizations series'),
		t('Specification name'),
		t('Certificate no'),
		t('True name'),
		t('Birth date'),
	);
	$query=db_select('certificates_issues','ci')
		->condition('ci.claimedby',0)
		->condition('ci.gender',$student->gender)
		->fields('ci',array('ciid','certid','name','date_of_birth'));
	if($student->exname) {
		$condition=db_or()->condition('ci.name',$student->name)->condition('ci.name',$student->exname);
		$query->condition($condition);
		unset($condition);
	} else
		$query->condition('ci.name',$student->name);
	$query->condition('ci.date_of_birth',substr($student->date_of_birth,0,6));
	$query->innerJoin('certificates_operations','co','co.coid=ci.coid');
	$query->innerJoin('operations','o','co.oid=o.oid');
	$query->innerJoin('certificates','c','co.cid=c.cid');
	$query->addExpression('o.name','oname');
	$query->addExpression('c.name','cname');
	$query->fields('c',array('series'));
	$query->orderBy('o.year')->orderBy('o.oid')->orderBy('c.cid');

	$rows=array();
	$rdbo=$query->execute();
	foreach($rdbo as $r) {
		$rows[$r->ciid]=array(
			$r->oname,
			$r->cname,
			$r->certid,
			$r->name,
			$r->date_of_birth,
		);
	}
	$form['certs']=array(
		'#type' => 'tableselect',
		'#header' => $header,
		'#options' => $rows,
		'#required' => empty($rows),
		'#empty' => t('No available certificates for you to claim.'),
	);
	if(!empty($rows))
		$form['claim']=array(
			'#type' => 'submit',
			'#value' => t('Claim selected certificates & Proceed'),
		);
	return $form;
}

function cert_issue_user_claim_form_submit($form, &$form_state) {
	$certs=array_keys(array_filter($form_state['values']['certs']));
	$i=0;
	foreach($certs as $cert) {
		$i+=db_update('certificates_issues')->condition('claimedby',0)->condition('ciid',$cert)->fields(array(
			'claimedby' => $GLOBALS['user']->uid,
		))->execute();
	}
	if($i)
		drupal_set_message(t('You claimed !num certificates.', array('!num'=>$i)));
	if(!cert_issue_user_claim_access())
		$form_state['redirect']='user/certs';
}
?>
