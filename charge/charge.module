<?php

define('onlinecharge_PAYMENT_SUCCESS', 1);
define('onlinecharge_PAYMENT_PROCESSING', 0);
define('onlinecharge_PAYMENT_FAILED', -1);
define('onlinecharge_PAYMENT_INVALID', -2);

/**
 * Implementation of hook_requirements().
 */
function charge_requirements($phase) {
	$requirements = array(); 

	if ($phase == 'runtime') {
		$t = get_t();
		$num=db_select('orders','o')->fields('o')->countQuery()->execute()->fetchField();
		$succeeded=db_select('orders','o')->fields('o')->condition('o.status',100)->countQuery()->execute()->fetchField();
		$requirements['onlinecharge'] = array(
			'title' => t('Online Charging orders'),
			'severity' => REQUIREMENT_INFO,
			'value' => t('@num orders have been created, and @succeeded of them succeeded', array('@num' => number_format($num), '@succeeded'=>number_format($succeeded))),
		);
	}
	return $requirements;
}

/**
 * Implements hook_help().
 */
function charge_help($path, $arg) {
	switch ($path) {
		case 'charge/fee':
			$output = t('Define charging fees and standard.');
			break;
		case 'charge/log':
			$output = t('Check payment logs.');
			break;
		case 'user/payment':
			$output = '<p>'.t('This page will list all your online payment orders.').'</p>';
			break;
		default:
			return;
	}
	return '<p>'.$output.'</p>';
}

/**
 * Implements hook_permission
 */
function charge_permission() {
	return array(
		'administer charging' => array(
			'title' => t('Administrater charging fees and view logs'),
		),
		'use online charging' => array(
			'title' => t('Use online charging feature'),
		),
	);
}

function charge_theme() {
	return array(
		'charge_fee' => array(
			'render element' => 'form', 
		),
		'charge_user_orders' => array(
			'render element' => 'form', 
		),
		'charge_log_form' => array(
			'render element' => 'form', 
		),
	);
}

/**
 * Implements hook_menu().
 */
function charge_menu() {
	$items['charge'] = array(
		'title' => 'Online charging',
		'description' => "Features regarding online charging.",
		'page callback' => 'charge_admin_page',
		'access callback' => 'user_access',
		'access arguments' => array('administer charging'),
		'expanded' => TRUE,
	);
	$items['charge/fee'] = array(
		'title' => 'Fees',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('charge_fee'),
		'weight' => 1,
		'description' => "Define charging fees and standard.",
		'access callback' => 'user_access',
		'access arguments' => array('administer charging'),
	);
	$items['charge/log'] = array(
		'title' => 'Payment Logs',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('charge_log_form'),
		'weight' => 2,
		'description' => "Check payment logs.",
		'access callback' => 'user_access',
		'access arguments' => array('administer charging'),
	);
	$items['charge/log/%order'] = array(
		'type' => MENU_VISIBLE_IN_BREADCRUMB,
		'title callback' => 'charge_log_form_detail_form_title',
		'title arguments' => array(2),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('charge_log_form_detail',2),
		'weight' => 2,
		'description' => "Check payment logs.",
		'access callback' => 'user_access',
		'access arguments' => array('administer charging'),
	);
	$items['user/payment'] = array(
		'title' => 'Charging Center',
		'menu_name' => 'user-menu',
		'plid' => '0',
		'weight' => -10,
		'page callback' => 'drupal_get_form',
		'page arguments' => array('charge_user_orders'),
		'access callback' => 'charge_user_access',
	);
	return $items;
}

function charge_admin_page() {
	$item = menu_get_item();
	$content = system_admin_menu_block($item);
	return theme('admin_block_content', array('content' => $content));
}

/**
 * Implements hook_block_info().
 */
function charge_block_info() {
	$result=array();
	
	$result['gateways'] = array(
		'info' => t('Supported Gateways'),
		'cache' => DRUPAL_CACHE_GLOBAL,
	);
	return $result;
}

/**
 * Implements hook_block_view().
 */
function charge_block_view($delta = '') {
	global $user;
	$block = array();
	switch ($delta) {
		case 'gateways':
			$block['subject'] = t('Supported Gateways');
			$gateways=module_invoke_all('paymentgatewayinfo');
			$options=array();
			foreach($gateways as $k => $v) {
				if(module_hook($k, 'submit_form_submit'))
					if(is_array($v))
						$options[$k]=sprintf('<a href="%s" target="_blank"><img src="/%s"/></a>', $v['url'], $v['front']);
					else
						$options[$k]='<img src="/'.$v.'"/>';
			}
			$block['content'] = '<div style="text-align: center">'.implode('<br/>',$options).'</div>';
			return $block;
			break;
  		}
}

function charge_fee($form, &$form_state) {
	$form=array();
	$modules=array();
	$accounts=array();
	foreach(module_implements('charge_accounts') as $module) {
		$modules[]=$module;
		$accounts[$module]=module_invoke($module, 'charge_accounts');
	}
	$form['modules']=array('#type'=>'hidden', '#value'=>json_encode($modules));
	$form['accounts']=array('#type'=>'hidden', '#value'=>json_encode($accounts));
	foreach($modules as $module) {
		foreach($accounts[$module] as $key=>$value) {
			$form[$module.'_'.$key]=array(
				'#type' => 'textfield',
				'#field_suffix' => t('RMB'),
				'#description' => t($value),
				'#required' => TRUE,
				'#size' => 10,
				'#default_value' => db_query('SELECT amount FROM {charging_accounts} WHERE module=:module AND account=:account',
					array(':module'=>$module, ':account'=>$key))->fetchField(),
				'#maxlength' => 10,
				'#attributes' => array('class'=>array('numeric'), 'style'=>array('text-align: right;')),
			);
		}
	}
	$form['save']=array(
		'#type' => 'submit',
		'#value' => t('Save'),
	);
	return $form;
}

function theme_charge_fee($variables) {
	$form=$variables['form'];
	$output='';
	$header=array(
		t('Charging account'),
		t('Amount'),
	);
	$rows=array();
	$accounts=json_decode($form['accounts']['#value']);
	foreach($accounts as $module => $account) {
		foreach($account as $key=>$value) {
			$description=$form[$module.'_'.$key]['#description'];
			unset($form[$module.'_'.$key]['#description']);
			$rows[]=array(
				$description,
				drupal_render($form[$module.'_'.$key]),
			);
		}
	}
	$output.=theme('table', array('header'=>$header,'rows'=>$rows));
	unset($form['modules']);
	unset($form['accounts']);
	$output.=drupal_render_children($form);
	return $output;
}

function charge_fee_validate($form, $form_state) {
	foreach($form_state['values'] as $key => $value) {
		if(isset($form[$key]['#type']) && $form[$key]['#type']=='textfield') {
			var_dump($value);
			if(!preg_match('/^[0-9]+$/',$value))
				form_set_error($key, t('!field is not a valid integer value.',array('!field'=>$form[$key]['#description'])));
		}
	}
}

function charge_fee_submit($form, $form_state) {
	$accounts=json_decode($form['accounts']['#value']);
	foreach($accounts as $module => $account) {
		foreach($account as $key=>$value) {
			db_merge('charging_accounts')->key(array('module'=>$module, 'account'=>$key))->fields(array(
				'module'=>$module,
				'account'=>$key,
				'amount'=>$form_state['values'][$module.'_'.$key]
			))->execute();
		}
	}
	drupal_set_message(t('Charging accounts saved.'));
}

function charge_form_cert_issue_exchange_rolls_form_alter(&$form, &$form_state) {
	$form['addrolls']['#description']=t('Current charge amount: &yen;!num.', array(
		'!num' => number_format(db_query('SELECT amount FROM {charging_accounts} WHERE module=\'cert_issue\' AND account=\'certexchange\'')->fetchField()))
	);
	if(user_access('administer charging'))
		$form['addrolls']['#description'].=l(t('Modify?'),'charge/fee');
}

function charge_user_access() {
	if($GLOBALS['user']->uid==0) return FALSE;
	return (db_query('SELECT EXISTS( SELECT * FROM {orders} WHERE uid=:uid)', array(':uid'=>$GLOBALS['user']->uid))->fetchField());
}

function charge_form_alter(&$form, &$form_state, $form_id) {
	if(isset($form_state['storage']['charge'])) {
		$form['#submit'][]='charge_form_alter_submit';
	}
}

function charge_form_alter_submit(&$form, &$form_state) {
	$obj=db_query('SELECT * FROM {charging_accounts} WHERE module=:module AND account=:account',
		array(':module'=>$form_state['storage']['charge']['module'],':account'=>$form_state['storage']['charge']['account']))
		->fetchObject();
	if(!$obj) return;
	$r=db_merge('orders')->key(array('uid'=>$GLOBALS['user']->uid, 'ordertitle'=>$form_state['storage']['charge']['ordertitle']))
		->insertFields(array(
		'orderno' => sprintf('%s%06d',date('YmdHms'),mt_rand(0,999999)),
		'uid' => $GLOBALS['user']->uid,
		'ordertime' => time(),
		'standard' => $obj->caid,
		'ordertitle' => $form_state['storage']['charge']['ordertitle'],
		'amount' => $obj->amount,
		'status' => $obj->amount > 0,
	))->execute();
	if($r) {
		$form_state['redirect']='user/payment';
		drupal_set_message(t('Unpaid order generated.'));
	}
}

function charge_user_orders($form, $form_state) {
	$user=$GLOBALS['user'];
	$rdbo=db_query('SELECT * FROM {orders} WHERE uid=:uid ORDER BY ordertime',array(':uid'=>$user->uid));
	$form=array();
	$orders=array();
	foreach($rdbo as $r) {
		$orders[]=$r->orderno;
		$form['order_'.$r->orderno]=array(
			'#type' => 'fieldset',
		);
		$form['order_'.$r->orderno]['orderno']=array(
			'#type' => 'item',
			'#markup' => $r->orderno,
		);
		$form['order_'.$r->orderno]['ordertitle']=array(
			'#type' => 'item',
			'#markup' => $r->ordertitle,
		);
		$form['order_'.$r->orderno]['amountdue']=array(
			'#type' => 'item',
			'#markup' => sprintf('&yen;%d', $r->amount),
		);
		switch ($r->status) {
			case 100:
				$form['order_'.$r->orderno]['operation']=array(
					'#type' => 'markup',
					'#markup' => t('Succeeded'),
				);
				break;
			case 0:
				$form['order_'.$r->orderno]['operation']=array(
					'#type' => 'submit',
					'#name' => 'paybutton_'.$r->orderno,
					'#value' => t('Pay'),
				);
		}
		$process=db_query('SELECT amount FROM {orders_process} WHERE orderno=:orderno AND amount<>0 ORDER BY timestamp',
			array(':orderno'=>$r->orderno));
		$totaltext='';
		$totalamount=0;
		foreach($process as $p) {
			$totalamount+=$p->amount;
			if($p->amount>0)
				$totaltext.='+';
			$totaltext.=$p->amount;
		}
		if(substr($totaltext,0,1)=='+') $totaltext=substr($totaltext, 1);
		$form['order_'.$r->orderno]['totalamount']=array(
			'#type' => 'markup',
			'#markup' => empty($totaltext)?'':
				($totalamount==$r->amount?sprintf('&yen;%d', $r->amount):sprintf('&yen;%s (%s)',$totalamount,$totaltext)),
		);
	}
	$form['#description']=json_encode($orders);

	$gateways=module_invoke_all('paymentgatewayinfo');
	$options=array();
	foreach($gateways as $k => $v) {
		if(module_hook($k, 'submit_form_submit'))
			if(is_array($v))
				$options[$k]='<img src="/'.$v['payment'].'"/>';
			else
				$options[$k]='<img src="/'.$v.'"/>';
	}
	if(count($gateways)==1) {
		$keys=array_keys($options);
		$form['gateway']=array(
			'#type' => 'hidden',
			'#value' => $keys[0],
		);
		$form['gatewayintro']=array(
			'#type' => 'item',
			'#title' => t('Payment Gateway'),
			'#required' => TRUE,
			'#markup' => $options[$keys[0]],
			'#description' => t('We only support above payment gateway now.'),
		);
	} else {
		$form['gateway']=array(
			'#type' => 'radios',
			'#title' => t('Payment Gateway Selection'),
			'#description' => t('Please select your preferred payment gateway.'),
			'#required' => TRUE,
			'#options' => $options,
			'#attached' => array(
				'css' => array(drupal_get_path('module', 'charge') . '/onlinecharge.css'),
			),
		);
		$keys=array_keys($gateways);
		$form['gateway']['#default_value']=$keys[0];
	}
	foreach($gateways as $key => $value) {
		$form['help-'.$key]=array(
			'#type' => 'item',
			'#markup' => module_invoke($key, 'help', 'charge/'.$key, ''),
			'#states' => array(
				'visible' => array(
					'input[name="gateway"]' => array('value' =>$key),
				),
			),
		);
	}
	return $form;
}

function charge_user_orders_submit($form, $form_state) {
	$_form_state=array();
	$element=explode('_',$form_state['triggering_element']['#name']);
	$orderno=$element[1];
	$order=db_query('SELECT * FROM {orders} WHERE orderno=:orderno',array(':orderno'=>$orderno))->fetchObject();
	db_merge('orders_process')->key(array('orderno'=>$orderno, 'transno'=>$orderno, 'amount'=>0))->fields(array(
		'orderno' => $orderno,
		'timestamp' => time(),
		'gateway' => $form_state['values']['gateway'],
		'amount' => 0,
	))->execute();
	db_update('orders')->condition('orderno',$orderno)->fields(array(
		'status' => onlinecharge_PAYMENT_PROCESSING,
	))->execute();
	$student=student_load($GLOBALS['user']);
	$_form_state['values']=array(
		'orderno' => $order->orderno,
		'amount' => $order->amount,
		'ordertime' => $order->ordertime,
		'ordertitle' => sprintf('%s %s', student_load($GLOBALS['user'])->name, $order->ordertitle),
	);
	$output=module_invoke($form_state['values']['gateway'], 'submit_form_submit', $form, $_form_state);
	echo($output);
	exit;
}

function theme_charge_user_orders($variables) {
	$form=$variables['form'];
	$output='';
	$header=array(
		t('Order no'),
		t('Order title'),
		t('Amount due'),
		t('Transaction amount'),
		t('Operation')
	);
	$orders=json_decode($form['#description']);
	unset($form['#description']);
	$rows=array();
	foreach($orders as $order) {
		$rows[]=array(
			drupal_render($form['order_'.$order]['orderno']),
			drupal_render($form['order_'.$order]['ordertitle']),
			drupal_render($form['order_'.$order]['amountdue']),
			drupal_render($form['order_'.$order]['totalamount']),
			drupal_render($form['order_'.$order]['operation']),
		);
		unset($form['order_'.$order]);
	}

	$output.=theme('table',array('header'=>$header, 'rows'=>$rows));
	$output.=drupal_render_children($form);
	return $output;
}

function _charge_status_text($status) {
	switch($status) {
		case 0:
			return t('Not paid');
		case 10:
		case 11:
		case 12:
		case 13:
		case 14:
		case 15:
			return t('Processing');
		case 100:
			return t('Paid successful');
	}
}

function charge_gatewayreponse($params) {
	$gateways=array_keys($params);
	$gateway=$gateways[0];
	$orderno=$params[$gateway]['orderno'];
	$query=db_query('SELECT EXISTS (SELECT * FROM {orders} WHERE orderno=:orderno AND status <>100)', array(
		':orderno' => $orderno,
	));
	if($query->fetchField() && $params[$gateway]['is_backend']) {
		$r=db_insert('orders_process')->fields(array(
			'orderno' => $orderno,
			'timestamp' => time(),
			'gateway' => $gateway,
			'transno' => $params[$gateway]['transactionno'],
			'amount' => $params[$gateway]['amount']
		))->execute();
		$amount=db_query(
			'SELECT o.amount, SUM(op.amount) as opamount FROM {orders} o LEFT JOIN {orders_process} op ON o.orderno=op.orderno '.
			'WHERE o.orderno=:orderno GROUP BY o.orderno', array(':orderno'=>$orderno))->fetchObject();
		if($amount->amount==$amount->opamount)
			db_update('orders')->condition('orderno', $orderno)->fields(array('status'=>100))->execute();
		if(!empty($params[$gateway]['echostr'])) {
			echo $params[$gateway]['echostr'];
			exit;
		}
	}
	if($params[$gateway]['is_backend']) exit;
	$order=db_query('SELECT * FROM {orders} WHERE orderno=:orderno', array(':orderno' => $orderno))->fetchObject();
	drupal_set_message(t('Paid successful for !ordertitle, with !amount.',array(
		'!ordertitle'=>$order->ordertitle,
		'!amount'=>$params[$gateway]['amount']
	)));
	drupal_goto(sprintf('%s/user/payment', base_path()));
}

function charge_log_form($form, $form_state) {
	$form=array();
	$form['conditions']=array(
		'#type' => 'vertical_tabs',
	);
	$form['user']=array(
		'#type' => 'fieldset',
		'#title' => t('Search by User'),
		'#group'=>'conditions',
		'#attached' => array(
			'js' => array(drupal_get_path('module', 'charge') . '/charge.js'),
			'css' => array(drupal_get_path('module', 'charge') . '/charge.css'),
		),
		'#attributes' => array('class' => array('chargelogsearchbyuser')),
	);
	$form['user']['idcard_num']=array(
		'#type' => 'textfield',
		'#title' => t('IDCard Number'),
		'#maxlength' => 18,
		'#size' => 30,
		'#default_value' => isset($form_state['storage']['idcard_num'])?$form_state['storage']['idcard_num']:'',
	);
	$form['user']['username']=array(
		'#type' => 'textfield',
		'#title' => t('Real Name'),
		'#maxlength' => 10,
		'#size' => 30,
		'#default_value' => isset($form_state['storage']['username'])?$form_state['storage']['username']:'',
	);
	$form['orders']=array(
		'#type' => 'fieldset',
		'#title' => t('Search by Order'),
		'#group'=>'conditions',
		'#attached' => array(
			'js' => array(drupal_get_path('module', 'charge') . '/charge.js'),
		),
	);
	$form['orders']['orderno']=array(
		'#type' => 'textfield',
		'#title' => t('Order No.'),
		'#maxlength' => 20,
		'#size' => 10,
		'#default_value' => isset($form_state['storage']['orderno'])?$form_state['storage']['orderno']:'',
	);
	$options=array(
		'0'=>'-- '.t('All').' --',
		'offline' => t('Offline'),
	);
	$gateways=module_invoke_all('paymentgatewayinfo');
	foreach($gateways as $k => $v) {
		if(module_hook($k, 'submit_form_submit'))
			$options[$k]=t($k);
	}
	$form['orders']['orderstatus']=array(
		'#type' => 'select',
		'#title' => t('Status'),
		'#options' => array(
			'-1' => '-- '.t('All').' --',
			'0' => t('Not paid'),
			'10' => t('Processing'),
			'100' => t('Paid successful'),
		),
		'#default_value' => isset($form_state['storage']['orderstatus'])?$form_state['storage']['orderstatus']:'',
	);
	$form['submit']=array(
		'#type' => 'submit',
		'#value' => t('Search'),
		'#name' => 'search',
	);
	$form['clearall']=array(
		'#type' => 'submit',
		'#value' => t('Clear all filters'),
		'#name' => 'clearall',
		'#attributes' => array('title' => t('So that all the filters could be reset')),
	);
	$header=array(
		'name' => array('data' => t('Real Name'), 'field'=> 'name'),
		'ordertitle' => array('data' => t('Order Title'), 'field'=> 'ordertitle'),
		'orderno' => array('data' => t('Order No'), 'field'=> 'orderno', 'sort'=>'desc'),
		'status' => array('data' => t('Status'), 'field'=> 'status'),
		'operation' => array('data' => t('Operation')),
	);

	$query=db_select('orders','o')->fields('o');
	$query->innerJoin('students','s','s.uid=o.uid');
	$query->fields('s',array('name'));
	$query->leftJoin('orders_process','op','op.orderno=o.orderno');
	if(!empty($form_state['storage']['idcard_num']))
		$query->condition('s.idcard_number',$form_state['storage']['idcard_num']);
	if(!empty($form_state['storage']['username']))
		if(preg_match('/^[A-Za-z ]+$/', $form_state['storage']['username']))
			$query->condition('s.foreign_name', strtoupper($form_state['storage']['username'].'%'), 'LIKE');
		else
			$query->condition('s.name',$form_state['storage']['username'].'%', 'LIKE');
	if(!empty($form_state['storage']['orderno']))
		$query->condition('o.orderno',$form_state['storage']['orderno']);
	if(!empty($form_state['storage']['orderstatus']))
		if($form_state['storage']['orderstatus']==10)
			$query->condition('o.status',10,'>=')->condition('o.status',100,'<');
		else
			$query->condition('o.status',$form_state['storage']['orderstatus']);
	$query->extend('PagerDefault')->limit(10)->extend('TableSort')->orderByHeader($header);

	$result=$query->execute();
	$form['orderlist']=array(
		'#type'=>'fieldset',
	);
	foreach($result as $r) {
		$form['orderlist'][$r->orderno]=array(
			'#type'=>'fieldset',
		);
		$form['orderlist'][$r->orderno]['sname']=array(
			'#markup' => l($r->name,sprintf('user/%s',$r->uid)),
		);
		$form['orderlist'][$r->orderno]['orderno']=array(
			'#markup' => l($r->orderno,sprintf('charge/log/%s',$r->orderno)),
		);
		$form['orderlist'][$r->orderno]['ordertitle']=array(
			'#markup' => sprintf('%s<br/>&yen; %d', $r->ordertitle, $r->amount),
		);
		$form['orderlist'][$r->orderno]['status']=array(
			'#markup' => _charge_status_text($r->status),
		);
		switch($r->status) {
			case 0:
				$form['orderlist'][$r->orderno]['payoffline']=array(
					'#type' => t('submit'),
					'#name' => 'payoffline'.$r->orderno,
					'#value' => t('Paid offline'),
				);
				break;
			case 10:
			case 11:
			case 12:
			case 13:
			case 14:
			case 15:
				$gateway=db_query('SELECT gateway FROM {orders_process} WHERE orderno=:orderno AND transno=:orderno',
					array(':orderno'=>$r->orderno))->fetchField();
				if($gateway && module_hook($gateway, 'querystatus')) {
					$form['orderlist'][$r->orderno]['requery']=array(
						'#type' => t('submit'),
						'#name' => 'requery'.$r->orderno,
						'#value' => t('Query status'),
						'#attributes' => array('title' => t('Use online interface to query the status of specific order')),
					);
				}
				$form['orderlist'][$r->orderno]['setfailed']=array(
					'#type' => t('submit'),
					'#name' => 'setfail'.$r->orderno,
					'#value' => t('Set as unpaid'),
					'#attributes' => array('title' => t('Force set the order as unpaid, and regenerate the orderno. Please do this AFTER relative operations in payment gateway.')),
				);
				break;
			case 100:
		}
	}
	return $form;
}

function theme_charge_log_form($variables) {
	$form=$variables['form'];
	$output='';
	$output.=drupal_render($form['conditions']);
	$output.=drupal_render($form['user']);
	$output.=drupal_render($form['orders']);
	$output.=drupal_render($form['submit']);
	$output.=drupal_render($form['clearall']);
	$output.='<p>';
	$output.=drupal_render($form['summary']);
	$output.='</p>';
	$header=array(
		'name' => array('data' => t('Real Name'), 'field'=> 'sname'),
		'ordertitle' => array('data' => t('Order Title'), 'field'=> 'ordertitle'),
		'orderno' => array('data' => t('Order No.'), 'field'=> 'orderno', 'sort'=>'desc'),
		'status' => array('data' => t('Status'), 'field'=> 'status'),
		'operation' => array('data' => t('Operation')),
	);
	$rows=array();
	foreach($form['orderlist'] as $key => $value) {
		if(substr($key,1,1)=='#') continue;
		if(!is_array($value)) continue;
		if(!isset($value['#type'])) continue;
		if($value['#type']!='fieldset') continue;
		$orderno=drupal_render($form['orderlist'][$key]['orderno']);
		$rows[]=array(
			'name' => drupal_render($form['orderlist'][$key]['sname']),
			'ordertitle' => drupal_render($form['orderlist'][$key]['ordertitle']),
			'orderno' => $orderno,
			'status' => drupal_render($form['orderlist'][$key]['status']),
			'operation' => drupal_render_children($form['orderlist'][$key]),
		);
		unset($form['orderlist'][$key]);
	}
	unset($form['orderlist']);
	$output .= theme('table', array('header'=>$header, 'rows'=>$rows, 'empty'=>t('No suitable orders.').t('Please check if you have set correct order status.')));
	$output.=drupal_render_children($form);
	$output .= theme('pager');
	return $output;
}

function charge_log_form_submit($form, &$form_state) {
	switch($form_state['triggering_element']['#name']) {
	case 'search':
		unset($form_state['storage']);
		if(!empty($form_state['values']['idcard_num']))
			$form_state['storage']['idcard_num']=trim($form_state['values']['idcard_num']);
		if(!empty($form_state['values']['username']))
			$form_state['storage']['username']=trim($form_state['values']['username']);
		if(!empty($form_state['values']['orderno']))
			$form_state['storage']['orderno']=trim($form_state['values']['orderno']);
		if(isset($form_state['values']['orderstatus']) && $form_state['values']['orderstatus']<>'-1')
			$form_state['storage']['orderstatus']=trim($form_state['values']['orderstatus']);
		$form_state['rebuild']=TRUE;
		break;
	case 'clearall':
		unset($form_state['storage']);
		break;
	default:
		if(preg_match('/^payoffline/', $form_state['triggering_element']['#name'])) {
			$orderno=substr($form_state['triggering_element']['#name'],-20);
			db_insert('orders_process')->fields(array(
				'orderno' => $orderno,
				'timestamp' => time(),
				'gateway' => 'offline',
				'transno' => sprintf("%s%6d", $orderno, rand(0,999999)),
				'amount' => db_query('SELECT amount FROM {orders} WHERE orderno=:orderno',array(':orderno'=>$orderno))->fetchField()
			))->execute();
			db_update('orders')->condition('orderno',$orderno)->fields(array(
				'status' => 100
			))->execute();
			watchdog('onlinecharge',
				'@orderno payment succeeded offline.', array(
					'@orderno' => $orderno,
				),
				WATCHDOG_INFO,
				l(t('View'), 'charge/log/'.$orderno)
			);
			drupal_set_message(t('Order @orderno status updated.',array('@orderno'=>$orderno)));
			unset($form_state['storage']);
			$form_state['storage']['orderno']=$orderno;
			$form_state['rebuild']=TRUE;
		}
		if(preg_match('/^setfail/', $form_state['triggering_element']['#name'])) {
			$orderno=substr($form_state['triggering_element']['#name'],-20);
			db_update('orders')->condition('orderno',$orderno)->fields(array(
				'status' => 0
			))->execute();
			watchdog('onlinecharge',
				'@orderno set as failed.', array(
					'@orderno' => $orderno,
				),
				WATCHDOG_INFO,
				l(t('View'), 'charge/log/'.$neworderno)
			);
			drupal_set_message(t('Order @orderno status updated.',array('@orderno'=>$orderno)));
			unset($form_state['storage']);
			$form_state['storage']['orderno']=$orderno;
			$form_state['rebuild']=TRUE;
		}
		if(preg_match('/^requery/', $form_state['triggering_element']['#name'])) {
			$orderno=substr($form_state['triggering_element']['#name'],-20);
			$r=db_query('SELECT * FROM {orders_process} WHERE orderno=:orderno AND transno=:orderno AND amount=0',
				array(':orderno'=>$orderno))->fetchObject();
			if(!$r) return;
			$t=module_invoke($r->gateway, 'querystatus', $orderno, $r->timestamp);
			if(is_array($t)) {
				db_merge('orders_process')->key(array('orderno'=>$orderno, 'transno'=>$t[$r->gateway]['transactionno']))->fields(array(
					'orderno' => $orderno,
					'timestamp' => time(),
					'gateway' => $r->gateway,
					'transno' => $t[$r->gateway]['transactionno'],
					'amount' => $t[$r->gateway]['amount'],
				))->execute();
				$amount=db_query(
					'SELECT o.amount, SUM(op.amount) as opamount FROM {orders} o LEFT JOIN {orders_process} op ON o.orderno=op.orderno '.
					'WHERE o.orderno=:orderno GROUP BY o.orderno', array(':orderno'=>$orderno))->fetchObject();
				if($amount->amount==$amount->opamount)
					db_update('orders')->condition('orderno',$r->orderno)->fields(array(
						'status' => 100,
					))->execute();
				watchdog('onlinecharge',
					'@orderno payment succeeded via @gateway.', array(
						'@orderno' => $r->orderno,
						'@gateway' => $r->gateway
					),
					WATCHDOG_INFO,
					l(t('View'), 'charge/log/'.$r->orderno)
				);
				drupal_set_message(t('Order @orderno status updated.',array('@orderno'=>$orderno)));
				unset($form_state['storage']);
				$form_state['storage']['orderno']=$orderno;
				$form_state['rebuild']=TRUE;
			} else {
				if($t==onlinecharge_PAYMENT_INVALID || $t==onlinecharge_PAYMENT_FAILED ) {
					db_update('orders')->condition('orderno',$r->orderno)->fields(array(
						'status' => 0,
					))->execute();
					drupal_set_message(t('Order @orderno process failed.',array('@orderno'=>$orderno)), 'error');
					watchdog('onlinecharge',
						'@orderno process failed via @gateway.', array(
							'@orderno' => $r->orderno,
							'@gateway' => $r->gateway
						),
						WATCHDOG_ERROR,
						l(t('View'), 'charge/log/'.$r->orderno)
					);
					unset($form_state['storage']);
					$form_state['storage']['orderno']=$orderno;
					$form_state['rebuild']=TRUE;
				} else {
					drupal_set_message(t('Order @orderno status is not updated.',array('@orderno'=>$orderno)), 'warning');
				}
			}
		}
	}
}

function charge_cron() {
	$result=db_query('SELECT o.orderno, o.status, o.ordertime, op.gateway FROM {orders} o '.
		'INNER JOIN {orders_process} op ON o.orderno=op.orderno AND o.orderno=op.transno '.
		'WHERE o.status <> 0 AND o.status <> 100 AND op.gateway IS NOT NULL'
	);
	if(!$result) return;
	foreach($result as $r) {
		if($r->status==15) {
			db_update('orders')->condition('orderno',$r->orderno)->fields(array(
				'status' => 0,
			))->execute();
			watchdog('onlinecharge',
				'@orderno process failed via @gateway.', array(
					'@orderno' => $r->orderno,
					'@gateway' => $r->gateway
				),
				WATCHDOG_ERROR,
				l(t('View'), 'charge/log/'.$r->orderno)
			);
			continue;
		}
		// hook_querystatus returns array of transaction number, settledate, etc., if succeeded, or FALSE when failed.
		if(!module_hook($r->gateway, 'querystatus')) continue;
		$t=module_invoke($r->gateway, 'querystatus', $r->orderno, $r->ordertime);
		if(is_array($t)) {
			db_merge('orders_process')
				->key(array('orderno'=>$r->orderno, 'gateway'=>$r->gateway, 'transno'=>$t[$r->gateway]['transactionno']))
				->fields(array(
					'orderno'=>$r->orderno,
					'gateway'=>$r->gateway,
					'transno'=>$t[$r->gateway]['transactionno'],
					'timestamp'=time(),
					'amount'=>$t[$r->gateway]['amount'],
			))->execute();
			db_update('orders')->condition('orderno',$r->orderno)->fields(array(
				'gatewaytransactionno' => $t[$r->gateway]['transactionno'],
				'gatewaysettledate' => isset($t[$r->gateway]['settledate'])?$t[$r->gateway]['settledate']:date('md'),
				'status' => 100,
			))->execute();
			$amount=db_query(
				'SELECT o.amount, SUM(op.amount) as opamount FROM {orders} o LEFT JOIN {orders_process} op ON o.orderno=op.orderno '.
				'WHERE o.orderno=:orderno GROUP BY o.orderno', array(':orderno'=>$r->orderno))->fetchObject();
			if($amount->amount==$amount->opamount)
				db_update('orders')->condition('orderno',$r->orderno)->fields(array(
					'status' => 100,
				))->execute();
			watchdog('onlinecharge',
				'@orderno payment succeeded via @gateway.', array(
					'@orderno' => $r->orderno,
					'@gateway' => $r->gateway
				),
				WATCHDOG_INFO,
				l(t('View'), 'charge/log/'.$r->orderno)
			);
		} else {
			$status=$r->status;
			if(($t==charge_PAYMENT_INVALID || $t==charge_PAYMENT_PROCESSING ) && time()-$r->ordertime >= 7200)
				$status=15;
			if($t==charge_PAYMENT_FAILED)
				$status=15;
			db_update('orders')->condition('orderno',$r->orderno)->fields(array(
				'status' => $status,
			))->execute();
			watchdog('onlinecharge',
				'@orderno process without success via @gateway.', array(
					'@orderno' => $r->orderno,
					'@gateway' => $r->gateway
				),
				WATCHDOG_WARNING,
				l(t('View'), 'charge/log/'.$r->orderno)
			);
		}
	}
}

function order_load($orderno) {
	$query=db_query('SELECT o.*, s.name, SUM(op.amount) AS transaction_amount FROM {orders} o '.
		'INNER JOIN {students} s ON o.uid=s.uid '.
		'LEFT JOIN {orders_process} op ON o.orderno=op.orderno '.
		'WHERE o.orderno=:orderno',
		array(':orderno'=>$orderno));
	return $query->fetchObject();
}

function charge_log_form_detail_form_title($order) {
	return t('Details for order No. !orderno',array('!orderno'=>$order->orderno));
}

function charge_log_form_detail($form, $form_state, $order) {
	$form=array();
	$form['name']=array(
		'#type' => 'item',
		'#title' => t('Real Name'),
		'#markup' => l($order->name, sprintf('user/%d', $order->uid)),
	);
	$form['ordertitle']=array(
		'#type' => 'item',
		'#title' => t('Order title'),
		'#markup' => $order->ordertitle,
	);
	$form['orderdate']=array(
		'#type' => 'item',
		'#title' => t('Order generating date'),
		'#markup' => format_date($order->ordertime, 'custom', 'Y-m-d H:i'),
	);
	$form['amount']=array(
		'#type' => 'item',
		'#title' => t('Order amount'),
		'#markup' => sprintf('&yen; %d', $order->amount),
	);
	$form['transamount']=array(
		'#type' => 'item',
		'#title' => t('Total settled amount'),
		'#markup' => sprintf('&yen; %d', $order->transaction_amount),
	);
	$ops=db_query('SELECT * FROM {orders_process} WHERE orderno=:orderno ORDER BY timestamp',array(':orderno'=>$order->orderno));
	$header=array(
		t('Transaction time'),
		t('Summary'),
		t('Operation'),
	);
	$rows=array();
	if($ops) {
		foreach($ops as $op) {
			if($op->amount==0)
				$summary=t('Transaction submitted to !gateway',array('!gateway'=>$op->gateway));
			else if($op->amount>0)
				$summary=t('Charged !amount via !gateway, with transaction number !transno',
					array('!amount'=>sprintf('&yen; %d', $op->amount), '!gateway'=>$op->gateway, '!trasno'=>$op->transno));
			else
				$summary=t('Refund !amount via !gateway with transaction number !transno',
					array('!amount'=>sprintf('&yen; %d', abs($op->amount)), '!gateway'=>$op->gateway, '!trasno'=>$op->transno));
			$rows[]=array(
				format_date($op->timestamp, 'custom', 'Y-m-d H:i'),
				$summary,
			);
		}
	}
	if(!empty($rows))
		$form['transdetail']=array(
			'#type' => 'item',
			'#title' => t('Transaction Detail'),
			'#markup' => theme('table',array('header'=>$header,'rows'=>$rows)),
		);
	return $form;
}

?>
