<?php

/*
 * This file is licensed under GPLv2+.
 */

/**
 * @file
 * Provides management of exam goings.
 */

define('exam_signup_status_UNKNOW', 0);
define('exam_signup_status_WAIT_APPROVED', 1);
define('exam_signup_status_APPROVED', 2);
define('exam_signup_status_FINISHED', 3);
define('exam_signup_status_FINISHED_BATCH', 4);

define('exam_signup_result_ABSENT', 0);
define('exam_signup_result_FAILED', 1);
define('exam_signup_result_PASSED', 2);
 
/**
 * Implementation of hook_help().
 */
function exam_help($path, $arg) {
	switch ($path) {
		case 'exam':
			$output = t('You may administrate various basic information of certificates via following features.');
			break;
		case 'exam/specification':
			$output = t('In this page, you could modify or add new certificate specification.');
			break;
		case 'exam/preload':
			$output = t('In this page, you could preload certificates already issued, for students to claim.');
			break;
		case 'user/scores':
			$output = t('In this page, you will see the scores and result of the test you have participated.');
			$output .= t('If you have passed certain test, you may print the score report by clicking [@passbutton] link.',
				array('@passbutton'=>_exam_result_id_into_text(exam_signup_result_PASSED)));
			break;
	}
	if (isset($output))
		return $output;
}

/**
 * Implementation of hook_menu().
 */
function exam_menu() {
	$items=array();
	$items['exam']=array(
		'menu_name' => 'user-menu',
		'plid' => '0',
		'title' => 'Exam Management',
		'description' => "Manage the exam",
		'page callback' => 'exam_blocklist',
		'weight' => 9,
		'access callback' => 'user_access',
		'access arguments'=> array('admin certificates'),
		'expanded' => TRUE,
	);
	$items['exam/scores']=array(
		'title' => 'Result and Scores',
		'weight' => 10,
		'description' => "Manage the results and scores of exams",
		'page callback' => 'drupal_get_form',
		'page arguments' => array('exam_scores_form'),
		'access callback' => 'user_access',
		'access arguments'=> array('admin certificates'),
	);
	$items['exam/scores/upload']=array(
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'title' => 'Massive upload the scores',
		'weight' => 1,
		'description' => "Massive upload the scores",
		'page callback' => 'drupal_get_form',
		'page arguments' => array('exam_scores_form'),
		'access callback' => 'user_access',
		'access arguments'=> array('admin certificates'),
	);
	$items['exam/scores/query']=array(
		'type' => MENU_LOCAL_TASK,
		'title' => 'Query uploaded the scores',
		'weight' => 2,
		'description' => "Query uploaded the scores",
		'page callback' => 'drupal_get_form',
		'page arguments' => array('exam_scores_query_form'),
		'access callback' => 'exam_scores_query_form_access',
	);
	$items['exam/scores/query/unbind/%/%']=array(
		'type' => MENU_VISIBLE_IN_BREADCRUMB,
		'page callback' => 'drupal_get_form',
		'page arguments' => array('exam_scores_query_unbind_form', 4,5),
		'access callback' => 'exam_scores_query_unbind_form_access',
		'access arguments'=> array(4,5),
	);
	$items['exam/scores/query']=array(
		'type' => MENU_LOCAL_TASK,
		'title' => 'Query uploaded the scores',
		'weight' => 2,
		'description' => "Query uploaded the scores",
		'page callback' => 'drupal_get_form',
		'page arguments' => array('exam_scores_query_form'),
		'access callback' => 'exam_scores_query_form_access',
	);
	$items['user/scores'] = array(
		'title' => 'My scores',
		'menu_name' => 'user-menu',
		'plid' => '0',
		'weight' => 8,
		'page callback' => 'exam_user_scores',
		'access callback' => 'exam_user_scores_access',
	);
	$items['user/scores/report/%'] = array(
		'type' => MENU_VISIBLE_IN_BREADCRUMB,
		'title' => 'Score Report',
		'page callback' => 'exam_user_scores_report',
		'page arguments' => array(3),
		'access callback' => 'exam_user_scores_report_access',
		'access arguments'=> array(3),
	);
	$items['user/scores/report/%/picture.png'] = array(
		'type' => MENU_CALLBACK,
		'page callback' => 'exam_user_scores_report_qrcode',
		'page arguments' => array(3),
		'access callback' => 'exam_user_scores_report_access',
		'access arguments'=> array(3),
	);
	return $items;
}

/**
 * Provide a single block from the administration menu as a page.
 * This function is often a destination for these blocks.
 * For example, 'admin/content/types' needs to have a destination to be valid
 * in the Drupal menu system, but too much information there might be
 * hidden, so we supply the contents of the block.
 *
 * @return
 *   The output HTML.
 */
function exam_blocklist() {
	$item = menu_get_item();
	$content = system_admin_menu_block($item);

	return theme('admin_block_content', array('content' => $content));
}

function exam_scores_form($form, $form_state) {
	if(!isset($form_state['storage']['step'])) {
		unset($form_state['storage']);
		$form_state['storage']['step']=1;
	}

	if($form_state['storage']['step']==1)
		$form=exam_scores_form_step1($form, $form_state);
	else if($form_state['storage']['step']==2)
		$form=exam_scores_form_step2($form, $form_state);
	return $form;
}

function exam_scores_form_step1($form, $form_state) {
	$form['#attached']['css']=array(
		'.inline-element-div label, .inline-element-div div, .inline-element-div select, .inline-element-div input, .inline-element-div div.form-item { display: inline; }' => array('type'=>'inline'),
		'div.ajax-progress-throbber {display: none; }'=>array('type'=>'inline'),
	);
	$rdbo=db_query('SELECT * FROM {operations} o WHERE '.
		'EXISTS(SELECT * FROM {certificates_operations} co WHERE co.oid=o.oid) '.
		'AND year=:year AND oid<:month ORDER by oid DESC',
		array(':year' => date('Y'), ':month' => date('Ym'))
	);
	$options=array();
	foreach($rdbo as $r) {
		if(checkdate(substr($r->oid, 4, 2),1,$r->year))
			$options[$r->oid]=$r->name;
	}
	$operation = isset($form_state['values']['operation']) ? $form_state['values']['operation'] : (isset($form_state['storage']['operation'])?$form_state['storage']['operation']:key($options));
	$form['operation']=array(
		'#type' => 'select',
		'#title' => t('Select Operation and certificate'),
		'#prefix' => '<div class="inline-element-div">',
		'#required' => TRUE,
		'#default_value' => $operation,
		'#options' => $options,
		'#ajax' => array(
			'callback' => '_exam_score_form_step1_operation_select_callback',
			'wrapper' => 'scores-certificate-selectbox',
		),
	);
	$form['certificate']=array(
		'#type' => 'select',
		'#title' => t('Certificate'),
		'#title_display' => 'invisible',
		'#prefix' => '<div id="scores-certificate-selectbox" class="inline-element-div">',
		'#suffix' => '</div></div>',
		'#options' => _exam_score_form_step1_certificate_select_options($operation),
		'#default_value' => isset($form_state['values']['certificate']) ? $form_state['values']['certificate'] : (isset($form_state['storage']['certificate'])?$form_state['storage']['certificate']:''),
		'#required' => TRUE,
	);
	$form['massivefile']=array(
		'#type' => 'managed_file',
		'#title' => t('Data file'),
		'#required' => TRUE,
		'#default_value' => isset($form_state['storage']['fid'])?$form_state['storage']['fid']:0,
		'#description' => t('Only .xls and .xlsx spreadsheets are supported.'),
		'#upload_validators' => array('file_validate_extensions' => array('xls xlsx'), '_exam_is_file_spreadsheet'=>array()),
	);

	$form['submit']=array(
		'#type' => 'submit',
		'#value' => t('Next Step >'),
	);
	$form['#submit'][]='exam_scores_form_step1_submit';
	return $form;
}

function _exam_score_form_step1_operation_select_callback($form, $form_state) {
	return $form['certificate'];
}

function _exam_score_form_step1_certificate_select_options($operation) {
	$query=db_query('SELECT c.cid, c.series, c.name FROM {certificates} c WHERE '.
		'EXISTS(SELECT * FROM {certificates_operations} co WHERE c.cid=co.cid AND co.oid=:oid)',
		array(':oid'=>$operation)
	);
	$options=array();
	foreach($query as $r)
		$options[$r->cid]=sprintf('%s - %s', $r->series, $r->name);
	return $options;
}

function _exam_is_file_spreadsheet($file) {
	if(!preg_match('/\.xlsx{0,1}$/i', $file->filename)) return array();
	if($file->filesize > 1024*100)
		return array(
			t('The file is %filesize exceeding the maximum file size of %maxsize.', array('%filesize' => format_size($file->filesize), '%maxsize' => format_size(1024*100))).
			t('Please consider splice the file into multiple pieces.')
		);
	include_once(DRUPAL_ROOT.'/sites/all/libraries/phpexcel/PHPExcel.php');
	$result=0;
	switch($format=PHPExcel_IOFactory::identify($file->uri)) {
		case 'Excel5':
		case 'Excel2007':
		try {
			$objReader = PHPExcel_IOFactory::createReader($format);
			$objReader->setReadDataOnly(true);
			$objPHPExcel = $objReader->load($file->uri);
			$result=$objPHPExcel->getSheetCount()>0;
			$objPHPExcel->disconnectWorksheets();
			unset($objPHPExcel);
			unset($objReader);
		} catch(Exception $exp) {
			$objPHPExcel->disconnectWorksheets();
			unset($objPHPExcel);
			unset($objReader);
			return array($exp->getMessage());
		}
	}
	if($result) return array();
	else return array(t('It is not a valid spreadsheet file.'));
}

function exam_scores_form_step1_submit($form, &$form_state) {
	$form_state['storage']['coid']=db_query('SELECT coid FROM {certificates_operations} WHERE cid=:cid and oid=:oid',
		array(':oid'=>$form_state['values']['operation'], ':cid'=>$form_state['values']['certificate'])
	)->fetchField();
	$form_state['storage']['operation']=$form_state['values']['operation'];
	$form_state['storage']['certificate']=$form_state['values']['certificate'];
	$form_state['storage']['fid']=$form_state['values']['massivefile'];
	$form_state['storage']['step']=2;
	$form_state['rebuild']=TRUE;
}

function exam_scores_form_step2($form, $form_state) {
	$form['#attached']['css']=array(
		'.inline-element-div label, .inline-element-div select, .inline-element-div input, .inline-element-div div.form-item { display: inline;}'.
		'body.sidebar-first div #post-content { width: 960px; }'.
		'div#sidebar { display: none; }' => array('type'=>'inline')
	);
	$co=certificate_operations_load($form_state['storage']['certificate'], $form_state['storage']['operation']);
	$form['co']=array(
		'#type' => 'item',
		'#title' => t('Selected organization'),
		'#markup' => t('!org !series !cname',
			array('!org'=>$co->oname, '!series'=>$co->series, '!cname'=>$co->cname)),
	);
	drupal_set_title(t('Upload scores for !org !cname', array('!org'=>$co->oname, '!cname'=>$co->cname)));

	include_once(DRUPAL_ROOT.'/sites/all/libraries/phpexcel/PHPExcel.php');
	$file=file_load($form_state['storage']['fid']);
	$uri = drupal_realpath($file->uri);
	if(interface_exists('SaeInterface')) {
		file_put_contents( SAE_TMP_PATH . $file->filename, file_get_contents($uri));
		$uri=SAE_TMP_PATH . $file->filename;
	}
	$format=PHPExcel_IOFactory::identify($uri);
	$objReader = PHPExcel_IOFactory::createReader($format);
	$objReader->setReadDataOnly(true);
	$objPHPExcel = $objReader->load($uri);
	$max_cols=$objPHPExcel->getActiveSheet()->getHighestColumn();
	$max_rows=$objPHPExcel->getActiveSheet()->getHighestRow();

	$options=drupal_map_assoc(range(1,$max_rows));

	$form['beginrow']=array(
		'#type' => 'select',
		'#title' => t('row is the first row which contains data.'),
		'#title_display' => 'after',
		'#prefix' => '<div class="inline-element-div">'.t('The ', array(), array('context'=>'prefix of massive uploading form')),
		'#suffix' => '</div>',
		'#description' => t('Please select where the data series begins, not the row where header locates.'),
		'#options' => $options,
		'#required' => TRUE,
		'#default_value' => isset($form_state['storage']['beginrow'])?$form_state['storage']['beginrow']:'2',
	);

	$options=drupal_map_assoc(range('A',$max_cols));
	$form['idcardnumber']=array(
		'#type' => 'select',
		'#title' => t('column contains ID Card nubmer.'),
		'#title_display' => 'after',
		'#prefix' => '<div class="inline-element-div">'.t('The ', array(), array('context'=>'prefix of massive uploading form')),
		'#suffix' => '</div>',
		'#options' => $options,
		'#required' => TRUE,
		'#default_value' => isset($form_state['storage']['idcardnumber_col'])?$form_state['storage']['idcardnumber_col']:'',
	);
	$form['ticketnumber']=array(
		'#type' => 'select',
		'#title' => t('column contains ticket nubmer.'),
		'#title_display' => 'after',
		'#prefix' => '<div class="inline-element-div">'.t('The ', array(), array('context'=>'prefix of massive uploading form')),
		'#suffix' => '</div>',
		'#options' => $options,
		'#required' => TRUE,
		'#default_value' => isset($form_state['storage']['ticketnumber_col'])?$form_state['storage']['ticketnumber_col']:'',
	);
	$form['name']=array(
		'#type' => 'select',
		'#title' => t('column contains real name.'),
		'#title_display' => 'after',
		'#prefix' => '<div class="inline-element-div">'.t('The ', array(), array('context'=>'prefix of massive uploading form')),
		'#suffix' => '</div>',
		'#options' => $options,
		'#required' => TRUE,
		'#default_value' => isset($form_state['storage']['name_col'])?$form_state['storage']['name_col']:'',
	);
	$form['score']=array(
		'#type' => 'select',
		'#title' => t('column contains score.'),
		'#title_display' => 'after',
		'#description' => t('You may store any value including any mixed text in this column.').
			t('What you have entered in the column will be displayed to the user as is.'),
		'#prefix' => '<div class="inline-element-div">'.t('The ', array(), array('context'=>'prefix of massive uploading form')),
		'#suffix' => '</div>',
		'#options' => $options,
		'#required' => TRUE,
		'#default_value' => isset($form_state['storage']['score_col'])?$form_state['storage']['score_col']:'',
	);
	$form['result']=array(
		'#type' => 'select',
		'#title' => t('column contains result.'),
		'#title_display' => 'after',
		'#description' => t('Where !absent means Absent, !fail means Fail, !pass means Pass.',
			array('!absent'=>exam_signup_result_ABSENT, '!fail'=>exam_signup_result_FAILED, '!pass'=>exam_signup_result_PASSED)),
		'#prefix' => '<div class="inline-element-div">'.t('The ', array(), array('context'=>'prefix of massive uploading form')),
		'#suffix' => '</div>',
		'#options' => $options,
		'#required' => TRUE,
		'#default_value' => isset($form_state['storage']['result_col'])?$form_state['storage']['result_col']:'',
	);
	// Display raw data for the spreadsheet
	$origrows=$objPHPExcel->getActiveSheet()->rangeToArray(
		'A1:'.($max_cols>'L'?'L':$max_cols).($max_rows>10?'10':$max_rows),	// The worksheet range that we want to retrieve
		'',			// Value that should be returned for empty cells
		TRUE,		// Should formulas be calculated (the equivalent of getCalculatedValue() for each cell)
		TRUE,		// Should values be formatted (the equivalent of getFormattedValue() for each cell)
		FALSE		// Should the array be indexed by cell row and cell column
	);
	$rows=array();
	$i=1;
	foreach($origrows as $row) {
		array_unshift($row, array('data'=>$i++, 'header'=>TRUE));
		$rows[]=$row;
	}
	$header=range('A',($max_cols>'L'?'L':$max_cols));
	array_unshift($header, sprintf('[%s]',$objPHPExcel->getActiveSheet()->getTitle()));
	$objPHPExcel->disconnectWorksheets();
	unset($objPHPExcel);
	unset($objReader);
	$form['demotitle']=array(
		'#type' => 'item',
		'#title' => t('Raw data for @filename', array('@filename'=>$file->filename)),
		'#markup' => t('Note: the raw data shows the hidden rows and columns, which means these rows and column will be proceeded.'),
	);
	$form['demo']=array(
		'#markup' => theme('table',array('header'=>$header, 'rows'=>$rows)),
	);

	$form['previous']=array(
		'#type' => 'submit',
		'#value' => t('< Previous Step'),
		'#validate' => array(),
		'#submit' => array('exam_scores_form_step2_previous_submit'),
		'#limit_validation_errors' => array(),
	);
	$form['submit']=array(
		'#type' => 'submit',
		'#value' => t('Upload data file & save'),
	);
	$form['#validate']=array('exam_scores_form_step2_validate');
	$form['#submit']=array('exam_scores_form_step2_submit');
	return $form;
}

function exam_scores_form_step2_previous_submit($form, &$form_state) {
	$form_state['rebuild']=TRUE;
	$form_state['storage']['step']=1;
}

function exam_scores_form_step2_validate($form, $form_state) {
	$co=certificate_operations_load($form_state['storage']['certificate'], $form_state['storage']['operation']);
	drupal_set_title(t('Upload scores for !org !cname', array('!org'=>$co->oname, '!cname'=>$co->cname)));
	$test=array();
	$test[]=$form_state['values']['idcardnumber'];
	$test[]=$form_state['values']['ticketnumber'];
	$test[]=$form_state['values']['name'];
	$test[]=$form_state['values']['score'];
	$test[]=$form_state['values']['result'];
	$test=array_unique($test);
	if(count($test)<5) {
		form_set_error('idcardnumber', t('You must select different columns.'));
		form_set_error('name');
		form_set_error('score');
		form_set_error('result');
		return;
	}
	$file=file_load($form_state['storage']['fid']);
	$uri=drupal_realpath($file->uri);
	if(interface_exists('SaeInterface')) {
		file_put_contents( SAE_TMP_PATH . $file->filename, file_get_contents($uri));
		$uri=SAE_TMP_PATH . $file->filename;
	}
	include_once(DRUPAL_ROOT.'/sites/all/libraries/phpexcel/PHPExcel.php');
	$format=PHPExcel_IOFactory::identify($uri);
	$objReader = PHPExcel_IOFactory::createReader($format);
	$objReader->setReadDataOnly(true);
	$objPHPExcel = $objReader->load($uri);
	$objWorksheet = $objPHPExcel->getActiveSheet();
	$row=$form_state['values']['beginrow'];
	$max_rows=$objWorksheet->getHighestRow();
	$results=array();
	while($row <= $max_rows) {
		$idcardnumber=strtoupper(trim($objWorksheet->getCell($form_state['values']['idcardnumber'].$row)->getCalculatedValue()));
		if(empty($idcardnumber)) {
			form_set_error('idcardnumber', t('The value for idcardnumber at !cell is empty.',
				array('!cell'=>$form_state['values']['idcardnumber'].$row)
			));
			break;
		}
		$ticketnumber=strtoupper(trim($objWorksheet->getCell($form_state['values']['ticketnumber'].$row)->getCalculatedValue()));
		if(empty($ticketnumber)) {
			form_set_error('ticketnumber', t('The value for idcardnumber at !cell is empty.',
				array('!cell'=>$form_state['values']['ticketnumber'].$row)
			));
			break;
		}
		$name=trim($objWorksheet->getCell($form_state['values']['name'].$row)->getCalculatedValue());
		if(empty($name)) {
			form_set_error('name', t('The value for name at !cell is empty.',
				array('!cell'=>$form_state['values']['name'].$row)
			));
			break;
		}
		$result=trim($objWorksheet->getCell($form_state['values']['result'].$row)->getCalculatedValue());
		if(!in_array($result, array(exam_signup_result_ABSENT,exam_signup_result_FAILED,exam_signup_result_PASSED))) {
			form_set_error('result', t('The value of result in !cell is "!value", where it must be 0, 1, or 2.',
				array('!cell'=>$form_state['values']['result'].$row, '!value'=>$result)
			));
			break;
		}
		if(isset($results[$idcardnumber])) {
			form_set_error('idcardnumber', t('There are duplicate idcard number "!idcardnumber" at row !cell1 and !cell2',
				array('!cell1'=> $form_state['values']['idcardnumber'].$results[$idcardnumber]['row'],
					'!cell2'=>$form_state['values']['idcardnumber'].$row,
					'!idcardnumber'=>$idcardnumber)
			));
			break;
		}
		$query=db_query('SELECT EXISTS('.
			'SELECT * FROM {students} WHERE idcard_number=:idcardnumber AND name <>:name AND exname <>:name)',
			array(':idcardnumber'=>$idcardnumber, ':name'=>$name)
		);
		if($query->fetchField()) {
			form_set_error('name', t('The name (!name) you specified in !cell differs from what the student had filled.',
				array('!cell'=>$form_state['values']['name'].$row, '!name'=>$name)
			));
			break;
		}
		$query=db_query('SELECT EXISTS(SELECT * FROM {signup} s INNER JOIN {students} st ON s.uid=st.uid '.
			'WHERE s.coid=:coid AND st.idcard_number=:idcardnumber AND s.ticket_number<>:ticket_number)',
			array(':coid'=>$form_state['storage']['coid'], ':idcardnumber'=>$idcardnumber, ':ticket_number'=>$ticketnumber)
		);
		if($query->fetchField()) {
			form_set_error('ticketnumber', t('The ticket number (!ticketnumber) you specified in !cell differs from the system value.',
				array('!cell'=>$form_state['values']['idcardnumber'].$row, '!ticketnumber'=>$ticketnumber)
			));
			break;
		}
		$query=db_query('SELECT EXISTS(SELECT * FROM {scores_temp} WHERE coid=:coid AND idcard_number=:idcardnumber)',
			array(':coid'=>$form_state['storage']['coid'], ':idcardnumber'=>$idcardnumber)
		);
		if($query->fetchField()) {
			form_set_error('idcardnumber', t('You have already uploaded scores and result for !idcardnumber in !cell',
				array('!cell'=>$form_state['values']['idcardnumber'].$row, '!idcardnumber'=>$idcardnumber)
			));
			break;
		}
		$query=db_query('SELECT EXISTS(SELECT * FROM {signup} s INNER JOIN {students} st ON s.uid=st.uid '.
			'WHERE s.coid=:coid AND st.idcard_number=:idcardnumber AND s.status=:status)',
			array(':coid'=>$form_state['storage']['coid'], ':idcardnumber'=>$idcardnumber, ':status'=>exam_signup_status_FINISHED)
		);
		if($query->fetchField()) {
			form_set_error('idcardnumber', t('You have already uploaded scores and result for !idcardnumber in !cell',
				array('!cell'=>$form_state['values']['idcardnumber'].$row, '!idcardnumber'=>$idcardnumber)
			));
			break;
		}
		$results[$idcardnumber]=array('row'=>$row, 'name'=>$name, 'result'=>$result);
		$row++;
	}
	$objWorksheet->disconnectCells();
	$objPHPExcel->disconnectWorksheets();
	unset($objPHPExcel);
	unset($objReader);
}

function exam_scores_form_step2_submit($form, &$form_state) {
	$file=file_load($form_state['storage']['fid']);
	$uri=drupal_realpath($file->uri);
	if(interface_exists('SaeInterface')) {
		file_put_contents( SAE_TMP_PATH . $file->filename, file_get_contents($uri));
		$uri=SAE_TMP_PATH . $file->filename;
	}
	include_once(DRUPAL_ROOT.'/sites/all/libraries/phpexcel/PHPExcel.php');
	$format=PHPExcel_IOFactory::identify($uri);
	$objReader = PHPExcel_IOFactory::createReader($format);
	$objReader->setReadDataOnly(true);
	$objPHPExcel = $objReader->load($uri);
	$objWorksheet = $objPHPExcel->getActiveSheet();
	$row=$form_state['values']['beginrow'];
	$max_rows=$objWorksheet->getHighestRow();
	$i=0;
	for($row=$form_state['values']['beginrow']; $row<=$max_rows; $row++) {
		$idcardnumber=strtoupper(trim($objWorksheet->getCell($form_state['values']['idcardnumber'].$row)->getCalculatedValue()));
		$ticketnumber=strtoupper(trim($objWorksheet->getCell($form_state['values']['ticketnumber'].$row)->getCalculatedValue()));
		$name=trim($objWorksheet->getCell($form_state['values']['name'].$row)->getCalculatedValue());
		$score=trim($objWorksheet->getCell($form_state['values']['score'].$row)->getCalculatedValue());
		$result=trim($objWorksheet->getCell($form_state['values']['result'].$row)->getCalculatedValue());
		$r=db_insert('scores_temp')->fields(array(
			'idcard_number' => $idcardnumber,
			'ticket_number' => $ticketnumber,
			'name' => $name,
			'coid' => $form_state['storage']['coid'],
			'score' => $score,
			'result' => $result,
		))->execute();
		if($r) $i++;
	}
	$objWorksheet->disconnectCells();
	$objPHPExcel->disconnectWorksheets();
	unset($objPHPExcel);
	unset($objReader);
	$form_state['rebuild']=TRUE;
	$form_state['storage']['step']=1;
	$form_state['storage']['fid']=0;
	$form_state['storage']['beginrow']=$form_state['values']['beginrow'];
	$form_state['storage']['idcardnumber_col']=$form_state['values']['idcardnumber'];
	$form_state['storage']['ticketnumber_col']=$form_state['values']['ticketnumber'];
	$form_state['storage']['name_col']=$form_state['values']['name'];
	$form_state['storage']['score_col']=$form_state['values']['score'];
	$form_state['storage']['result_col']=$form_state['values']['result'];
	$co=certificate_operations_load($form_state['storage']['coid']);
	drupal_set_message(t('!num scores of !org !cname saved.', array('!num'=>$i, '!org'=>$co->oname, '!cname'=>$co->cname)));
	watchdog('exam',
		'Uploaded !num scores for !org !cname.', array(
			'!num'=>$i, '!org'=>$co->oname, '!cname'=>$co->cname
			),
		WATCHDOG_INFO
	);
}

function exam_scores_query_form_access() {
	if(!user_access('admin certificates')) return FALSE;
	$query_temp=db_query('SELECT EXISTS(SELECT * FROM {scores_temp})')->fetchField();
	if(!$query_temp)
		return db_query('SELECT EXISTS(SELECT * FROM {signup} WHERE status=:status)', array(':status'=>exam_signup_status_FINISHED))->fetchField();
	return TRUE;
}

function exam_scores_query_form($form, $form_state) {
	$form['#attached']['css']=array(
		'.inline-element-div label, .inline-element-div div, .inline-element-div select, .inline-element-div input, .inline-element-div div.form-item { display: inline; }' => array('type'=>'inline'),
		'div.ajax-progress-throbber {display: none; }'=>array('type'=>'inline'),
	);
	$rdbo=db_query('SELECT * FROM {operations} o WHERE '.
		'EXISTS(SELECT * FROM (SELECT coid FROM {signup} UNION SELECT coid FROM {scores_temp}) t '.
		'INNER JOIN {certificates_operations} co ON t.coid=co.coid WHERE co.oid=o.oid) '.
		'ORDER by oid DESC'
	);
	$options=array();
	foreach($rdbo as $r) {
		if(checkdate(substr($r->oid, 4, 2),1,$r->year))
			$options[$r->oid]=$r->name;
	}
	$operation = isset($form_state['values']['operation']) ? $form_state['values']['operation'] : (isset($_SESSION['coid']['oid'])?$_SESSION['coid']['oid']:key($options));
	$form['operation']=array(
		'#type' => 'select',
		'#title' => t('Select Operation and certificate'),
		'#prefix' => '<div class="inline-element-div">',
		'#required' => TRUE,
		'#default_value' => $operation,
		'#options' => $options,
		'#ajax' => array(
			'callback' => '_exam_score_form_step1_operation_select_callback',
			'wrapper' => 'scores-certificate-selectbox',
		),
	);
	$form['certificate']=array(
		'#type' => 'select',
		'#title' => t('Certificate'),
		'#title_display' => 'invisible',
		'#prefix' => '<div id="scores-certificate-selectbox" class="inline-element-div">',
		'#suffix' => '</div>',
		'#options' => _exam_scores_query_certificate_select_options($operation),
		'#default_value' => isset($form_state['values']['certificate']) ? $form_state['values']['certificate'] : (isset($_SESSION['coid']['cid'])?$_SESSION['coid']['cid']:''),
		'#required' => TRUE,
	);
	$form['submit']=array(
		'#type' => 'submit',
		'#value' => t('Query'),
		'#suffix' => '</div>',
	);
	if(empty($_SESSION['coid']) || empty($_SESSION['coid']['cid']) || empty($_SESSION['coid']['oid'])) return $form;
	$header=array(
		array('data'=>t('Real Name'), 'field'=>'uid', 'sort'=>'desc'),
		array('data'=>t('IDCard Number'), 'field'=>'idcard_number'),
		array('data'=>t('Ticket Number'), 'field'=>'ticket_number'),
		array('data'=>t('Score')),
		array('data'=>t('Result'), 'field'=>'result'),
	);
	$co=certificate_operations_load($_SESSION['coid']['cid'], $_SESSION['coid']['oid']);
	$query=db_select('signup','su')->condition('status',exam_signup_status_FINISHED);
	$query->innerJoin('students','s','su.uid=s.uid');
	$query->fields('s',array('uid','idcard_number','name'))->fields('su',array('coid','ticket_number','score','result'));
	$query->addExpression('\'s\'','tablename');
	$query->addExpression('sid','uniqueid');
	$query->condition('coid',$co->coid);
	$uquery=db_select('scores_temp','st')->condition('coid',$co->coid);
	$uquery->addExpression('0','uid');
	$uquery->addExpression('st.idcard_number','idcard_number');
	$uquery->addExpression('st.name','name');
	$uquery->addExpression('st.coid','coid');
	$uquery->addExpression('st.ticket_number','ticket_number');
	$uquery->addExpression('st.score','score');
	$uquery->addExpression('st.result','result');
	$uquery->addExpression('\'t\'','tablename');
	$uquery->addExpression('st.stid','uniqueid');
	$query->union($uquery, 'UNION ALL');
	$rquery=db_select($query,'t')->fields('t')->extend('TableSort')->orderByHeader($header)->orderBy('idcard_number')->extend('PagerDefault')->limit(20);
	$rdbo=$rquery->execute();
	foreach ($rdbo as $r) {
		$rows[]=array(
			($r->uid)?l($r->name, 'user/'.$r->uid):$r->name,
			$r->idcard_number,
			$r->ticket_number,
			$r->score,
			_exam_result_id_into_text($r->result),
		);
		if(exam_scores_query_unbind_form_access($r->tablename, $r->uniqueid))
			$rows[count($rows)-1][count($rows[count($rows)-1])-1].=
				l(' ['.t('Delete').']', 'exam/scores/query/unbind/'.$r->tablename.'/'.$r->uniqueid);
	}
	$form['abc']=array('#markup'=>theme('table', array('header'=>$header, 'rows'=>$rows)));
	$form['pager']=array('#markup'=>theme('pager', array('quantity'=>5)));
	return $form;
}

function _exam_scores_query_certificate_select_options($operation) {
	$query=db_query('SELECT c.cid, c.series, c.name FROM {certificates} c WHERE '.
		'EXISTS(SELECT * FROM (SELECT coid FROM {signup} UNION SELECT coid FROM {scores_temp}) t '.
		'INNER JOIN {certificates_operations} co ON t.coid=co.coid WHERE co.cid=c.cid AND co.oid=:oid) ',
		array(':oid'=>$operation)
	);
	$options=array();
	foreach($query as $r)
		$options[$r->cid]=sprintf('%s - %s', $r->series, $r->name);
	return $options;
}

function exam_scores_query_form_submit($form, &$form_state) {
	$_SESSION['coid']['oid']=$form_state['values']['operation'];
	$_SESSION['coid']['cid']=$form_state['values']['certificate'];
	$form_state['rebuild']=TRUE;
}

function signup_finished_load($sid) {
	return db_query('SELECT * FROM {signup} WHERE status=:status AND sid=:sid',
		array(':status'=>exam_signup_status_FINISHED, ':sid'=>$sid)
	)->fetchObject();
}

function exam_scores_query_unbind_form_access($tablename, $uniqueid) {
	if(!user_access('admin certificates')) return FALSE;
	if(!in_array($tablename, array('s','t'))) return FALSE;
	if($tablename=='s')
		return $GLOBALS['user']->uid==1 && db_query('SELECT EXISTS(SELECT * FROM {signup} WHERE sid=:sid AND status=:status)', array(':sid'=>$uniqueid, ':status'=>exam_signup_status_FINISHED))->fetchField();
	else
		return db_query('SELECT EXISTS(SELECT * FROM {scores_temp} WHERE stid=:stid)', array(':stid'=>$uniqueid))->fetchField();
}

function exam_scores_query_unbind_form($form, $form_state, $tablename, $uniqueid) {
	$title=t('About to remove score');
	if($tablename=='s') {
		$r=db_query('SELECT s.uid, s.name, s.idcard_number, sg.score, sg.result, sg.coid FROM {students} s '.
			'INNER JOIN {signup} sg ON s.uid=sg.uid WHERE sg.sid=:sid',
			array(':sid'=>$uniqueid)
		)->fetchObject();
	} else {
		$r=db_query('SELECT name, idcard_number, score, result, coid FROM {scores_temp} WHERE stid=:stid', array(':stid'=>$uniqueid))
			->fetchObject();
	}
	$co=certificate_operations_load($r->coid);
	$form['co']=array(
		'#type' => 'item',
		'#title' => t('Organization and certificate'),
		'#markup' => t('!org !series !cname',
			array('!org'=>$co->oname, '!series'=>$co->series, '!cname'=>$co->cname)),
	);
	$form['name']=array(
		'#type' => 'item',
		'#title' => t('Real Name'),
		'#markup' => isset($r->uid)?l($r->name, 'user/'.$r->uid):$r->name,
	);
	$form['idcard_number']=array(
		'#type' => 'item',
		'#title' => t('IDCard Number'),
		'#markup' => $r->idcard_number,
	);
	$form['score']=array(
		'#type' => 'item',
		'#title' => t('Score'),
		'#markup' => $r->score,
	);
	$form['result']=array(
		'#type' => 'item',
		'#title' => t('Result'),
		'#markup' => _exam_result_id_into_text($r->result),
	);
	return confirm_form($form,
		$title,
		$_SERVER['HTTP_REFERER'],
		t('This action cannot be undone.').t('You will need to reupload the result.'),
		t('Remove')
	);
}

function exam_scores_query_unbind_form_submit($form, &$form_state) {
	if(arg(4)=='s')
		db_delete('signup')->condition('sid',arg(5))->execute();
	else
		db_delete('scores_temp')->condition('stid',arg(5))->execute();
	drupal_set_message(t('The score for !name in !cname is removed.', 
		array('!name'=>$form['name']['#markup'], '!cname'=>$form['co']['#markup']))
	);
	watchdog('exam',
		'Removed !name score in !cname.', array(
			'!name'=>$form['name']['#markup'], '!cname'=>$form['co']['#markup']
			),
		WATCHDOG_INFO
	);
	$form_state['redirect']='exam/scores/query';
}


function exam_user_scores() {
	$output='';
	drupal_add_css(
		'.inline-element-div label, .inline-element-div select, .inline-element-div input, .inline-element-div div.form-item { display: inline;}',
		'inline'
	);
	drupal_add_js(drupal_get_path('module', 'exam') .'/jquery.cookie.js');
	$query=db_query('SELECT o.oid, o.name AS oname FROM {operations} o WHERE EXISTS('.
		'SELECT * FROM {signup} s INNER JOIN {certificates_operations} co ON s.coid=co.coid '.
		'WHERE s.uid=:uid AND s.status=:status AND co.oid=o.oid) ORDER BY oid DESC',
		array(':uid'=>$GLOBALS['user']->uid, ':status'=>exam_signup_status_FINISHED)
	);
	$oids=array();
	$onames=array();
	foreach($query as $r) {
		$oids[]=$r->oid;
		$onames[$r->oid]=$r->oname;
	}
	if(count($oids)==1) {
		$oid=$oids[0];
		setcookie('operation', NULL);
		$output.=sprintf('<strong>%s</strong>',t('Your scores and result of !oname goes:', array('!oname'=>$r->oname)));
	} else {
		var_dump($_COOKIE['operation']);
		$oid=isset($_COOKIE['operation'])&&in_array($_COOKIE['operation'], $oids)?$_COOKIE['operation']:$oids[0];
		$operation_select=array(
			'#type' => 'select',
			'#id' => 'operationselect',
			'#name' => 'operationselect',
			'#title' => t('Select operation'),
			'#prefix' => '<div class="inline-element-div">',
			'#suffix' => '</div>',
			'#default_value' => $oid,
			'#attributes' => array('onChange' => ''.
				'jQuery.cookie("operation", jQuery(":input[name=operationselect]").val());'.
				'window.location.reload();'.
			''),
			'#options' => $onames,
		);
		$output.=drupal_render($operation_select);
	}
	if(isset($_COOKIE['operation']))
		drupal_add_js(
			'jQuery(document).ready(function(){'.
				'jQuery("#operationselect").val('.$_COOKIE['operation'].');'.
				'});'.
				'',
			'inline'
		);

	$rdbo=db_query('SELECT s.sid, s.score, s.result, s.status, o.oid, o.name as oname, c.series, c.name as cname '.
		'FROM {signup} s INNER JOIN {certificates_operations} co ON s.coid=co.coid '.
		'INNER JOIN {operations} o ON co.oid=o.oid '.
		'INNER JOIN {certificates} c ON co.cid=c.cid '.
		'WHERE s.uid=:uid AND s.status=:status AND co.oid=:oid ORDER by s.coid DESC',
		array(':uid'=>$GLOBALS['user']->uid, ':status'=>exam_signup_status_FINISHED, ':oid'=>$oid)
	);

	$rows=array();
	foreach($rdbo as $r) {
		$rows[]=array(
			$r->series,
			$r->cname,
			$r->score,
		);
		if($r->result==exam_signup_result_PASSED && exam_user_scores_report_access($r->sid))
			$rows[count($rows)-1][]=l(_exam_result_id_into_text($r->result), 'user/scores/report/'.$r->sid,
				array('attributes'=>array('title'=>t('Click to print score report')))
			);
		else
			$rows[count($rows)-1][]=_exam_result_id_into_text($r->result);
	}

	$header=array(
		t('Series'),
		t('Specification'),
		t('Score'),
		t('Result')
	);

	$output .= theme('table', array('header'=>$header, 'rows'=>$rows));

	return $output;
}

function _exam_result_id_into_text($resultid) {
	$text=array(
		t('Absent'),
		t('Failed'),
		t('Passed')
	);
	return $text[$resultid];
}

function exam_user_scores_access() {
	$r=student_load($GLOBALS['user']);
	if(empty($r)) return FALSE;
	return db_query('SELECT EXISTS(SELECT * FROM {signup} WHERE status=:status AND uid=:uid)',
		array(':uid'=>$r->uid, ':status'=>exam_signup_status_FINISHED)
	)->fetchField();
}

function exam_user_scores_report_access($sid) {
	return db_query('SELECT EXISTS(SELECT * FROM {signup} WHERE sid=:sid AND uid=:uid AND status=:status)',
		array(':sid'=>$sid, ':uid'=>$GLOBALS['user']->uid, ':status'=>exam_signup_status_FINISHED)
	)->fetchField();
}

function exam_user_scores_report($sid) {
	drupal_add_css(drupal_get_path('module', 'exam') .'/exam.report.all.css', array('media'=>'all'));
	drupal_add_css(drupal_get_path('module', 'exam') .'/exam.report.print.css', array('media'=>'print'));
	drupal_add_js(
		'jQuery(document).ready(function(){'.
			'window.print();'.
			'});'.
			'',
		'inline'
	);
	$s=student_load($GLOBALS['user']);
	$s->idcard_number=substr_replace($s->idcard_number, '*', 3, strlen($s->idcard_number)-6);
	$sg=db_query('SELECT * FROM {signup} WHERE sid=:sid', array(':sid'=>$sid))->fetchObject();
	$co=certificate_operations_load($sg->coid);
	$output='';
	$rows=array();
	$rows[]=array(array('data'=>t('Real Name'), 'header'=>TRUE), $s->name);
	$rows[]=array(array('data'=>t('Gender'), 'header'=>TRUE), $s->gender==1?t('Male'):t('Female'));
	$rows[]=array(array('data'=>t('IDCard Number'), 'header'=>TRUE), $s->idcard_number);
	$rows[]=array(array('data'=>t('Exam Operation'), 'header'=>TRUE), $co->oname);
	$rows[]=array(array('data'=>t('Specification'), 'header'=>TRUE), sprintf('%s<br/>%s',$co->series, $co->cname));
	$rows[]=array(array('data'=>t('Score'), 'header'=>TRUE), $sg->score);
	$rows[]=array(array('data'=>t('Result'), 'header'=>TRUE), _exam_result_id_into_text($sg->result));
	$output.=theme('table', array('rows'=>$rows));

	$output.=sprintf('<div id="certgovernorg"><div class="img"><img src="%suser/scores/report/%s/picture.png" align="left"/></div>', base_path(), $sg->sid);
	$output.=sprintf('<div class="text">%s<br/>%s</div></div>',variable_get('site_name', 'Drupal'),$GLOBALS['base_url']);

	return $output;
}

function exam_user_scores_report_qrcode($sid) {
	include_once(DRUPAL_ROOT.'/sites/all/libraries/phpqrcode/qrlib.php');
	$s=student_load($GLOBALS['user']);
	$s->idcard_number=substr_replace($s->idcard_number, '*', 3, strlen($s->idcard_number)-6);
	$sg=db_query('SELECT * FROM {signup} WHERE sid=:sid', array(':sid'=>$sid))->fetchObject();
	$co=certificate_operations_load($sg->coid);
	$output='';
	$rows=array();
	$rows[]=sprintf('%s: %s', t('Real Name'), $s->name);
	$rows[]=sprintf('%s: %s', t('Gender'), $s->gender==1?t('Male'):t('Female'));
	$rows[]=sprintf('%s: %s', t('IDCard Number'), $s->idcard_number);
	$rows[]=sprintf('%s: %s', t('Exam Operation'), $co->oname);
	$rows[]=sprintf('%s: %s', t('Specification'), sprintf('%s %s',$co->series, $co->cname));
	$rows[]=sprintf('%s: %s', t('Score'), $sg->score);
	$rows[]=sprintf('%s: %s', t('Result'), _exam_result_id_into_text($sg->result));
	QRcode::png(implode("\n", $rows));
}

function exam_user_update($edit, $account, $category) {
	if($category=='account')
		exam_user_login($edit, $account);
}

function exam_user_login($edit, $account) {
	$s=student_load($account);
	if(empty($s)) return;
	$idcardnumber=isset($edit['idnumber'])?$edit['idnumber']:$s->idcard_number;
	$name=isset($edit['truename'])?$edit['truename']:$s->name;
	if(isset($edit['haveexname']))
		if($edit['haveexname'])
			$exname=$edit['exname'];
		else
			$exname=$edit['name'];
	else $exname=empty($s->exname)?$s->name:$s->exname;
	$query=db_query('SELECT * FROM {scores_temp} WHERE idcard_number=:idcardnumber AND (name=:name or name=:exname)', array(
		':idcardnumber'=>$idcardnumber,
		':name'=>$name,
		':exname'=>$exname
	));
	$c=0;
	foreach($query as $r) {
		$i=db_merge('signup')->key(array('uid'=>$s->uid, 'coid'=>$r->coid))->updateFields(array(
			'uid' => $s->uid,
			'coid' => $r->coid,
			'score' => $r->score,
			'result' => $r->result,
			'status' => exam_signup_status_FINISHED
		))->insertFields(array(
			'ticket_number'=>$r->ticket_number,
			'uid' => $s->uid,
			'coid' => $r->coid,
			'score' => $r->score,
			'result' => $r->result,
			'status' => exam_signup_status_FINISHED
		))->execute();
		if($i) {
			db_delete('scores_temp')->condition('stid',$r->stid)->execute();
			$c++;
		}
	}
	if($c)
		watchdog('exam',
			'!user claimed !num exam scores automatically.', array(
				'!user'=>$s->name,
				),
			WATCHDOG_INFO
		);
}

function exam_user_delete($user) {
	$query=db_query('SELECT EXISTS(SELECT * FROM {signup} WHERE uid=:uid)', array(':uid'=>$user->uid));
	if($query->fetchField())
		throw new Exception(t("Cannot delete user !user, as there are signup information related to him.", array('!user'=>$user->name)));
}

?>
