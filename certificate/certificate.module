<?php

/*
 * This file is licensed under GPLv2+.
 */

/**
 * @file
 * Defines the basic information of certificate.
 */
 
/**
 * Implementation of hook_help().
 */
function certificate_help($path, $arg) {
	switch ($path) {
		case 'certificate':
			$output = t('You may administrate various basic information of certificates via following features.');
			break;
		case 'certificate/specification':
			$output = t('In this page, you could modify or add new certificate specification.');
			break;
		case 'certificate/preload':
			$output = t('In this page, you could preload certificates already issued, for students to claim.');
			break;
	}
	if (isset($output))
		return $output;
}

/**
 * Implementation of hook_permission().
 */
function certificate_permission() {
	return array(
		'admin certificates' => array(
			'title' => t('Administrate certificates types'),
		),
	);
}

/**
 * Implementation of hook_theme().
 */
function certificate_theme() {
	return array(
		'certificate_specification_form' => array(
			'render element' => 'form', 
		),
	);
}

/**
 * Implementation of hook_menu().
 */
function certificate_menu() {
	$items=array();
	$items['certificate']=array(
		'title' => 'Certificates Management',
		'description' => "Manage the certificates",
		'page callback' => 'certificate_blocklist',
		'access callback' => 'user_access',
		'access arguments'=> array('admin certificates'),
		'expanded' => TRUE,
	);
	$items['certificate/specification']=array(
		'title' => 'Specification Management',
		'weight' => '1',
		'description' => "Manage the specifications",
		'page callback' => 'drupal_get_form',
		'page arguments' => array('certificate_specification_form'),
		'access callback' => 'user_access',
		'access arguments'=> array('admin certificates'),
	);
	$items['certificate/operations']=array(
		'title' => 'Operations Management',
		'weight' => 2,
		'description' => "Manage the operations",
		'page callback' => 'drupal_get_form',
		'page arguments' => array('certificate_operations_form'),
		'access callback' => 'user_access',
		'access arguments'=> array('admin certificates'),
	);
	return $items;
}

/**
 * Provide a single block from the administration menu as a page.
 * This function is often a destination for these blocks.
 * For example, 'admin/content/types' needs to have a destination to be valid
 * in the Drupal menu system, but too much information there might be
 * hidden, so we supply the contents of the block.
 *
 * @return
 *   The output HTML.
 */
function certificate_blocklist() {
	$item = menu_get_item();
	$content = system_admin_menu_block($item);

	return theme('admin_block_content', array('content' => $content));
}

/**
 * Callback function of 'certificate/specification'
 */
function certificate_specification_form($form, $form_state) {
	$form=array();
	if(isset($form_state['storage']['cid'])) {
		$form['cid']=array('#type'=>'hidden','#value'=>$form_state['storage']['cid']);
		$certificate=db_query('SELECT * FROM {certificates} WHERE cid=:cid',array(':cid'=>$form_state['storage']['cid']))->fetchObject();
	} else $certificate=FALSE;

	$form['#attached']['css']=array(
		'.inline-element-div label, .inline-element-div select, .inline-element-div input, .inline-element-div div.form-item { display: inline; }' => array('type'=>'inline')
	);

	$form['addnotice']=array(
		'#markup' => '<strong>'.($certificate?t('Modify specification'):t('Add specification')).'</strong>',
	);

	$series=array();
	$dbo=db_query('SELECT DISTINCT series FROM {certificates}');
	$i=1;
	$c_series=1;
	foreach($dbo as $r) {
		$series+=array($i=>$r->series);
		if($certificate&&$r->series==$certificate->series) $c_series=$i;
		$i++;
	}
	$form['series_caption']=array(
		'#type' => 'item',
		'#title' => t('Series'),
		'#suffix' => '<div class="inline-element-div">',
		'#required' => TRUE,
	);
	if($i>1) {
		$series+=array('0'=>t('-- New series --'));
		$form['series']=array(
			'#type' => 'select',
			'#required' => TRUE,
			'#default_value' => 1,
			'#options' => $series,
		);
		$form['series_input']=array(
			'#type' => 'textfield',
			'#title' => t(', in the name of'),
			'#title_display' => 'before',
			'#maxlength' => 30,
			'#size' => 30,
			'#states' => array(
				'visible' => array(
					':input[name="series"]' => array('value' =>'0'),
				),
				'required' => array(
					':input[name="series"]' => array('value' =>'0'),
				),
			),
		);
		$form['#attached']['js'][]=array('data'=>
			'jQuery(document).ready(function(){'.
				'jQuery("#edit-series").change(function(){ '.
				'if(jQuery("#edit-series").val()==0) {'.
					'jQuery("#edit-series-input").val(""); }'.
				'else {'.
					'jQuery("#edit-series-input").val(jQuery("#edit-series").find("option:selected").text());'.
					'}'.
				'});'. // end series.change function()
				'});'. // end document ready function()
				'','type' => 'inline'
		);
	}
	else {
		$form['series']=array(
			'#type' => 'hidden',
			'#value' => '0',
		);
		$form['series_input']=array(
			'#type' => 'textfield',
			'#title' => t('Series Name'),
			'#maxlength' => 30,
			'#size' => 40,
			'#required' => TRUE,
		);
	}
	$form['name']=array(
		'#type' => 'textfield',
		'#title' => t('Specification Name'),
		'#required' => TRUE,
		'#maxlength' => 50,
		'#size' => 40,
	);
	$form['end']=array(
		'#markup' => '</div>'
	);
	$form['c_series']=array('#type'=>'hidden','#value'=>$c_series);
	$form['c_name']=array('#type'=>'hidden','#value'=>$certificate?$certificate->name:'');
	$form['#attached']['js'][]= array('data'=>
		'jQuery(document).ready(function(){'.
			'if(jQuery(":input[name=\"c_series\"]").val()!="") jQuery("#edit-series").val(jQuery(":input[name=\"c_series\"]").val());'.
			'else jQuery("#edit-series").val("0");'.
			'jQuery("#edit-name").val(jQuery(":input[name=\"c_name\"]").val());'.
			'jQuery("#edit-series").change();'.
			'});'.
			'', 'type'=>'inline'
	);
	$form['save']=array(
		'#type' => 'submit',
		'#name' => 'save',
		'#value' => t('Save'),
	);

	$form['existingnotice']=array(
		'#markup' => '<div style="margin-top: 20px;"><strong>'.t('Existing specifications').'</strong></div>',
	);
	$header=array(
		'series' => array('data' => t('Series'), 'field'=> 'series'),
		'name' => array('data' => t('Specification'), 'field'=> 'name'),
	);
	
	$query=db_select('certificates','c')->fields('c')
		->extend('TableSort')->orderByHeader($header)->extend('PagerDefault')->limit(20);
	$result=$query->execute();
	$form['existing']=array('#type'=>'fieldset');

	foreach($result as $r) {
		$form['existing']['cid'.$r->cid]=array('#type'=>'hidden','#value'=>$r->cid);
		$form['existing']['series'.$r->cid]=array('#markup'=>$r->series);
		$form['existing']['name'.$r->cid]=array('#markup'=>$r->name);
		$form['existing']['modify'.$r->cid]=array('#type'=>'submit','#submit'=>array('certificate_specification_form_modify_submit'),'#limit_validation_errors'=>array(),'#name'=>'modify_'.$r->cid,'#value'=>t('Modify'));
		$form['existing']['delete'.$r->cid]=array('#type'=>'submit','#submit'=>array('certificate_specification_form_delete_submit'),'#limit_validation_errors'=>array(),'#name'=>'delete_'.$r->cid,'#value'=>t('Delete'));
	}
	return $form;
}

function certificate_specification_form_validate($form, $form_state) {
	if($form_state['values']['series']=='0' && trim($form_state['values']['series_input'])==FALSE)
		form_set_error('series_input', t('Series name is required.'));
}

function certificate_specification_form_submit($form, $form_state) {
	// if cid is not set, then add new specification
	if(!isset($form_state['storage']['cid'])) {
		$i=db_query('SELECT MAX(cid) FROM {certificates}')->fetchField();
		db_insert('certificates')->fields(array(
			'cid' => $i+1,
			'series' => $form_state['values']['series_input'],
			'name' => $form_state['values']['name'],
		))->execute();
		drupal_set_message(t('Specification added.'));
	} else {
		db_update('certificates')->fields(array(
			'series' => $form_state['values']['series_input'],
			'name' => $form_state['values']['name'],
		))->condition('cid',$form_state['storage']['cid'])->execute();
		drupal_set_message(t('Specification Saved.'));
	}
}

function certificate_specification_form_modify_submit($form, &$form_state) {
	$form_state['rebuild'] = TRUE;
	$form_state['storage']['cid']=substr($form_state['triggering_element']['#name'],7);
}

function certificate_specification_form_delete_submit($form, $form_state) {
	db_delete('certificates')->condition('cid',substr($form_state['triggering_element']['#name'],7))->execute();
	drupal_set_message(t('Specification Deleted.'));
}

function theme_certificate_specification_form($variables) {
	$form=$variables['form'];
	$output ='';
	$output.=drupal_render($form['addnotice']);
	$output.=drupal_render($form['series_caption']);
	$output.=drupal_render($form['series']);
	$output.=drupal_render($form['series_input']);
	$output.=drupal_render($form['end']);
	$output.=drupal_render($form['name']);
	$output.=drupal_render($form['save']);
	$output.=drupal_render($form['existingnotice']);
	$rows=array();
	foreach($form['existing'] as $key=>$val) {
		//var_dump($key);
		if(substr($key,0,3)!='cid') continue;
		$cid=substr($key,3);
		if(isset($form['cid']) && $form['cid']['#value']==$cid) {
			$rows[]=array(
				'data'=>array(
					drupal_render($form['existing']['series'.$cid]),
					drupal_render($form['existing']['name'.$cid]),
					t('Now Editing'),
				),
				'class'=>array('rowselected'),
			);
			unset($form['existing']['modify'.$cid]);
			unset($form['existing']['delete'.$cid]);
		} else {
			$rows[]=array(
				drupal_render($form['existing']['series'.$cid]),
				drupal_render($form['existing']['name'.$cid]),
				drupal_render($form['existing']['modify'.$cid]).drupal_render($form['existing']['delete'.$cid]),
			);
		}
	}
	$header=array(
		'series' => array('data' => t('Series'), 'field'=> 'series'),
		'name' => array('data' => t('Specification'), 'field'=> 'name'),
		'modify' => array('data' => t('Operations')),
	);
	$output.=theme('table', array('header'=>$header, 'rows'=>$rows, 'empty'=>t('No existing specifications.')));
	unset($form['existing']);
	$output.=drupal_render_children($form);
	$output .= theme('pager');
	return $output;
}

function certificate_operations_form($form, $form_state) {
}

function certificate_operations_load($cid, $oid) {
	$query=db_query('SELECT co.*, c.name AS cname, o.name as oname, c.series FROM {certificates_operations} co '.
		'INNER JOIN {operations} o ON o.oid=co.oid '.
		'INNER JOIN {certificates} c ON c.cid=co.cid '
	);
	return $query->fetchObject();
}

?>
